<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nodejs 识别图片类型</title>
      <link href="/2021/04/03/2017node/20200403/"/>
      <url>/2021/04/03/2017node/20200403/</url>
      
        <content type="html"><![CDATA[<p>通过切文件名称后缀来获得图片格式的方式是不准确的，因为文件后缀是可以被强行更改的，这样一个.gif 图片也可以被保存成.jpg,</p><p>那么在 Node 上我们如何做文件类型的校验呢</p><p>##通过文件头标识判断图片格式<br>其实很简单，每个图片文件都有文件头标识，各种格式的图片的文件头标识都是不一样，所以可以通过判断文件头的标识来识别图片格式。</p><p>通过在网上找资料，汇总了如下的 图片文件头标识:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.JPEG/JPG - 文件头标识 (2 bytes): ff, d8 文件结束标识 (2 bytes): ff, d9</span><br><span class="line">2.TGA - 未压缩的前 5 字节 00 00 02 00 00 - RLE 压缩的前 5 字节 00 00 10 00 00</span><br><span class="line">3.PNG - 文件头标识 (8 bytes) 89 50 4E 47 0D 0A 1A 0A</span><br><span class="line">4.GIF - 文件头标识 (6 bytes) 47 49 46 38 39(37) 61</span><br><span class="line">5.BMP - 文件头标识 (2 bytes) 42 4D B M</span><br><span class="line">6.PCX - 文件头标识 (1 bytes) 0A</span><br><span class="line">7.TIFF - 文件头标识 (2 bytes) 4D 4D 或 49 49</span><br><span class="line">8.ICO - 文件头标识 (8 bytes) 00 00 01 00 01 00 20 20</span><br><span class="line">9.CUR - 文件头标识 (8 bytes) 00 00 02 00 01 00 20 20</span><br><span class="line">10.IFF - 文件头标识 (4 bytes) 46 4F 52 4D</span><br><span class="line">11.ANI - 文件头标识 (4 bytes) 52 49 46 46</span><br><span class="line">知识点: 1 字节(bytes) = 8 bits,上面的数字均为 16 进制也就占 4bits 空间,每两个 16 进制数字占一字节</span><br></pre></td></tr></table></figure><span id="more"></span><p>##如何判断<br>通过将图片资源的二进制流与该标识做比对，即可判断图片格式。</p><p>因为实现逻辑非常简单，具体的实现逻辑看代码和注释就就好，在这里贡献出来给大家参考，方便大家开发使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getImageSuffix</span>(<span class="params">fileBuffer</span>) &#123;</span><br><span class="line"><span class="comment">// 将上文提到的 文件标识头 按 字节 整理到数组中</span></span><br><span class="line"><span class="keyword">const</span> imageBufferHeaders = [</span><br><span class="line">&#123; <span class="attr">bufBegin</span>: [<span class="number">0xff</span>, <span class="number">0xd8</span>], <span class="attr">bufEnd</span>: [<span class="number">0xff</span>, <span class="number">0xd9</span>], <span class="attr">suffix</span>: <span class="string">&#x27;.jpg&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">bufBegin</span>: [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>], <span class="attr">suffix</span>: <span class="string">&#x27;.tga&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">bufBegin</span>: [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>], <span class="attr">suffix</span>: <span class="string">&#x27;.rle&#x27;</span> &#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">bufBegin</span>: [<span class="number">0x89</span>, <span class="number">0x50</span>, <span class="number">0x4e</span>, <span class="number">0x47</span>, <span class="number">0x0d</span>, <span class="number">0x0a</span>, <span class="number">0x1a</span>, <span class="number">0x0a</span>],</span><br><span class="line"><span class="attr">suffix</span>: <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123; <span class="attr">bufBegin</span>: [<span class="number">0x47</span>, <span class="number">0x49</span>, <span class="number">0x46</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x61</span>], <span class="attr">suffix</span>: <span class="string">&#x27;.gif&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">bufBegin</span>: [<span class="number">0x47</span>, <span class="number">0x49</span>, <span class="number">0x46</span>, <span class="number">0x38</span>, <span class="number">0x37</span>, <span class="number">0x61</span>], <span class="attr">suffix</span>: <span class="string">&#x27;.gif&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">bufBegin</span>: [<span class="number">0x42</span>, <span class="number">0x4d</span>], <span class="attr">suffix</span>: <span class="string">&#x27;.bmp&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">bufBegin</span>: [<span class="number">0x0a</span>], <span class="attr">suffix</span>: <span class="string">&#x27;.pcx&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">bufBegin</span>: [<span class="number">0x49</span>, <span class="number">0x49</span>], <span class="attr">suffix</span>: <span class="string">&#x27;.tif&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">bufBegin</span>: [<span class="number">0x4d</span>, <span class="number">0x4d</span>], <span class="attr">suffix</span>: <span class="string">&#x27;.tif&#x27;</span> &#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">bufBegin</span>: [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x20</span>],</span><br><span class="line"><span class="attr">suffix</span>: <span class="string">&#x27;.ico&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">bufBegin</span>: [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x20</span>],</span><br><span class="line"><span class="attr">suffix</span>: <span class="string">&#x27;.cur&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123; <span class="attr">bufBegin</span>: [<span class="number">0x46</span>, <span class="number">0x4f</span>, <span class="number">0x52</span>, <span class="number">0x4d</span>], <span class="attr">suffix</span>: <span class="string">&#x27;.iff&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">bufBegin</span>: [<span class="number">0x52</span>, <span class="number">0x49</span>, <span class="number">0x46</span>, <span class="number">0x46</span>], <span class="attr">suffix</span>: <span class="string">&#x27;.ani&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> imageBufferHeader <span class="keyword">of</span> imageBufferHeaders) &#123;</span><br><span class="line"><span class="keyword">let</span> isEqual</span><br><span class="line"><span class="comment">// 判断标识头前缀</span></span><br><span class="line"><span class="keyword">if</span> (imageBufferHeader.<span class="property">bufBegin</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(imageBufferHeader.<span class="property">bufBegin</span>)</span><br><span class="line">isEqual = buf.<span class="title function_">equals</span>(</span><br><span class="line"><span class="comment">//使用 buffer.slice 方法 对 buffer 以字节为单位切割</span></span><br><span class="line">fileBuffer.<span class="title function_">slice</span>(<span class="number">0</span>, imageBufferHeader.<span class="property">bufBegin</span>.<span class="property">length</span>)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断标识头后缀</span></span><br><span class="line"><span class="keyword">if</span> (isEqual &amp;&amp; imageBufferHeader.<span class="property">bufEnd</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(imageBufferHeader.<span class="property">bufEnd</span>)</span><br><span class="line">isEqual = buf.<span class="title function_">equals</span>(fileBuffer.<span class="title function_">slice</span>(-imageBufferHeader.<span class="property">bufEnd</span>.<span class="property">length</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isEqual) &#123;</span><br><span class="line"><span class="keyword">return</span> imageBufferHeader.<span class="property">suffix</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 未能识别到该文件类型</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Random alpha-numeric string in JavaScript</title>
      <link href="/2020/06/06/2017node/20200606/"/>
      <url>/2020/06/06/2017node/20200606/</url>
      
        <content type="html"><![CDATA[<p>I just came across this as a really nice and elegant solution:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">36</span>).<span class="title function_">slice</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>Notes on this implementation:</p><span id="more"></span><p>This will produce a string anywhere between zero and 12 characters long, usually 11 characters, due to the fact that floating point stringification removes trailing zeros.<br>It won’t generate capital letters, only lower-case and numbers.<br>Because the randomness comes from Math.random(), the output may be predictable and therefore not necessarily unique.<br>Even assuming an ideal implementation, the output has at most 52 bits of entropy, which means you can expect a duplicate after around 70M strings generated.</p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker: 上传镜像至私有仓库</title>
      <link href="/2020/05/12/2016linux/20200512/"/>
      <url>/2020/05/12/2016linux/20200512/</url>
      
        <content type="html"><![CDATA[<p>上传镜像<br>要上传镜像到私有仓库，需要在镜像的 tag 上加入仓库地址：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag express-app 111.111.111.111:5000/sunhengzhe/express-app:v1</span><br></pre></td></tr></table></figure><p>为了不与其他镜像冲突，可以加入命名空间如 sunhengzhe，另外最好给镜像打上 tag 如 v1。</p><p>注意仓库地址没有加协议部分，docker 默认的安全策略需要仓库是支持 https 的，如果服务器只能使用 http 传输，那么直接上传会失败，需要在 docker 客户端的配置文件中进行声明。</p><span id="more"></span><p>推送镜像<br>打完 tag 后使用 push 命令推送即可：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 111.111.111.111:5000/sunhengzhe/express-app:v1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除 Docker 镜像</title>
      <link href="/2020/05/11/2016linux/20200511/"/>
      <url>/2020/05/11/2016linux/20200511/</url>
      
        <content type="html"><![CDATA[<p>Docker rmi<br>docker rmi 通过镜像的 ID 删除镜像。</p><p>要删除镜像，首先需要列出所有镜像以获取镜像的 ID，镜像的名称和其他详细信息。 运行简单的命令 docker images -a 或 docker images。<br>之后，明确要删除哪个镜像，然后执行简单命令 docker rmi <your-image-id>。然后，列出所有镜像并检查，可以确认镜像是否已删除。</p><p>一次删除多张镜像<br>当你要一次删除多张镜像时，可以使用一种方法。首先只需列出镜像即可获取镜像的 ID，然后执行简单的命令：</p><blockquote><p>docker rmi <your-image-id> <your-image-id> …</p></blockquote><p>列出镜像的 ID，每个 ID 之间留一个空格。</p><p>一次删除所有镜像<br>要删除所有镜像，有一个简单的命令可以做到：</p><blockquote><p>docker rmi $(docker images -q)。</p></blockquote><p>在上面的命令中，有两个命令，第一个在 $() 中执行的命令是 shell 语法，返回以该执行的结果。然后，-q- 是一个选项，用于返回唯一的 ID。$() 返回镜像 ID 的结果，然后 docker rmi 删除所有这些镜像。</p><span id="more"></span><p>Docker rm<br>docker rm 根据容器的名称或者 ID 来删除容器。</p><p>如果 Docker 容器正在运行，你在删除它们之前需要先停止运行。</p><p>停止所有容器运行：</p><blockquote><p>docker stop $(docker ps -a -q)</p></blockquote><p>删除所有停止运行的容器：</p><blockquote><p>docker rm $(docker ps -a -q)</p></blockquote><p>删除多个容器<br>你可以通过向命令传递要删除的容器列表来停止和删除多个容器。shell 语法 $() 返回括号中执行的任何结果。因此，你可以在其中创建容器列表，以传递给 stop 和 rm 命令。</p><p>docker ps -a -q 分解<br>docker ps 列出容器。<br>-a 这个选项用于列出所有容器，包括停止运行的。如果没有这个选项，则默认只列出在运行的容器。<br>-q 这个选项列出容器的数字 ID，而不是容器的所有信息。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to squash all commits on branch</title>
      <link href="/2020/05/10/2018git/20200510/"/>
      <url>/2020/05/10/2018git/20200510/</url>
      
        <content type="html"><![CDATA[<p>Another way to squash all your commits is to reset the index to master:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout yourBranch</span><br><span class="line">git reset $(git merge-base master $(git branch --show-current))</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&quot;one commit on yourBranch&quot;</span></span><br></pre></td></tr></table></figure><p>This isn’t perfect as it implies you know from which branch “yourBranch” is coming from.<br>Note: finding that origin branch isn’t easy&#x2F;possible with Git (the visual way is often the easiest, as seen here).</p><p>Note: <code>git branch --show-current</code> has been introduced with Git 2.22 (Q1 20219).</p><p>EDIT: you will need to use <code>git push --force</code></p><p>Karlotcha Hoa adds in the comments:For the reset, you can do</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset $(git merge-base master $(git rev-parse --abbrev-ref HEAD))</span><br></pre></td></tr></table></figure><p>[That] automatically uses the branch you are currently on.<br>And if you use that, you can also use an alias, as the command doesn’t rely on the branch name.</p><p>sschoof adds in the comments:</p><p>Since my default branch is called main and my search had multi times brought me here:<br>To copy it for my next time</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset $(git merge-base main $(git rev-parse --abbrev-ref HEAD))</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001 中国社会各阶级的分析</title>
      <link href="/2019/05/01/2019%E6%AF%9B%E9%80%891/20190501/"/>
      <url>/2019/05/01/2019%E6%AF%9B%E9%80%891/20190501/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>001</p><p>中国社会各阶级的分析</p><p>（一九二五年十二月一日）</p><p>毛泽东此文是为反对当时党内存在着的两种倾向而写的。当时党内的第一种倾向，以陈独秀为代表，只注意同国民党合作，忘记了农民，这是右倾机会主义。第二种倾向，以张国焘为代表，只注意工人运动，同样忘记了农民，这是“左”倾机会主义。这两种机会主义都感觉自己力量不足，而不知道到何处去寻找力量，到何处去取得广大的同盟军。毛泽东指出中国无产阶级的最广大和最忠实的同盟军是农民，这样就解决了中国革命中的最主要的同盟军问题。毛泽东并且预见到当时的民族资产阶级是一个动摇的阶级，他们在革命高涨时将要分化，其右翼将要跑到帝国主义方面去。一九二七年所发生的事变，证明了这一点。</p><p>谁是我们的敌人？谁是我们的朋友？这个问题是革命的首要问题。中国过去一切革命斗争成效甚少，其基本原因就是因为不能团结真正的朋友，以攻击真正的敌人。革命党是群众的向导，在革命中未有革命党领错了路而革命不失败的。我们的革命要有不领错路和一定成功的把握，不可不注意团结我们的真正的朋友，以攻击我们的真正的敌人。我们要分辨真正的敌友，不可不将中国社会各阶级的经济地位及其对于革命的态度，作一个大概的分析。</p><p>中国社会各阶级的情况是怎样的呢？</p><p>地主阶级和买办阶级。在经济落后的半殖民地的中国，地主阶级和买办阶级完全是国际资产阶级的附庸，其生存和发展，是附属于帝国主义的。这些阶级代表中国最落后的和最反动的生产关系，阻碍中国生产力的发展。他们和中国革命的目的完全不相容。特别是大地主阶级和大买办阶级，他们始终站在帝国主义一边，是极端的反革命派。其政治代表是国家主义派⑴和国民党右派。</p><p>中产阶级。这个阶级代表中国城乡资本主义的生产关系。中产阶级主要是指民族资产阶级，他们对于中国革命具有矛盾的态度：他们在受外资打击、军阀压迫感觉痛苦时，需要革命，赞成反帝国主义反军阀的革命运动；但是当着革命在国内有本国无产阶级的勇猛参加，在国外有国际无产阶级的积极援助，对于其欲达到大资产阶级地位的阶级的发展感觉到威胁时，他们又怀疑革命。其政治主张为实现民族资产阶级一阶级统治的国家。有一个自称为戴季陶⑵“真实信徒”的，在北京《晨报》⑶上发表议论说：“举起你的左手打倒帝国主义，举起你的右手*****。”这两句话，画出了这个阶级的矛盾惶遽状态。他们反对以阶级斗争学说解释国民党的民生主义，他们反对国民党联俄和容纳共产党⑷及左派分子。但是这个阶级的企图——实现民族资产阶级统治的国家，是完全行不通的，因为现在世界上的局面，是革命和反革命两大势力作最后斗争的局面。这两大势力竖起了两面大旗：一面是红色的革命的大旗，第三国际⑸高举着，号召全世界一切被压迫阶级集合于其旗帜之下；一面是白色的反革命的大旗，国际联盟⑹高举着，号召全世界一切反革命分子集合于其旗帜之下。那些中间阶级，必定很快地分化，或者向左跑入革命派，或者向右跑入反革命派，没有他们“独立”的余地。所以，中国的中产阶级，以其本阶级为主体的“独立”革命思想，仅仅是一个幻想。</p><p>小资产阶级。如自耕农⑺，手工业主，小知识阶层——学生界、中小学教员、小员司、小事务员、小律师，小商人等都属于这一类。这一个阶级，在人数上，在阶级性上，都值得大大注意。自耕农和手工业主所经营的，都是小生产的经济。这个小资产阶级内的各阶层虽然同处在小资产阶级经济地位，但有三个不同的部分。第一部分是有余钱剩米的，即用其体力或脑力劳动所得，除自给外，每年有余剩。这种人发财观念极重，对赵公元帅礼拜最勤，虽不妄想发大财，却总想爬上中产阶级地位。他们看见那些受人尊敬的小财东，往往垂着一尺长的涎水。这种人胆子小，他们怕官，也有点怕革命。因为他们的经济地位和中产阶级颇接近，故对于中产阶级的宣传颇相信，对于革命取怀疑的态度。这一部分人在小资产阶级中占少数，是小资产阶级的右翼。第二部分是在经济上大体上可以自给的。这一部分人比较第一部分人大不相同，他们也想发财，但是赵公元帅⑻总不让他们发财，而且因为近年以来帝国主义、军阀、封建地主、买办大资产阶级的压迫和剥削，他们感觉现在的世界已经不是从前的世界。他们觉得现在如果只使用和从前相等的劳动，就会不能维持生活。必须增加劳动时间，每天起早散晚，对于职业加倍注意，方能维持生活。他们有点骂人了，骂洋人叫“洋鬼子”，骂军阀叫“抢钱司令”，骂土豪劣绅叫“为富不仁”。对于反帝国主义反军阀的运动，仅怀疑其未必成功（理由是：洋人和军阀的来头那么大），不肯贸然参加，取了中立的态度，但是绝不反对革命。这一部分人数甚多，大概占小资产阶级的一半。第三部分是生活下降的。这一部分人好些大概原先是所谓殷实人家，渐渐变得仅仅可以保住，渐渐变得生活下降了。他们每逢年终结账一次，就吃惊一次，说：“咳，又亏了！”这种人因为他们过去过着好日子，后来逐年下降，负债渐多，渐次过着凄凉的日子，“瞻念前途，不寒而栗”。这种人在精神上感觉的痛苦很大，因为他们有一个从前和现在相反的比较。这种人在革命运动中颇要紧，是一个数量不小的群众，是小资产阶级的左翼。以上所说小资产阶级的三部分，对于革命的态度，在平时各不相同；但到战时，即到革命潮流高涨、可以看得见胜利的曙光时，不但小资产阶级的左派参加革命，中派亦可参加革命，即右派分子受了无产阶级和小资产阶级左派的革命大潮所裹挟，也只得附和着革命。我们从一九二五年的五卅运动⑼和各地农民运动的经验看来，这个断定是不错的。</p><p>半无产阶级。此处所谓半无产阶级，包含：（一）绝大部分半自耕农⑽，（二）贫农，（三）小手工业者，（四）店员⑾，（五）小贩等五种。绝大部分半自耕农和贫农是农村中一个数量极大的群众。所谓农民问题，主要就是他们的问题。半自耕农、贫农和小手工业者所经营的，都是更细小的小生产的经济。绝大部分半自耕农和贫农虽同属半无产阶级，但其经济状况仍有上、中、下三个细别。半自耕农，其生活苦于自耕农，因其食粮每年大约有一半不够，须租别人田地，或者出卖一部分劳动力，或经营小商，以资弥补。春夏之间，青黄不接，高利向别人借债，重价向别人籴粮，较之自耕农的无求于人，自然景遇要苦，但是优于贫农。因为贫农无土地，每年耕种只得收获之一半或不足一半；半自耕农则租于别人的部分虽只收获一半或不足一半，然自有的部分却可全得。故半自耕农的革命性优于自耕农而不及贫农。贫农是农村中的佃农，受地主的剥削。其经济地位又分两部分。一部分贫农有比较充足的农具和相当数量的资金。此种农民，每年劳动结果，自己可得一半。不足部分，可以种杂粮、捞鱼虾、饲鸡豕，或出卖一部分劳动力，勉强维持生活，于艰难竭蹶之中，存聊以卒岁之想。故其生活苦于半自耕农，然较另一部分贫农为优。其革命性，则优于半自耕农而不及另一部分贫农。所谓另一部分贫农，则既无充足的农具，又无资金，肥料不足，土地歉收，送租之外，所得无几，更需要出卖一部分劳动力。荒时暴月，向亲友乞哀告怜，借得几斗几升，敷衍三日五日，债务丛集，如牛负重。他们是农民中极艰苦者，极易接受革命的宣传。小手工业者所以称为半无产阶级，是因为他们虽然自有简单的生产手段，且系一种自由职业，但他们也常常被迫出卖一部分劳动力，其经济地位略与农村中的贫农相当。因其家庭负担之重，工资和生活费用之不相称，时有贫困的压迫和失业的恐慌，和贫农亦大致相同。店员是商店的雇员，以微薄的薪资，供家庭的费用，物价年年增长，薪给往往须数年一增，偶与此辈倾谈，便见叫苦不迭。其地位和贫农及小手工业者不相上下，对于革命宣传极易接受。小贩不论肩挑叫卖，或街畔摊售，总之本小利微，吃着不够。其地位和贫农不相上下，其需要一个变更现状的革命，也和贫农相同。</p><p>无产阶级。现代工业无产阶级约二百万人。中国因经济落后，故现代工业无产阶级人数不多。二百万左右的产业工人中，主要为铁路、矿山、海运、纺织、造船五种产业的工人，而其中很大一个数量是在外资产业的奴役下。工业无产阶级人数虽不多，却是中国新的生产力的代表者，是近代中国最进步的阶级，做了革命运动的领导力量。我们看四年以来的罢工运动，如海员罢工⑿、铁路罢工⒀、开滦和焦作煤矿罢工⒁、沙面罢工⒂以及“五卅”后上海香港两处的大罢工⒃所表现的力量，就可知工业无产阶级在中国革命中所处地位的重要。他们所以能如此，第一个原因是集中。无论哪种人都不如他们的集中。第二个原因是经济地位低下。他们失了生产手段，剩下两手，绝了发财的望，又受着帝国主义、军阀、资产阶级的极残酷的待遇，所以他们特别能战斗。都市苦力工人的力量也很可注意。以码头搬运夫和人力车夫占多数，粪夫清道夫等亦属于这一类。他们除双手外，别无长物，其经济地位和产业工人相似，惟不及产业工人的集中和在生产上的重要。中国尚少新式的资本主义的农业。所谓农村无产阶级，是指长工、月工、零工等雇农而言。此等雇农不仅无土地，无农具，又无丝毫资金，只得营工度日。其劳动时间之长，工资之少，待遇之薄，职业之不安定，超过其他工人。此种人在乡村中是最感困难者，在农民运动中和贫农处于同一紧要的地位。</p><p>此外，还有数量不小的游民无产者，为失了土地的农民和失了工作机会的手工业工人。他们是人类生活中最不安定者。他们在各地都有秘密组织，如闽粤的“三合会”，湘鄂黔蜀的“哥老会”，皖豫鲁等省的“大刀会”，直隶及东三省的“在理会”，上海等处的“青帮”⒄，都曾经是他们的政治和经济斗争的互助团体。处置这一批人，是中国的困难的问题之一。这一批人很能勇敢奋斗，但有破坏性，如引导得法，可以变成一种革命力量。</p><p>综上所述，可知一切勾结帝国主义的军阀、官僚、买办阶级、大地主阶级以及附属于他们的一部分反动知识界，是我们的敌人。工业无产阶级是我们革命的领导力量。一切半无产阶级、小资产阶级，是我们最接近的朋友。那动摇不定的中产阶级，其右翼可能是我们的敌人，其左翼可能是我们的朋友——但我们要时常提防他们，不要让他们扰乱了我们的阵线。</p><p>注　　释</p><p>〔1〕 国家主义派指中国青年党，当时以其外围组织“中国国家主义青年团”的名义公开进行活动。组织这个政团的是一些反动政客，他们投靠帝国主义和当权的反动派，把反对中国共产党和苏联当作职业。</p><p>〔2〕 戴季陶（一八九一——一九四九），又名传贤，原籍浙江湖州，生于四川广汉。早年参加中国同盟会，从事过反对清政府和袁世凯的活动。后曾和蒋介石在上海共同经营交易所的投机事业。一九二五年随着孙中山的逝世和革命高潮的到来，他歪曲孙中山学说的革命内容，散布反对国共合作、反对工农革命运动的谬论，为后来蒋介石的反共活动作了准备。一九二七年南京国民政府成立后，历任国民政府委员、考试院院长等职。一九四九年二月，蒋介石的统治即将崩溃，戴季陶感到绝望而自杀。</p><p>〔3〕 北京《晨报》，初名《晨钟报》，一九一六年八月创刊于北京，一九一八年十二月改名为《晨报》，一九二八年六月停刊。</p><p>〔4〕 一九二二年和一九二三年间，孙中山在共产党人的帮助下，决定改组国民党，实行国共合作，容纳共产党人参加国民党，并于一九二四年一月在广州召开国民党第一次全国代表大会，实行联俄、联共、扶助农工的三大政策。李大钊、谭平山、毛泽东、林伯渠、瞿秋白等共产党人参加了这次大会。他们曾经被选为国民党中央执行委员会的委员或候补委员，担任过国民党的许多领导工作，对于帮助国民党走上革命的道路，起了重大的作用。</p><p>〔5〕 第三国际即共产国际，一九一九年三月在列宁领导下成立。一九二二年中国共产党参加共产国际，成为它的一个支部。一九四三年五月，共产国际执行委员会主席团通过决定，提议解散共产国际，同年六月共产国际正式宣布解散。</p><p>〔6〕 国际联盟简称国联，一九二○年一月正式成立。先后参加的有六十多个国家。国际联盟标榜以“促进国际合作，维持国际和平与安全”为目的，实际上日益成为帝国主义国家推行侵略政策的工具。第二次世界大战爆发后无形瓦解，一九四六年四月正式宣布解散。</p><p>〔7〕 这里是指中农。</p><p>〔8〕 赵公元帅是中国民间传说的财神，叫赵公明。</p><p>〔9〕 指一九二五年五月三十日爆发的反帝爱国运动。一九二五年五月间，上海、青岛的日本纱厂先后发生工人罢工的斗争，遭到日本帝国主义和北洋军阀的镇压。上海内外棉第七厂日本资本家在五月十五日枪杀了工人顾正红，并伤工人十余人。二十九日青岛工人被反动政府屠杀八人。五月三十日，上海二千余学生分头在公共租界各马路进行宣传讲演，一百余名遭巡捕（租界内的警察）逮捕，被拘押在南京路老闸巡捕房内，引起了学生和市民的极大愤慨，有近万人聚集在巡捕房门口，要求释放被捕学生。英帝国主义的巡捕向群众开枪，打死打伤许多人。这就是震惊中外的五卅惨案。六月，英日等帝国主义在上海和其他地方继续进行屠杀。这些屠杀事件激起了全国人民的公愤。广大的工人、学生和部分工商业者，在许多城市和县镇举行游行示威和罢工、罢课、罢市，形成了全国规模的反帝爱国运动高潮。</p><p>〔10〕 这里是指自己有一部分土地，同时租种一部分土地，或出卖一部分劳动力，或兼营小商的贫农。</p><p>〔11〕 店员有不同的阶层，他们一般不占有生产资料，生活来源的全部或者主要部分是依靠向店主出卖劳动力所取得的工资。毛泽东在这里所指的是店员中的一部分，还有一部分下层店员过着无产阶级的生活。</p><p>〔12〕 指一九二二年香港和上海的海员罢工。香港海员罢工爆发于一月十二日，坚持了八个星期。最后，香港英帝国主义当局被迫答应增加工资，恢复原工会，释放被捕工人，抚恤在罢工中死难烈士的家属。上海海员罢工于八月五日开始，坚持了三个星期，也得到胜利。</p><p>〔13〕 指一九二二年和一九二三年中国共产党领导的各主要铁路线的工人罢工。在罢工过程中，工人群众的觉悟迅速提高，要求改善生活的经济斗争迅速发展为反对军阀的政治斗争。一九二三年二月四日，京汉铁路工人为争取组织总工会的自由，举行总罢工。其他许多铁路的工人也纷纷响应。二月七日，英帝国主义支持的北洋军阀吴佩孚、萧耀南等，残酷地屠杀京汉铁路的工人，造成了二七惨案。</p><p>〔14〕 开滦煤矿是直隶省（今河北省）开平、滦县一带煤矿的总称，当时为英帝国主义者所控制。开滦罢工指一九二二年十月、十一月间矿工三万余人举行的大罢工。英帝国主义者和北洋军阀对这次罢工进行残酷的镇压，工人死伤很多，但是仍然坚持斗争。最后，英帝国主义者不得不答应给工人增加一部分工资。焦作煤矿，在河南省北部，当时也为英帝国主义者所控制。焦作罢工指一九二五年七月爆发的罢工。这次罢工是为响应五卅运动而发动的，前后坚持七个多月。最后，英帝国主义者不得不承认工会有代表工人的权利，并且被迫接受增加工资、不无故开除工人和补偿工人因罢工所受的损失等项条件。</p><p>〔15〕 沙面当时是英法帝国主义在广州的租界。一九二四年七月，统治沙面的帝国主义者颁布新警律，规定沙面的中国人出入租界必须携带贴有本人相片的执照，在租界内行动必须受各种苛刻的限制，但是外国人却可以自由出入活动。沙面工人于七月十五日宣告罢工，抗议这些无理措施。这次沙面罢工迫使英法帝国主义者取消了新警律。</p><p>〔16〕 指一九二五年六月一日开始的上海大罢工和六月十九日开始的香港大罢工。这两处罢工是当时全国反帝爱国运动的支柱。前者有二十多万工人参加，坚持了三四个月；后者有二十五万工人参加，坚持了一年零四个月，是截至当时为止的世界工人运动史中时间最长的一次罢工。</p><p>〔17〕 三合会、哥老会、大刀会、在理会、青帮是旧中国的一些民间秘密团体，参加者主要的是破产农民、失业手工业工人和流氓无产者。这类团体大都用宗教迷信为团聚成员的工具，采取家长制的组织形式，有的还拥有武装。参加这类团体的人，在社会生活中有互相援助的义务，有时还共同反抗压迫他们的地主、官僚和外国侵略者。但是，农民和手工业工人不可能依靠这类团体得到出路。同时，由于这类团体带有严重的封建性和盲目的破坏性，它们又往往容易被反动统治阶级和帝国主义势力所操纵和利用。随着工人阶级力量的壮大和中国共产党的成立，农民和手工业工人在共产党的领导之下逐步地建立了完全新式的群众组织，这类落后的团体就失掉了它们的存在价值。</p><p>作者：账号已注销 <a href="https://www.bilibili.com/read/cv7925952/?from=readlist">https://www.bilibili.com/read/cv7925952/?from=readlist</a> 出处：bilibili</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lodash array to object</title>
      <link href="/2018/03/01/2017node/20180301/"/>
      <url>/2018/03/01/2017node/20180301/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeUnionByKey = <span class="keyword">function</span>(<span class="params">data,key,templete=&#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> datasets = data</span><br><span class="line">  <span class="keyword">const</span> datasetsIndex = _.<span class="title function_">mapValues</span>(datasets, <span class="function"><span class="params">dataset</span> =&gt;</span> _.<span class="title function_">keyBy</span>(dataset, key))</span><br><span class="line">  <span class="keyword">const</span> uniqKeys = _.<span class="title function_">chain</span>(datasets).<span class="title function_">flatten</span>().<span class="title function_">map</span>(key).<span class="title function_">uniq</span>().<span class="title function_">value</span>()</span><br><span class="line">  <span class="keyword">const</span> c = _.<span class="title function_">chain</span>(uniqKeys).<span class="title function_">map</span>(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(templete))</span><br><span class="line">    _.<span class="title function_">each</span>(datasetsIndex, <span class="function"><span class="params">dataset</span> =&gt;</span>&#123;</span><br><span class="line">      _.<span class="title function_">merge</span>(data, dataset[val])</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;).<span class="title function_">filter</span>(key).<span class="title function_">value</span>()</span><br><span class="line">  <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker install</title>
      <link href="/2018/01/20/2016linux/20180120/"/>
      <url>/2018/01/20/2016linux/20180120/</url>
      
        <content type="html"><![CDATA[<p>参照官方<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a></p><p>ce是社区版</p><p>先切换ubuntu内镜像<a href="https://mirrors.ustc.edu.cn/repogen/">https://mirrors.ustc.edu.cn/repogen/</a></p><span id="more"></span><p>1、移除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure><p>2、(可选)安装linux-image-extra-*包，以便docker使用aufs存储驱动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    linux-image-extra-$(uname -r) \</span><br><span class="line">    linux-image-extra-virtual</span><br></pre></td></tr></table></figure><p>3、支持https?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><p>4、add Docker的官方GPG key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure><p>5、配置库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line">   $(lsb_release -cs) \</span><br><span class="line">   stable&quot;</span><br></pre></td></tr></table></figure><p>6、install</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><p>7、test</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><blockquote><p>如果运行成功则网络无问题，若有，则需要配置docker代理,配置完重新运行“$ sudo docker run hello-world”进行验证</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.默认情况下这个配置文件夹并不存在，我们要创建它</span><br><span class="line">$ mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">2.创建一个文件 /etc/systemd/system/docker.service.d/http-proxy.conf 文件内容如下：</span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://proxy_ip:proxy_port/&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=http://proxy_ip:proxy_port/&quot;</span><br><span class="line">Environment=&quot;NO_PROXY=localhost,127.0.0.1,localaddress,.localdomain.com&quot;</span><br><span class="line">3.刷新systemd配置:</span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">4.用系统命令验证环境变量加上去没:</span><br><span class="line">$ systemctl show --property=Environment docker</span><br><span class="line">5.重启docker</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>8.安装docker-compose</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-compose</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcp3次</title>
      <link href="/2018/01/01/2018base/20180101/"/>
      <url>/2018/01/01/2018base/20180101/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>简单说，让双方都证实对方能发收。<br>知道对方能收是因为收到对方的因为收到而发的回应。<br>具体：<br>1：A发，B收， B知道A能发<br>2：B发，A收， A知道B能发收<br>3：A发，B收， B知道A能收</p>]]></content>
      
      
      
        <tags>
            
            <tag> base </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lodash合并对象数组</title>
      <link href="/2017/12/26/2017node/20171226/"/>
      <url>/2017/12/26/2017node/20171226/</url>
      
        <content type="html"><![CDATA[<p>因pmo查询做得辣鸡，需要多次查询合成结果集，查询经常遇到对象数组合并问题(key不存在也要赋值)<br>如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const test1 = [</span><br><span class="line">  &#123; name: &#x27;zhanghong&#x27;, age: 32, &#125;,</span><br><span class="line">  &#123; name: &#x27;wanghong&#x27;, age: 20, size: 6 &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const test2 = [</span><br><span class="line">  &#123; name: &#x27;zhanghong&#x27;, gender: &#x27;male&#x27;&#125;,</span><br><span class="line">  &#123; name: &#x27;wanghong&#x27;, gender: &#x27;female&#x27;&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">期望最后结果集合</span><br><span class="line">const test3 = [</span><br><span class="line">  &#123; name: &#x27;zhanghong&#x27;,gender: &#x27;male&#x27;, age: 32, size: 6, &#125;,</span><br><span class="line">  &#123; name: &#x27;wanghong&#x27;, gender: &#x27;female&#x27; ,age: 20, size: 0 &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><span id="more"></span><p>参照</p><blockquote><p><a href="https://stackoverflow.com/questions/29320817/lodash-union-of-arrays-of-objects">https://stackoverflow.com/questions/29320817/lodash-union-of-arrays-of-objects</a></p></blockquote><p>暂时解决，待优化代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const test1 = [</span><br><span class="line">  &#123; name: &#x27;zhanghong&#x27;, age: 32, money: 0, size: 12, &#125;,</span><br><span class="line">  &#123; name: &#x27;wanghong&#x27;, age: 20, size: 6 &#125;,</span><br><span class="line">  &#123; name: &#x27;jinhong&#x27;, age: 16, height: 172 &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const test2 = [</span><br><span class="line">  &#123; name: &#x27;zhanghong&#x27;, gender: &#x27;male&#x27;, age: 14 &#125;,</span><br><span class="line">  &#123; name: &#x27;wanghong&#x27;, gender: &#x27;female&#x27;, age: 33 &#125;,</span><br><span class="line">  &#123; name: &#x27;lihong&#x27;, gender: &#x27;female&#x27;, age: 33 &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const test3 = [</span><br><span class="line">  &#123; name: &#x27;meinv&#x27; &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const test4 = [</span><br><span class="line">  &#123; name: &#x27;aaa&#x27; &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const test5 = [</span><br><span class="line">  &#123; name: &#x27;zhanghong&#x27;, age: &#x27;wtf&#x27; &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const result = mergeUnionByKey(test1, test2, test3, test4, [], test5, &#x27;name&#x27;, &#x27;override&#x27;)</span><br><span class="line"></span><br><span class="line">function mergeUnionByKey(...args) &#123;</span><br><span class="line"></span><br><span class="line">  const config = _.chain(args)</span><br><span class="line">    .filter(_.isString)</span><br><span class="line">    .value()</span><br><span class="line"></span><br><span class="line">  const key = _.get(config, &#x27;[0]&#x27;)</span><br><span class="line"></span><br><span class="line">  const strategy = _.get(config, &#x27;[1]&#x27;) === &#x27;override&#x27; ? _.merge : _.defaultsDeep</span><br><span class="line"></span><br><span class="line">  if (!_.isString(key))</span><br><span class="line">    throw new Error(&#x27;missing key&#x27;)</span><br><span class="line"></span><br><span class="line">  const datasets = _.chain(args)</span><br><span class="line">    .reject(_.isEmpty)</span><br><span class="line">    .filter(_.isArray)</span><br><span class="line">    .value()</span><br><span class="line"></span><br><span class="line">  const datasetsIndex = _.mapValues(datasets, dataset =&gt; _.keyBy(dataset, key))</span><br><span class="line"></span><br><span class="line">  const uniqKeys = _.chain(datasets)</span><br><span class="line">    .flatten()</span><br><span class="line">    .map(key)</span><br><span class="line">    .uniq()</span><br><span class="line">    .value()</span><br><span class="line"></span><br><span class="line">  return _.chain(uniqKeys)</span><br><span class="line">    .map(val =&gt; &#123;</span><br><span class="line">      const data = &#123;&#125;</span><br><span class="line">      _.each(datasetsIndex, dataset =&gt; strategy(data, dataset[val]))</span><br><span class="line">      return data</span><br><span class="line">    &#125;)</span><br><span class="line">    .filter(key)</span><br><span class="line">    .value()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(result, null, 4))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sequelize-auto对照数据库自动生成相应的models</title>
      <link href="/2017/12/25/2017node/20171225/"/>
      <url>/2017/12/25/2017node/20171225/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Install</span><br><span class="line"></span><br><span class="line">npm install -g sequelize-auto</span><br><span class="line">Prerequisites</span><br><span class="line"></span><br><span class="line">You will need to install the correct dialect binding globally before using sequelize-auto.</span><br><span class="line"></span><br><span class="line">Example for MySQL/MariaDB</span><br><span class="line"></span><br><span class="line">npm install -g mysql</span><br><span class="line"></span><br><span class="line">Example for Postgres</span><br><span class="line"></span><br><span class="line">npm install -g pg pg-hstore</span><br><span class="line"></span><br><span class="line">Example for Sqlite3</span><br><span class="line"></span><br><span class="line">npm install -g sqlite</span><br><span class="line"></span><br><span class="line">Example for MSSQL</span><br><span class="line"></span><br><span class="line">npm install -g mssql</span><br></pre></td></tr></table></figure><span id="more"></span><p>参数见npm文档</p><p><a href="https://www.npmjs.com/package/sequelize-auto">https://www.npmjs.com/package/sequelize-auto</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git服务端强制覆盖本地</title>
      <link href="/2017/11/01/2018git/20171101/"/>
      <url>/2017/11/01/2018git/20171101/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard origin/master </span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><span id="more"></span><p>版本管理软件有时boom….</p><p>其他常用命令备用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现promise(转自bananas)</title>
      <link href="/2017/10/02/2017node/20171002/"/>
      <url>/2017/10/02/2017node/20171002/</url>
      
        <content type="html"><![CDATA[<p>promise 是为了解决回调地狱的问题。<br>主要有以下几个方法</p><ol><li>Promise.prototype.then</li><li>Promise.prototype.catch</li><li>Promise.all</li><li>Promise.race</li></ol><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">const log = console.log.bind(console)</span><br><span class="line"></span><br><span class="line">class BananasPromise &#123;</span><br><span class="line">    constructor(func) &#123;</span><br><span class="line">        if(typeof func !== &#x27;function&#x27;) &#123;</span><br><span class="line">            throw new Error(func, &#x27;is no a function&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">        this.func = func</span><br><span class="line">        this.state = &#x27;init&#x27;</span><br><span class="line">        const resolve = this.resolve.bind(this)</span><br><span class="line">        const reject = this.reject.bind(this)</span><br><span class="line">        const r = () =&gt; &#123;</span><br><span class="line">            func(resolve, reject)</span><br><span class="line">            return this</span><br><span class="line">        &#125;</span><br><span class="line">        return r</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _efunc() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    then(done) &#123;</span><br><span class="line">        this.done = done || this._efunc</span><br><span class="line">        if(this.state === &#x27;done&#x27;) &#123;</span><br><span class="line">            done(this.args)</span><br><span class="line">        &#125;</span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    catch(fail) &#123;</span><br><span class="line">        this.fail = fail || this._efunc</span><br><span class="line">        if(this.state === &#x27;fail&#x27;) &#123;</span><br><span class="line">            fail(this.err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resolve(args=&#x27;&#x27;) &#123;</span><br><span class="line">        this.state = &#x27;done&#x27;</span><br><span class="line">        this.args = args</span><br><span class="line">        this.done &amp;&amp; this.then(this.done)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject(args=&#x27;&#x27;) &#123;</span><br><span class="line">        this.state = &#x27;fail&#x27;</span><br><span class="line">        this.err = args</span><br><span class="line">        this.catch &amp;&amp; this.catch(this.fail)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static _init() &#123;</span><br><span class="line">        const cls = this</span><br><span class="line">        cls.state = &#x27;init&#x27;</span><br><span class="line">        cls.done = () =&gt; &#123;&#125;</span><br><span class="line">        cls.fail = () =&gt; &#123;&#125;</span><br><span class="line">        cls._resule = []</span><br><span class="line">        cls._err = null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static all(array) &#123;</span><br><span class="line">        const cls = this</span><br><span class="line">        let len = array.length</span><br><span class="line">        cls._init()</span><br><span class="line">        array.forEach((i, index) =&gt; &#123;</span><br><span class="line">            if(cls._err !== null) &#123;</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            i().then((a) =&gt; &#123;</span><br><span class="line">                if(cls._err !== null) &#123;</span><br><span class="line">                    return</span><br><span class="line">                &#125;</span><br><span class="line">                len--</span><br><span class="line">                cls._resule[index] = a</span><br><span class="line">                if(len === 0) &#123;</span><br><span class="line">                    cls.state = &#x27;done&#x27;</span><br><span class="line">                    cls.then()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).catch((err) =&gt; &#123;</span><br><span class="line">                if(cls._err !== null) &#123;</span><br><span class="line">                    return</span><br><span class="line">                &#125;</span><br><span class="line">                cls.state = &#x27;fail&#x27;</span><br><span class="line">                cls._err = err</span><br><span class="line">                cls.catch()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static then(done) &#123;</span><br><span class="line">        const cls = this</span><br><span class="line">        if(this.state === &#x27;done&#x27;) &#123;</span><br><span class="line">            cls.done(cls._resule)</span><br><span class="line">        &#125; else if(this.state === &#x27;init&#x27;) &#123;</span><br><span class="line">            cls.done = done || cls.done</span><br><span class="line">        &#125;</span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static catch(fail) &#123;</span><br><span class="line">        const cls = this</span><br><span class="line">        if(cls.state === &#x27;fail&#x27;) &#123;</span><br><span class="line">            cls.fail(cls._err)</span><br><span class="line">        &#125; else if(cls.state === &#x27;init&#x27;) &#123;</span><br><span class="line">            cls.fail = fail || cls.fail</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static race(array) &#123;</span><br><span class="line">        const cls = this</span><br><span class="line">        cls._init()</span><br><span class="line">        array.forEach((item) =&gt; &#123;</span><br><span class="line">            if(cls.state === &#x27;done&#x27; || cls.state === &#x27;fail&#x27;) &#123;</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            item().then((data) =&gt; &#123;</span><br><span class="line">                if(cls.state === &#x27;done&#x27; || cls.state === &#x27;fail&#x27;) &#123;</span><br><span class="line">                    return</span><br><span class="line">                &#125;</span><br><span class="line">                cls.state = &#x27;done&#x27;</span><br><span class="line">                cls._resule = data</span><br><span class="line">                cls.then()</span><br><span class="line">            &#125;).catch((err) =&gt; &#123;</span><br><span class="line">                if(cls.state === &#x27;done&#x27; || cls.state === &#x27;fail&#x27;) &#123;</span><br><span class="line">                    return</span><br><span class="line">                &#125;</span><br><span class="line">                cls.state = &#x27;fail&#x27;</span><br><span class="line">                cls._err = err</span><br><span class="line">                cls.catch()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        return cls</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andrew Parse 2</title>
      <link href="/2017/08/08/2018base/20170808/"/>
      <url>/2017/08/08/2018base/20170808/</url>
      
        <content type="html"><![CDATA[<p>Andrew Parse 2</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by Andrew on 2017/7/30 0030.</span><br><span class="line"> */</span><br><span class="line">const log = console.log.bind(console)</span><br><span class="line">//处理key,value,去掉&quot;&quot;</span><br><span class="line">const parsedElement = (e) =&gt; &#123;</span><br><span class="line">    if(e[0] === &#x27;\&quot;&#x27; || e[0] === &quot;\&#x27;&quot;) &#123;</span><br><span class="line">        return e.slice(1, e.length - 1)</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return Number(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//解析name: &#x27;gua&#x27;, 一个字符值的情况</span><br><span class="line">const parsedOne = (s) =&gt; &#123;</span><br><span class="line">    log(&#x27;debug parsedOne&#x27;,s)</span><br><span class="line">    const obj = &#123;&#125;</span><br><span class="line">    const arr = s.split(&#x27;,&#x27;)</span><br><span class="line">    arr.forEach(e=&gt;&#123;</span><br><span class="line">        const t = e.split(&quot;:&quot;)</span><br><span class="line">        const k = parsedElement(t[0])</span><br><span class="line">        const v = parsedElement(t[1])</span><br><span class="line">        obj[k] = v</span><br><span class="line">    &#125;)</span><br><span class="line">    return obj</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * [[[[[]]]]]]]</span><br><span class="line"> * 处理&#123;&#123;&#123;&#123;&#125;&#125;&#125;&#125;,取到最后一个&#125;</span><br><span class="line"> */</span><br><span class="line">const findElementEnd = (str, start ,isObj = true) =&gt; &#123;</span><br><span class="line">    let a = &#x27;&#x27;</span><br><span class="line">    let b= &#x27;&#x27;</span><br><span class="line">    if(isObj)&#123;</span><br><span class="line">        a = &#x27;&#123;&#x27;</span><br><span class="line">        b = &#x27;&#125;&#x27;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        a = &#x27;[&#x27;</span><br><span class="line">        b = &#x27;]&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    const stack = [a]</span><br><span class="line">    let i = start + 1</span><br><span class="line">    while(i &lt; str.length &amp;&amp; stack.length &gt; 0) &#123;</span><br><span class="line">        if(str[i] === a) &#123;</span><br><span class="line">            stack.push(a)</span><br><span class="line">        &#125;else if(str[i] === b) &#123;</span><br><span class="line">            let index = stack.length - 1</span><br><span class="line">            stack.splice(index, 1)</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            //</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    return i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dealWithArray = (s ,arr=[])=&gt;&#123;</span><br><span class="line">    //50,&quot;20&quot;,[1,[3,4],2],[55,66]</span><br><span class="line">    const index = s.indexOf(&#x27;[&#x27;)</span><br><span class="line">    log(&#x27;debug 6666----: &#x27;, s ,index)</span><br><span class="line">    if( index === -1)&#123;</span><br><span class="line">        const a = s.split(&#x27;,&#x27;).map(e =&gt;parsedElement(e))</span><br><span class="line">        arr.push.apply(arr,a)</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        //处理前面半段,不能为0</span><br><span class="line">        if(index !== 0)&#123;</span><br><span class="line">            let newStr = s.slice(0,index - 1)</span><br><span class="line">            let a = newStr.split(&#x27;,&#x27;).map(e =&gt;parsedElement(e))</span><br><span class="line">            arr.push.apply(arr,a)</span><br><span class="line">        &#125;</span><br><span class="line">        //递归(中间)</span><br><span class="line">        const last = findElementEnd(s , index , false)</span><br><span class="line">        let newS = s.slice(index + 1 ,last - 1)</span><br><span class="line">        let temp = []</span><br><span class="line">        let b = dealWithArray(newS ,[])</span><br><span class="line">        //log(&#x27;77???---&#x27;,newS, b)</span><br><span class="line">        //if(newS.indexOf(&#x27;[&#x27;) === -1 &amp;&amp; newS.indexOf(&#x27;]&#x27;) === -1)&#123;</span><br><span class="line">        //    arr.push.apply(arr,b)</span><br><span class="line">        //&#125;else &#123;</span><br><span class="line">            arr.push(b)</span><br><span class="line">       // &#125;</span><br><span class="line">        //arr.push(b)</span><br><span class="line">        //处理后面半段</span><br><span class="line">        log(&#x27;==============================&#x27;,arr)</span><br><span class="line">        log(&#x27;===============================\n&#x27;)</span><br><span class="line">        //继续递归</span><br><span class="line">        let newStr = s.slice(last + 1)</span><br><span class="line">        if(newStr.length &gt; 0)&#123;</span><br><span class="line">            log(&#x27;test------&#x27;,newStr)</span><br><span class="line">            let c = dealWithArray(newStr ,[])</span><br><span class="line">            arr.push.apply(arr ,c)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const  myParse =(s ,obj=&#123;&#125;)=&gt;&#123;</span><br><span class="line">    if(s[0] === &#x27;&#123;&#x27;)&#123;</span><br><span class="line">        s = s.slice(1, s.length - 1)</span><br><span class="line">    &#125;</span><br><span class="line">    //复杂情形</span><br><span class="line">    //  &quot;name&quot;:&quot;gua&quot;,&quot;todo&quot;:&#123;&quot;play&quot;:&quot;0/1&quot;&#125;</span><br><span class="line">    let index = s.indexOf(&#x27;:&#x27;)</span><br><span class="line">    const str = s[index + 1]</span><br><span class="line">    log(&#x27;debug digui &#x27;,s, &#x27;\n&#x27;)</span><br><span class="line">    if(str === &#x27;&#123;&#x27;)&#123;</span><br><span class="line">        log(&#x27;-----enter  object  parse-----------&#x27;)</span><br><span class="line">        let key = s.split(&#x27;:&#123;&#x27;)[0]</span><br><span class="line">        //截取s</span><br><span class="line">        key = parsedElement(key)</span><br><span class="line">        // 找到最后一个&#125;</span><br><span class="line">        const last = findElementEnd(s , index)</span><br><span class="line">        const newStr = s.slice(index +1 , last)</span><br><span class="line">        let o = &#123;&#125;</span><br><span class="line">        o = myParse(newStr , o)</span><br><span class="line">        obj[`$&#123;key&#125;`] = o</span><br><span class="line">        log(&#x27;debug newStr : &#x27;,newStr)</span><br><span class="line">        log(&#x27;debug o : &#x27;,o)</span><br><span class="line">    &#125;else if(str === &#x27;[&#x27;)&#123;</span><br><span class="line">        log(&#x27;-----enter  array  parse-----------&#x27;)</span><br><span class="line">        //&quot;age&quot;:[50,20,30]</span><br><span class="line">        let key = s.split(&#x27;:[&#x27;)[0]</span><br><span class="line">        //截取s</span><br><span class="line">        key = parsedElement(key)</span><br><span class="line">        // 找到最后一个]</span><br><span class="line">        const last = findElementEnd(s , index + 1 ,false)</span><br><span class="line">        const newStr = s.slice(index + 1 , last)</span><br><span class="line">        const r = dealWithArray(newStr)</span><br><span class="line">        log(&#x27;final:&#x27;, r[0])</span><br><span class="line">        log(&#x27;str: &#x27;, s.slice(last + 1))</span><br><span class="line">        obj[`$&#123;key&#125;`] = r[0]</span><br><span class="line">        //继续递归</span><br><span class="line">        const l = s.slice(last + 1)</span><br><span class="line">        if(l.length &gt; 0)&#123;</span><br><span class="line">            //截取不为空串就继续</span><br><span class="line">            myParse(l,obj)</span><br><span class="line">        &#125;</span><br><span class="line">        //log(&#x27;test: &#x27;,test)</span><br><span class="line">    &#125;else if (str !== &#x27;&#123;&#x27; &amp;&amp; str !== &#x27;[&#x27;)&#123;</span><br><span class="line">        log(`----enter str parse--------$&#123;s&#125; \n`)</span><br><span class="line">        //取到&quot;name&quot;:&quot;gua&quot;</span><br><span class="line">        const cell = s.split(&#x27;,&#x27;)[0]</span><br><span class="line">        log(&#x27;cell &#x27;,s,&#x27;----&#x27;, cell)</span><br><span class="line">        const o = parsedOne(cell)</span><br><span class="line">        const k = Object.keys(o)[0]</span><br><span class="line">        obj[`$&#123;k&#125;`]  = o[k]</span><br><span class="line">        //log(&#x27;obj: &#x27;,obj)</span><br><span class="line">        //下一个元素</span><br><span class="line">        index = s.indexOf(&#x27;,&#x27;)</span><br><span class="line">        if (index !== -1) &#123;</span><br><span class="line">            s = s.slice(index + 1)</span><br><span class="line">            obj = myParse(s, obj)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const testParser = () =&gt; &#123;</span><br><span class="line">    const o = &#123;</span><br><span class="line">        age: [50,&#x27;20&#x27;,[1,[3,4],[22,33],2] ,[55,66]],</span><br><span class="line">        age3: [50,[77,88]],</span><br><span class="line">        todo: &#123;</span><br><span class="line">            &#x27;play&#x27;: &#x27;0/1&#x27;,</span><br><span class="line">            &#x27;sports&#x27;: &#123;</span><br><span class="line">                &#x27;gua&#x27;:&#123;</span><br><span class="line">                    &#x27;test&#x27;:222</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    const s = JSON.stringify(o)</span><br><span class="line">    const obj = myParse(s)</span><br><span class="line">    // log(&#x27;\n\nfinal result : &#x27;)</span><br><span class="line">    log(&#x27;\nJSON.parse result:&#x27;, s)</span><br><span class="line">    log(`\nAndrew&#x27;s JSON Parse : `, obj)</span><br><span class="line">    log(`\nAndrew&#x27;s JSON Parse TODO detail: \n`, obj[&#x27;todo&#x27;])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testParser()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> base </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andrew的Json.parse解析器</title>
      <link href="/2017/07/29/2018base/20170729/"/>
      <url>/2017/07/29/2018base/20170729/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;&#x2F;令人窒息的操作</p><blockquote><p>Andrew的Json.parse解析器</p></blockquote><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by Andrew on 2017/7/30 0030.</span><br><span class="line"> */</span><br><span class="line">const log = console.log.bind(console)</span><br><span class="line">//处理key,value,去掉&quot;&quot;</span><br><span class="line">const parsedElement = (e) =&gt; &#123;</span><br><span class="line">    if (e[0] === &#x27;\&quot;&#x27; || e[0] === &quot;\&#x27;&quot;) &#123;</span><br><span class="line">        return e.slice(1, e.length - 1)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return Number(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//解析name: &#x27;gua&#x27;, 一个字符值的情况</span><br><span class="line">const parsedOne = (s) =&gt; &#123;</span><br><span class="line">    log(&#x27;debug parsedOne&#x27;, s)</span><br><span class="line">    const obj = &#123;&#125;</span><br><span class="line">    const arr = s.split(&#x27;,&#x27;)</span><br><span class="line">    arr.forEach(e =&gt; &#123;</span><br><span class="line">        const t = e.split(&quot;:&quot;)</span><br><span class="line">        const k = parsedElement(t[0])</span><br><span class="line">        const v = parsedElement(t[1])</span><br><span class="line">        obj[k] = v</span><br><span class="line">    &#125;)</span><br><span class="line">    return obj</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * [[[[[]]]]]]]</span><br><span class="line"> * 处理&#123;&#123;&#123;&#123;&#125;&#125;&#125;&#125;,取到最后一个&#125;，默认i处理object ,数组需要传false</span><br><span class="line"> */</span><br><span class="line">const findElementEnd = (str, start, isObj = true) =&gt; &#123;</span><br><span class="line">    let a = &#x27;&#x27;</span><br><span class="line">    let b = &#x27;&#x27;</span><br><span class="line">    if (isObj) &#123;</span><br><span class="line">        a = &#x27;&#123;&#x27;</span><br><span class="line">        b = &#x27;&#125;&#x27;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        a = &#x27;[&#x27;</span><br><span class="line">        b = &#x27;]&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    const stack = [a]</span><br><span class="line">    let i = start + 1</span><br><span class="line">    while (i &lt; str.length &amp;&amp; stack.length &gt; 0) &#123;</span><br><span class="line">        if (str[i] === a) &#123;</span><br><span class="line">            stack.push(a)</span><br><span class="line">        &#125; else if (str[i] === b) &#123;</span><br><span class="line">            let index = stack.length - 1</span><br><span class="line">            stack.splice(index, 1)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    return i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dealWithArray = (s, arr = []) =&gt; &#123;</span><br><span class="line">    //50,&quot;20&quot;,[1,[3,4],2],[55,66]</span><br><span class="line">    const index = s.indexOf(&#x27;[&#x27;)</span><br><span class="line">    log(&#x27;debug diguiguigi----: &#x27;, s)</span><br><span class="line">    if (index === -1) &#123;</span><br><span class="line">        const a = s.split(&#x27;,&#x27;).map(e =&gt; parsedElement(e))</span><br><span class="line">        arr.push.apply(arr, a)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //处理前面半段,不能为0</span><br><span class="line">        if (index !== 0) &#123;</span><br><span class="line">            let newStr = s.slice(0, index - 1)</span><br><span class="line">            let a = newStr.split(&#x27;,&#x27;).map(e =&gt; parsedElement(e))</span><br><span class="line">            arr.push.apply(arr, a)</span><br><span class="line">        &#125;</span><br><span class="line">        //递归(中间)</span><br><span class="line">        const last = findElementEnd(s, index, false)</span><br><span class="line">        let newS = s.slice(index + 1, last - 1)</span><br><span class="line">        let temp = []</span><br><span class="line">        let b = dealWithArray(newS, [])</span><br><span class="line">        arr.push(b)</span><br><span class="line">        //处理后面半段</span><br><span class="line">        log(&#x27;===============================\n&#x27;)</span><br><span class="line">        //继续递归</span><br><span class="line">        let newStr = s.slice(last + 1)</span><br><span class="line">        if (newStr.length &gt; 0) &#123;</span><br><span class="line">            log(&#x27;test------&#x27;, newStr)</span><br><span class="line">            let c = dealWithArray(newStr, [])</span><br><span class="line">            arr.push.apply(arr, c)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const myParse = (s, obj = &#123;&#125;) =&gt; &#123;</span><br><span class="line">    if (s[0] === &#x27;&#123;&#x27;) &#123;</span><br><span class="line">        s = s.slice(1, s.length - 1)</span><br><span class="line">    &#125;</span><br><span class="line">    //复杂情形</span><br><span class="line">    //  &quot;name&quot;:&quot;gua&quot;,&quot;todo&quot;:&#123;&quot;play&quot;:&quot;0/1&quot;&#125;</span><br><span class="line">    let index = s.indexOf(&#x27;:&#x27;)</span><br><span class="line">    const str = s[index + 1]</span><br><span class="line">    log(&#x27;debug digui &#x27;, s, &#x27;\n&#x27;)</span><br><span class="line">    if (str === &#x27;&#123;&#x27;) &#123;</span><br><span class="line">        log(&#x27;-----enter  object  parse-----------&#x27;)</span><br><span class="line">        let key = s.split(&#x27;:&#123;&#x27;)[0]</span><br><span class="line">        //截取s</span><br><span class="line">        key = parsedElement(key)</span><br><span class="line">        // 找到最后一个&#125;</span><br><span class="line">        const last = findElementEnd(s, index)</span><br><span class="line">        const newStr = s.slice(index + 2, last - 1)</span><br><span class="line">        let o = &#123;&#125;</span><br><span class="line">        o = myParse(newStr, o)</span><br><span class="line">        obj[`$&#123;key&#125;`] = o</span><br><span class="line">        log(&#x27;debug newStr : &#x27;, newStr)</span><br><span class="line">        log(&#x27;debug o : &#x27;, o)</span><br><span class="line">    &#125; else if (str !== &#x27;&#123;&#x27; &amp;&amp; str !== &#x27;[&#x27;) &#123;</span><br><span class="line">        log(`----enter str parse--------$&#123;s&#125; \n`)</span><br><span class="line">        //取到&quot;name&quot;:&quot;gua&quot;</span><br><span class="line">        const cell = s.split(&#x27;,&#x27;)[0]</span><br><span class="line">        log(&#x27;cell &#x27;, s, &#x27;----&#x27;, cell)</span><br><span class="line">        const o = parsedOne(cell)</span><br><span class="line">        const k = Object.keys(o)[0]</span><br><span class="line">        obj[`$&#123;k&#125;`] = o[k]</span><br><span class="line">        //log(&#x27;obj: &#x27;,obj)</span><br><span class="line">        //下一个元素</span><br><span class="line">        index = s.indexOf(&#x27;,&#x27;)</span><br><span class="line">        if (index !== -1) &#123;</span><br><span class="line">            s = s.slice(index + 1)</span><br><span class="line">            obj = myParse(s, obj)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (str === &#x27;[&#x27;) &#123;</span><br><span class="line">        log(&#x27;-----enter  array  parse-----------&#x27;)</span><br><span class="line">        //&quot;age&quot;:[50,20,30]</span><br><span class="line">        let key = s.split(&#x27;:[&#x27;)[0]</span><br><span class="line">        //截取s</span><br><span class="line">        key = parsedElement(key)</span><br><span class="line">        // 找到最后一个]</span><br><span class="line">        const last = findElementEnd(s, index, false)</span><br><span class="line">        const newStr = s.slice(index + 2, last - 1)</span><br><span class="line">        //</span><br><span class="line">        const r = dealWithArray(newStr)</span><br><span class="line">        log(&#x27;final:&#x27;, r)</span><br><span class="line">        //log(&#x27;debug arr: &#x27;,newStr)</span><br><span class="line">        //Todo 有bug需要考虑后续字符s.slice(last + 1)</span><br><span class="line">        obj[`$&#123;key&#125;`] = r</span><br><span class="line">    &#125;</span><br><span class="line">    return obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const testParser = () =&gt; &#123;</span><br><span class="line">    const o = &#123;</span><br><span class="line">        todo: &#123;</span><br><span class="line">            &#x27;play&#x27;: &#x27;0/1&#x27;,</span><br><span class="line">            &#x27;sports&#x27;: &#123;</span><br><span class="line">                &#x27;gua&#x27;:&#123;</span><br><span class="line">                    &#x27;test&#x27;:222</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        //name: &#x27;test&#x27;,</span><br><span class="line">        //todo:  没完成：array单独运行没问题，和obj搭配有bug,需要update</span><br><span class="line">        //age: [50,&#x27;20&#x27;,[1,[3,4],[22,33],2] ,[55,66]],</span><br><span class="line">    &#125;</span><br><span class="line">    const s = JSON.stringify(o)</span><br><span class="line">    const obj = myParse(s)</span><br><span class="line">    log(&#x27;\n\nfinal result : &#x27;)</span><br><span class="line">    log(&#x27;\nJSON.parse result:&#x27;, s)</span><br><span class="line">    log(`\nAndrew&#x27;s JSON Parse : `, obj)</span><br><span class="line">    log(`\nAndrew&#x27;s JSON Parse TODO 子类obj : `, obj[&#x27;todo&#x27;])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testParser()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> base </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同步/异步新认识</title>
      <link href="/2017/07/20/2016fe/20170720/"/>
      <url>/2017/07/20/2016fe/20170720/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;&#x2F;令人窒息的操作</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">var doExe = function (a, callback) &#123;</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">        console.log(a)</span><br><span class="line">        if (callback) &#123;</span><br><span class="line">            callback()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 100 * Math.random())</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//async</span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">  for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">    await new Promise(resolve =&gt; doExe(i, resolve));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">//不让用async</span><br><span class="line">let p = new Promise(res =&gt; doExe(0,res));</span><br><span class="line">for (let i = 1; i &lt; 10; i++) &#123;</span><br><span class="line">  p = p.then(() =&gt; new Promise(res =&gt; doExe(i, res)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//es5</span><br><span class="line">var i = 0;</span><br><span class="line">var aTest = function()&#123;</span><br><span class="line">  i &lt; 10 &amp;&amp; doExe(i++, aTest);</span><br><span class="line">&#125;</span><br><span class="line">aTest();</span><br><span class="line"></span><br><span class="line">//令人窒息的操作</span><br><span class="line">for(let t = 0; t &lt; 10; t++)&#123;</span><br><span class="line">  Math.random = () =&gt; t;</span><br><span class="line">  doExe(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less命令</title>
      <link href="/2017/07/18/2016linux/20170718/"/>
      <url>/2017/07/18/2016linux/20170718/</url>
      
        <content type="html"><![CDATA[<p>less命令 与 more命令 非常类似，但less命令 可以更加随意地浏览文件，而且 less 在查看之前不会加载整个文件。<br>相比较于more命令，很多人更喜欢使用 less命令。</p><span id="more"></span><p>一、Linux less命令语法</p><blockquote><p>less [参数] 文件<br>less命令非常强大，在此只介绍几个常用的参数，更多参数使用man less来查看Linux帮助手册。<br>-b &lt;缓冲区大小&gt; 设置缓冲区的大小<br>-e 当文件显示结束后，自动离开<br>-f 强迫打开特殊文件，例如外围设备代号、目录和二进制文件<br>-g 只标志最后搜索的关键词<br>-i 忽略搜索时的大小写<br>-m 显示类似more命令的百分比<br>-N 显示每行的行号<br>-o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来<br>-Q 不使用警告音<br>-s 显示连续空行为一行<br>-S 行过长时间将超出部分舍弃<br>-x &lt;数字&gt; 将”tab”键显示为规定的数字空格<br>&#x2F;字符串：向下搜索”字符串”的功能<br>?字符串：向上搜索”字符串”的功能<br>n：重复前一个搜索（与 &#x2F; 或 ? 有关）<br>N：反向重复前一个搜索（与 &#x2F; 或 ? 有关）<br>b 向后翻一页<br>d 向后翻半页<br>h 显示帮助界面<br>Q 退出less 命令<br>u 向前滚动半页<br>y 向前滚动一行<br>空格键 滚动一行<br>回车键 滚动一页<br>[pagedown]： 向下翻动一页<br>[pageup]： 向上翻动一页</p></blockquote><p>二、Linux less命令使用实例</p><blockquote><p>1）查看文件<br>$less linuxdaxue.com-access_log<br>120.26.216.168 - - [12&#x2F;Jun&#x2F;2016:03:09:16 +0800] “HEAD &#x2F; HTTP&#x2F;1.1” 200 -<br>42.96.189.63 - - [12&#x2F;Jun&#x2F;2016:03:09:41 +0800] “HEAD &#x2F; HTTP&#x2F;1.1” 200 -<br>123.56.138.37 - - [12&#x2F;Jun&#x2F;2016:03:12:52 +0800] “HEAD &#x2F; HTTP&#x2F;1.1” 200 -<br>120.26.216.168 - - [12&#x2F;Jun&#x2F;2016:03:14:16 +0800] “HEAD &#x2F; HTTP&#x2F;1.1” 200 -<br>42.96.189.63 - - [12&#x2F;Jun&#x2F;2016:03:14:41 +0800] “HEAD &#x2F; HTTP&#x2F;1.1” 200 -<br>linuxdaxue.com-access_log<br>2）一次查看多个文件<br>#less linuxdaxue.com-access_log linuxdaxue.com-error_log<br>120.26.216.168 - - [12&#x2F;Jun&#x2F;2016:03:09:16 +0800] “HEAD &#x2F; HTTP&#x2F;1.1” 200 -<br>42.96.189.63 - - [12&#x2F;Jun&#x2F;2016:03:09:41 +0800] “HEAD &#x2F; HTTP&#x2F;1.1” 200 -<br>123.56.138.37 - - [12&#x2F;Jun&#x2F;2016:03:12:52 +0800] “HEAD &#x2F; HTTP&#x2F;1.1” 200 -<br>120.26.216.168 - - [12&#x2F;Jun&#x2F;2016:03:14:16 +0800] “HEAD &#x2F; HTTP&#x2F;1.1” 200 -<br>42.96.189.63 - - [12&#x2F;Jun&#x2F;2016:03:14:41 +0800] “HEAD &#x2F; HTTP&#x2F;1.1” 200 -<br>123.56.138.37 - - [12&#x2F;Jun&#x2F;2016:03:17:52 +0800] “HEAD &#x2F; HTTP&#x2F;1.1” 200 -<br>linuxdaxue.com-access_log (file 1 of 2)<br>说明：<br>输入 ：n后，切换到linuxdaxue.com-error_log<br>输入 ：p 后，切换到linuxdaxue.com-access_log</p></blockquote><p>三、Linux less命令常用操作命令<br>接下来给大家介绍一些在less命令比较常用的操作命令，希望大家能够熟练掌握。<br>1）分屏导航</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctrl + F - 向前移动一屏</span><br><span class="line">ctrl + B - 向后移动一屏</span><br><span class="line">ctrl + D - 向前移动半屏</span><br><span class="line">ctrl + U - 向后移动半屏</span><br></pre></td></tr></table></figure><p>2）单行导航</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">j - 向前移动一行</span><br><span class="line">k - 向后移动一行</span><br></pre></td></tr></table></figure><p>3）其它导航</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">G - 移动到最后一行</span><br><span class="line">g - 移动到第一行</span><br></pre></td></tr></table></figure><p>4）其它命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v - 使用配置的编辑器编辑当前文件</span><br><span class="line">h - 显示 less 的帮助文档</span><br><span class="line">&amp;pattern - 仅显示匹配模式的行，而不是整个文件</span><br><span class="line">q / ZZ - 退出 less 命令</span><br></pre></td></tr></table></figure><p>5）标记导航<br>当使用 less 查看内容比较多的文件时，可以作一个标记，然后就能通过命令导航到标有特定标记的文本位置，方式如下所示：<br>ma - 使用 a 标记文本的当前位置。<br>‘a - 导航到标记 a 处<br>好了有关Linux less命令的相关内容就先为大家介绍到这里，less命令非常强大，在此只是为大家做一个简单的介绍，更熟练的掌握还需要大家的多多练习才行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb查询</title>
      <link href="/2017/07/15/2017node/20170715/"/>
      <url>/2017/07/15/2017node/20170715/</url>
      
        <content type="html"><![CDATA[<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>当查询时同时使用sort,skip,limit，无论位置先后，最先执行顺序 sort再skip再limit。</p><span id="more"></span><p>想要读取从 10 条记录后 100 条记录，相当于 sql 中limit (10,100)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;user&#x27;).find.skip(10).limit(100)</span><br></pre></td></tr></table></figure><p>以上实例在集合中跳过前面 10 条返回 100 条数据。<br>skip 和 limit 结合就能实现分页。</p><p>补充说明：<br>第一个 {} 放 where 条件，为空表示返回集合中所有文档。<br>第二个 {} 指定那些列显示和不显示 （0表示不显示 1表示显示)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br></pre></td></tr></table></figure><h2 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h2><p>|操作        |格式                       |范例                                            |RDBMS中的类似语句<br>|—-|——|—-<br>|等于        |<code>&#123;&lt;key&gt;:&lt;value&gt;&#125;</code>         |db.col.find({“by”:”guagua”}).pretty()        |where by &#x3D; ‘guagua’<br>|小于        |<code>&#123;&lt;key&gt;:&#123;$lt:&lt;value&gt;&#125;&#125;</code>   |db.col.find({“likes”:{$lt:50}}).pretty()        |where likes &lt; 50<br>|小于或等于    |<code>&#123;&lt;key&gt;:&#123;$lte:&lt;value&gt;&#125;&#125;</code>  |db.col.find({“likes”:{$lte:50}}).pretty()    |where likes &lt;&#x3D; 50<br>|大于        |<code>&#123;&lt;key&gt;:&#123;$gt:&lt;value&gt;&#125;&#125;</code>   |db.col.find({“likes”:{$gt:50}}).pretty()        |where likes &gt; 50<br>|大于或等于    |<code>&#123;&lt;key&gt;:&#123;$gte:&lt;value&gt;&#125;&#125;</code>  |db.col.find({“likes”:{$gte:50}}).pretty()    |where likes &gt;&#x3D; 50<br>|不等于        |<code>&#123;&lt;key&gt;:&#123;$ne:&lt;value&gt;&#125;&#125;</code>   |db.col.find({“likes”:{$ne:50}}).pretty()        |where likes !&#x3D; 50</p><h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;&quot;by&quot;:&quot;菜鸟教程&quot;, &quot;title&quot;:&quot;MongoDB 教程&quot;&#125;).pretty()</span><br><span class="line">以上实例中类似于 WHERE 语句：WHERE by=&#x27;菜鸟教程&#x27; AND title=&#x27;MongoDB 教程&#x27;</span><br></pre></td></tr></table></figure><h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">     &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><h3 id="AND-和-OR-联合使用"><a href="#AND-和-OR-联合使用" class="headerlink" title="AND 和 OR 联合使用"></a>AND 和 OR 联合使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以下实例演示了 AND 和 OR 联合使用，类似常规 SQL 语句为： &#x27;where likes&gt;50 AND (by = &#x27;菜鸟教程&#x27; OR title = &#x27;MongoDB 教程&#x27;)&#x27;</span><br><span class="line"></span><br><span class="line">db.col.find(&#123;&quot;likes&quot;: &#123;$gt:50&#125;, $or: [&#123;&quot;by&quot;: &quot;菜鸟教程&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB 教程&quot;&#125;]&#125;).pretty()</span><br></pre></td></tr></table></figure><h3 id="大于等于小于"><a href="#大于等于小于" class="headerlink" title="大于等于小于"></a>大于等于小于</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MongoDB 使用 (&lt;) 和 (&gt;) 查询 - $lt 和 $gt</span><br><span class="line">db.col.find(&#123;likes : &#123;$lt :200, $gt : 100&#125;&#125;)</span><br><span class="line"></span><br><span class="line">备注：</span><br><span class="line">$gt -------- greater than  &gt;</span><br><span class="line">$gte --------- gt equal  &gt;=</span><br><span class="line">$lt -------- less than  &lt;</span><br><span class="line">$lte --------- lt equal  &lt;=</span><br><span class="line">$ne ----------- not equal  !=</span><br><span class="line">$eq  --------  equal  =</span><br></pre></td></tr></table></figure><h2 id="MongoDB-排序"><a href="#MongoDB-排序" class="headerlink" title="MongoDB 排序"></a>MongoDB 排序</h2><p>sort()方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而-1是用于降序排列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">以下实例演示了 col 集合中的数据按字段 likes 的降序排列：</span><br><span class="line">db.col.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;likes&quot;:-1&#125;)</span><br></pre></td></tr></table></figure><h2 id="MongoDB中聚合-aggregate"><a href="#MongoDB中聚合-aggregate" class="headerlink" title="MongoDB中聚合(aggregate)"></a>MongoDB中聚合(aggregate)</h2><p>主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">现在我们通过以上集合计算每个作者所写的文章数，使用aggregate()计算结果如下：</span><br><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;runoob.com&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>|表达式    |描述    |实例<br>|—-|——<br>|$sum    |计算总和。    |db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}])<br>|$avg    |计算平均值    |db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}])<br>|$min    |获取集合中所有文档对应值得最小值。|db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}])<br>|$max    |获取集合中所有文档对应值得最大值。|db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}])<br>|$push    |在结果文档中插入值到一个数组中。|db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$push: “$url”}}}])<br>|$addToSet    |在结果文档中插入值到一个数组中，但不创建副本。|    db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$addToSet : “$url”}}}])<br>|$first    |根据资源文档的排序获取第一个文档数据。|    db.mycol.aggregate([{$group : {_id : “$by_user”, first_url : {$first : “$url”}}}])<br>|$last    |根据资源文档的排序获取最后一个文档数据    |db.mycol.aggregate([{$group : {_id : “$by_user”, last_url : {$last : “$url”}}}])</p><h2 id="管道-聚合框架中常用的几个操作"><a href="#管道-聚合框架中常用的几个操作" class="headerlink" title="管道-聚合框架中常用的几个操作"></a>管道-聚合框架中常用的几个操作</h2><blockquote><p>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。<br> $match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。<br> $limit：用来限制MongoDB聚合管道返回的文档数。<br> $skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。<br> $unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。<br> $group：将集合中的文档分组，可用于统计结果。<br> $sort：将输入文档排序后输出。<br> $geoNear：输出接近某一地理位置的有序文档。</p></blockquote><h3 id="project"><a href="#project" class="headerlink" title="$project"></a>$project</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这样的话结果中就只还有_id,tilte和author三个字段了，默认情况下_id字段是被包含的，填0。。1是显示，0是隐藏</span><br><span class="line"> db.getCollection(&#x27;user&#x27;).aggregate(</span><br><span class="line">     &#123; $project : &#123;</span><br><span class="line">         id : 1 ,</span><br><span class="line">         deleted : 1 ,</span><br><span class="line">     &#125;&#125;</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h3 id="match实例"><a href="#match实例" class="headerlink" title="$match实例"></a>$match实例</h3><blockquote><p>$match用于获取id&#x3D;0,username不等于guagua记录，然后将符合条件的记录送到下一阶段$group管道操作符进行处理。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;user&#x27;).aggregate( [</span><br><span class="line">                        &#123; $match : &#123; id : &#123; $eq : 0&#125; , username:&#123; $ne : &#x27;guagua&#x27; &#125; &#125; &#125;,</span><br><span class="line">                        &#123;$group : &#123;_id : &quot;$username&quot;, gua : &#123;$sum : &#x27;$updated_time&#x27;&#125;&#125;&#125;</span><br><span class="line">                       ] );</span><br></pre></td></tr></table></figure><h3 id="skip实例"><a href="#skip实例" class="headerlink" title="$skip实例"></a>$skip实例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;user&#x27;).aggregate(&#123;$skip : 2&#125;)</span><br><span class="line">经过$skip管道操作符处理后，前2个文档被&quot;过滤&quot;掉</span><br></pre></td></tr></table></figure><h2 id="在后台创建索引："><a href="#在后台创建索引：" class="headerlink" title="在后台创建索引："></a>在后台创建索引：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.values.ensureIndex(&#123;open: 1, close: 1&#125;, &#123;background: true&#125;)</span><br></pre></td></tr></table></figure><h2 id="MongoDB-自动增长"><a href="#MongoDB-自动增长" class="headerlink" title="MongoDB 自动增长"></a>MongoDB 自动增长</h2><p>创建 Javascript 函数<br><code>db.counters.insert(&#123;_id:&quot;gua&quot;,sequence_value:0&#125;)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function getNextSequenceValue(sequenceName)&#123;</span><br><span class="line">   var sequenceDocument = db.counters.findAndModify(</span><br><span class="line">      &#123;</span><br><span class="line">         query:&#123;_id: sequenceName &#125;,</span><br><span class="line">         update: &#123;$inc:&#123;sequence_value:1&#125;&#125;,</span><br><span class="line">         new:true</span><br><span class="line">      &#125;);</span><br><span class="line">   return sequenceDocument.sequence_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.counters.insert(&#123;</span><br><span class="line">   &quot;_id&quot;:getNextSequenceValue(&quot;gua&quot;),</span><br><span class="line">   &quot;product_name&quot;:&quot;Apple iPhone&quot;,</span><br><span class="line">   &#x27;test&#x27;:&#x27;guaguagua&#x27;&#125;)</span><br></pre></td></tr></table></figure><h2 id="type-操作符"><a href="#type-操作符" class="headerlink" title="$type 操作符"></a>$type 操作符</h2><table><thead><tr><th>类型</th><th>数字</th><th>备注</th></tr></thead><tbody><tr><td>Double</td><td>1</td><td></td></tr><tr><td>String</td><td>2</td><td></td></tr><tr><td>Object</td><td>3</td><td></td></tr><tr><td>Array</td><td>4</td><td></td></tr><tr><td>Binary data</td><td>5</td><td></td></tr><tr><td>Undefined</td><td>6</td><td>已废弃。</td></tr><tr><td>Object</td><td>id</td><td>7</td></tr><tr><td>Boolean</td><td>8</td><td></td></tr><tr><td>Date</td><td>9</td><td></td></tr><tr><td>Null</td><td>10</td><td></td></tr><tr><td>Regular Expression</td><td>11</td><td></td></tr><tr><td>JavaScript</td><td>13</td><td></td></tr><tr><td>Symbol</td><td>14</td><td></td></tr><tr><td>JavaScript (with scope)</td><td>15</td><td></td></tr><tr><td>32-bit integer</td><td>16</td><td></td></tr><tr><td>Timestamp</td><td>17</td><td></td></tr><tr><td>64-bit integer</td><td>18</td><td></td></tr><tr><td>Min key</td><td>255</td><td>Query with -1.</td></tr><tr><td>Max key</td><td>127</td><td></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果想获取 &quot;col&quot; 集合中 title 为 String 的数据，你可以使用以下命令：</span><br><span class="line">db.col.find(&#123;&quot;title&quot; : &#123;$type : 2&#125;&#125;)</span><br></pre></td></tr></table></figure><p>时间戳</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;counters&#x27;).find(&#123;gua:&#123;</span><br><span class="line">       $gte:new Date(2017,7,01).getTime(),</span><br><span class="line">       $lte:new Date(2017,7,18).getTime()</span><br><span class="line">    &#125;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6特性</title>
      <link href="/2017/07/11/2016fe/20170711/"/>
      <url>/2017/07/11/2016fe/20170711/</url>
      
        <content type="html"><![CDATA[<p>ES6特性如下：</p><p>1.块级作用域 关键字let, 常量const</p><p>2.对象字面量的属性赋值简写（property value shorthand）</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    // __proto__</span><br><span class="line">    __proto__: theProtoObj,</span><br><span class="line">    // Shorthand for ‘handler: handler’</span><br><span class="line">    handler,</span><br><span class="line">    // Method definitions</span><br><span class="line">    toString() &#123;</span><br><span class="line">    // Super calls</span><br><span class="line">    return &quot;d &quot; + super.toString();</span><br><span class="line">    &#125;,</span><br><span class="line">    // Computed (dynamic) property names</span><br><span class="line">    [ &#x27;prop_&#x27; + (() =&gt; 42)() ]: 42</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.赋值解构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let singer = &#123; first: &quot;Bob&quot;, last: &quot;Dylan&quot; &#125;;</span><br><span class="line">let &#123; first: f, last: l &#125; = singer; // 相当于 f = &quot;Bob&quot;, l = &quot;Dylan&quot;</span><br><span class="line">let [all, year, month, day] =  /^(\d\d\d\d)-(\d\d)-(\d\d)$/.exec(&quot;2015-10-25&quot;);</span><br><span class="line">let [x, y] = [1, 2, 3]; // x = 1, y = 2</span><br></pre></td></tr></table></figure><p>4.函数参数 - 默认值、参数打包、 数组展开（Default 、Rest 、Spread）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//Default</span><br><span class="line">function findArtist(name=&#x27;lu&#x27;, age=&#x27;26&#x27;) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">//Rest</span><br><span class="line">function f(x, ...y) &#123;</span><br><span class="line">  // y is an Array</span><br><span class="line">  return x * y.length;</span><br><span class="line">&#125;</span><br><span class="line">f(3, &quot;hello&quot;, true) == 6</span><br><span class="line"></span><br><span class="line">//Spread</span><br><span class="line">function f(x, y, z) &#123;</span><br><span class="line">  return x + y + z;</span><br><span class="line">&#125;</span><br><span class="line">// Pass each elem of array as argument</span><br><span class="line">f(...[1,2,3]) == 6</span><br></pre></td></tr></table></figure><p>5.箭头函数 Arrow functions</p><p>(1).简化了代码形式，默认return表达式结果。</p><p>(2).自动绑定语义this，即定义函数时的this。如上面例子中，forEach的匿名函数参数中用到的this。</p><p>6.字符串模板 Template strings</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var name = &quot;Bob&quot;, time = &quot;today&quot;;</span><br><span class="line">`Hello $&#123;name&#125;, how are you $&#123;time&#125;?`</span><br><span class="line">// return &quot;Hello Bob, how are you today?&quot;</span><br></pre></td></tr></table></figure><ol start="7"><li>Iterators（迭代器）+ for..of</li></ol><p>迭代器有个next方法，调用会返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(1).返回迭代对象的一个元素：&#123; done: false, value: elem &#125;</span><br><span class="line"></span><br><span class="line">(2).如果已到迭代对象的末端：&#123; done: true, value: retVal &#125;</span><br><span class="line"></span><br><span class="line">for (var n of [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]) &#123;</span><br><span class="line">  console.log(n);</span><br><span class="line">&#125;</span><br><span class="line">// 打印a、b、c</span><br></pre></td></tr></table></figure><p>8.生成器 （Generators）</p><p>9.Class</p><p>Class，有constructor、extends、super，但本质上是语法糖（对语言的功能并没有影响，但是更方便程序员使用）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Artist &#123;</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    perform() &#123;</span><br><span class="line">        return this.name + &quot; performs &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Singer extends Artist &#123;</span><br><span class="line"></span><br><span class="line">    constructor(name, song) &#123;</span><br><span class="line">        super.constructor(name);</span><br><span class="line">        this.song = song;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    perform() &#123;</span><br><span class="line">        return super.perform() + &quot;[&quot; + this.song + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let james = new Singer(&quot;Etta James&quot;, &quot;At last&quot;);</span><br><span class="line">james instanceof Artist; // true</span><br><span class="line">james instanceof Singer; // true</span><br><span class="line"></span><br><span class="line">james.perform(); // &quot;Etta James performs [At last]&quot;</span><br></pre></td></tr></table></figure><p>10.Modules</p><p>ES6的内置模块功能借鉴了CommonJS和AMD各自的优点：</p><p>(1).具有CommonJS的精简语法、唯一导出出口(single exports)和循环依赖(cyclic dependencies)的特点。</p><p>(2).类似AMD，支持异步加载和可配置的模块加载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// lib/math.js</span><br><span class="line">export function sum(x, y) &#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br><span class="line">export var pi = 3.141593;</span><br><span class="line"></span><br><span class="line">// app.js</span><br><span class="line">import * as math from &quot;lib/math&quot;;</span><br><span class="line">alert(&quot;2π = &quot; + math.sum(math.pi, math.pi));</span><br><span class="line"></span><br><span class="line">// otherApp.js</span><br><span class="line">import &#123;sum, pi&#125; from &quot;lib/math&quot;;</span><br><span class="line">alert(&quot;2π = &quot; + sum(pi, pi));</span><br><span class="line"></span><br><span class="line">Module Loaders:</span><br><span class="line">// Dynamic loading – ‘System’ is default loader</span><br><span class="line">System.import(&#x27;lib/math&#x27;).then(function(m) &#123;</span><br><span class="line">  alert(&quot;2π = &quot; + m.sum(m.pi, m.pi));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Directly manipulate module cache</span><br><span class="line">System.get(&#x27;jquery&#x27;);</span><br><span class="line">System.set(&#x27;jquery&#x27;, Module(&#123;$: $&#125;)); // WARNING: not yet finalized</span><br></pre></td></tr></table></figure><p>11.Map + Set + WeakMap + WeakSet</p><p>四种集合类型，WeakMap、WeakSet作为属性键的对象如果没有别的变量在引用它们，则会被回收释放掉。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// Sets</span><br><span class="line">var s = new Set();</span><br><span class="line">s.add(&quot;hello&quot;).add(&quot;goodbye&quot;).add(&quot;hello&quot;);</span><br><span class="line">s.size === 2;</span><br><span class="line">s.has(&quot;hello&quot;) === true;</span><br><span class="line"></span><br><span class="line">// Maps</span><br><span class="line">var m = new Map();</span><br><span class="line">m.set(&quot;hello&quot;, 42);</span><br><span class="line">m.set(s, 34);</span><br><span class="line">m.get(s) == 34;</span><br><span class="line"></span><br><span class="line">//WeakMap</span><br><span class="line">var wm = new WeakMap();</span><br><span class="line">wm.set(s, &#123; extra: 42 &#125;);</span><br><span class="line">wm.size === undefined</span><br><span class="line"></span><br><span class="line">// Weak Sets</span><br><span class="line">var ws = new WeakSet();</span><br><span class="line">ws.add(&#123; data: 42 &#125;);//Because the added object has no other references, it will not be held in the set</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>12.Math + Number + String + Array + Object APIs</p><p>一些新的API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Number.EPSILON</span><br><span class="line">Number.isInteger(Infinity) // false</span><br><span class="line">Number.isNaN(&quot;NaN&quot;) // false</span><br><span class="line"></span><br><span class="line">Math.acosh(3) // 1.762747174039086</span><br><span class="line">Math.hypot(3, 4) // 5</span><br><span class="line">Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2</span><br><span class="line"></span><br><span class="line">&quot;abcde&quot;.includes(&quot;cd&quot;) // true</span><br><span class="line">&quot;abc&quot;.repeat(3) // &quot;abcabcabc&quot;</span><br><span class="line"></span><br><span class="line">Array.from(document.querySelectorAll(&#x27;*&#x27;)) // Returns a real Array</span><br><span class="line">Array.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior</span><br><span class="line"></span><br><span class="line">[0, 0, 0].fill(7, 1) // [0,7,7]</span><br><span class="line">[1, 2, 3].find(x =&gt; x == 3) // 3</span><br><span class="line">[1, 2, 3].findIndex(x =&gt; x == 2) // 1</span><br><span class="line">[1, 2, 3, 4, 5].copyWithin(3, 0) // [1, 2, 3, 1, 2]</span><br><span class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].entries() // iterator [0, &quot;a&quot;], [1,&quot;b&quot;], [2,&quot;c&quot;]</span><br><span class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].keys() // iterator 0, 1, 2</span><br><span class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].values() // iterator &quot;a&quot;, &quot;b&quot;, &quot;c&quot;</span><br><span class="line"></span><br><span class="line">Object.assign(Point, &#123; origin: new Point(0,0) &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="13"><li>Proxies</li></ol><p>使用代理（Proxy）监听对象的操作，然后可以做一些相应事情。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var target = &#123;&#125;;</span><br><span class="line">var handler = &#123;</span><br><span class="line">  get: function (receiver, name) &#123;</span><br><span class="line">    return `Hello, $&#123;name&#125;!`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var p = new Proxy(target, handler);</span><br><span class="line">p.world === &#x27;Hello, world!&#x27;;</span><br><span class="line"></span><br><span class="line">可监听的操作： get、set、has、deleteProperty、apply、construct、getOwnPropertyDescriptor、defineProperty、getPrototypeOf、setPrototypeOf、enumerate、ownKeys、preventExtensions、isExtensible。</span><br></pre></td></tr></table></figure><p>14.Symbols</p><p>Symbol是一种基本类型。Symbol 通过调用symbol函数产生，它接收一个可选的名字参数，该函数返回的symbol是唯一的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var key = Symbol(&quot;key&quot;);</span><br><span class="line">var key2 = Symbol(&quot;key&quot;);</span><br><span class="line">key == key2  //false</span><br></pre></td></tr></table></figure><p>15.Promises</p><p>Promises是处理异步操作的对象，使用了 Promise 对象之后可以用一种链式调用的方式来组织代码，让代码更加直观（类似jQuery的deferred 对象）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function fakeAjax(url) &#123;</span><br><span class="line">  return new Promise(function (resolve, reject) &#123;</span><br><span class="line">    // setTimeouts are for effect, typically we would handle XHR</span><br><span class="line">    if (!url) &#123;</span><br><span class="line">      return setTimeout(reject, 1000);</span><br><span class="line">    &#125;</span><br><span class="line">    return setTimeout(resolve, 1000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// no url, promise rejected</span><br><span class="line">fakeAjax().then(function () &#123;</span><br><span class="line">  console.log(&#x27;success&#x27;);</span><br><span class="line">&#125;,function () &#123;</span><br><span class="line">  console.log(&#x27;fail&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BBR加速</title>
      <link href="/2017/07/10/2016linux/20170710/"/>
      <url>/2017/07/10/2016linux/20170710/</url>
      
        <content type="html"><![CDATA[<p>Debian &#x2F; Ubuntu 14.04 +</p><pre><code>CentOS用户请使用这个脚本：CentOS/Debian/Ubuntu系统 TCP-BBR 一键安装脚本本脚本只在 Debian 7 / Debian 8 / Ubuntu 14.04 / Ubuntu 16.04 (均 x64位) 这几个系统中测试过脚本可以正常运行(Vultr)！强烈推荐 Debian 7 x64，这个是我一直使用的系统，我的脚本在这个系统上面出错率最低。至于为什么不支持 CentOS 等系统，主要是我不怎么用其他的系统，就不做支持了。</code></pre><span id="more"></span><p>安装步骤<br>更换内核需要ROOT权限，所以如果你是普通用户 的话，需要ROOT账号权限，如果你是ROOT账号，那就忽略这个步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p>输入并回车后，会提示让你输入当前账号的密码，输入并回车后就可以继续下面的步骤了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://softs.pw/Bash/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; bash bbr.sh</span><br></pre></td></tr></table></figure><p>备用下载地址（上面的链接无法下载，就用这个）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; bash bbr.sh</span><br></pre></td></tr></table></figure><p>下载并运行脚本后，会自动检测并开始安装，首先会提示你输入要下载的内核版本，可以安装自定义版本的内核，也可以直接回车安装最新版本的内核（内核版本获取）！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入 要下载安装的Linux内核版本(BBR) [ 格式: x.xx.xx ，例如: 4.10.12 ]</span><br><span class="line"> [注意]内核版本列表请去这里获取：[</span><br><span class="line"> http://kernel.ubuntu.com/~kernel-ppa/mainline/ ]</span><br><span class="line">(默认回车，自动获取最新版本):4.10.10</span><br></pre></td></tr></table></figure><p>如果没有出错，内核更换完毕后，会提示是否立即重启VPS，直接回车或者输入 Y 。<br>需要重启VPS后，才能开启BBR，是否现在重启 ? [Y&#x2F;n] : y<br>[注意]  重启VPS后，请重新运行脚本开启BBR: bash bbr.sh start</p><p>[信息]  VPS 重启中…</p><p>等待十几秒，VPS启动后，重新通过SSH连接VPS，进入 bbr.sh 脚本的目录，然后执行下面这个命令开启BBR。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash bbr.sh start</span><br></pre></td></tr></table></figure><p>然后就会自动开启BBR。<br>如果重启VPS后，无法连接，说明内核安装或与系统存在兼容性问题，无法正常启动，代表你的VPS当前系统无法使用BBR，请更换其他系统！</p><p>使用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 启动BBR，更换/升级内核并重启后，需要执行这个开启BBR！</span><br><span class="line">bash bbr.sh start</span><br><span class="line"></span><br><span class="line"># 关闭BBR</span><br><span class="line">bash bbr.sh stop</span><br><span class="line"></span><br><span class="line"># 查看BBR状态</span><br><span class="line">bash bbr.sh status</span><br><span class="line"></span><br><span class="line"># 升级BBR</span><br><span class="line">bash bbr.sh</span><br><span class="line"># 因为BBR是集成于内核中的，只是内核中的一部分，所以不一定要更新最新的内核，因为内核升级不一定是BBR升级。</span><br></pre></td></tr></table></figure><p>卸载BBR</p><p>BBR集成于内核中，所以卸载BBR&#x3D;更换内核，教程：</p><p>其他说明</p><p>注意：TCP-BBR必须是 2016-12-05 21:00 更新的 4.9.0-rc8 内核及以后的版本 才能开启，而锐速并不支持这个最新的内核版本，所以TCP-BBR和锐速是不可能共存的。<br>裸SS &#x2F; 锐速+SS &#x2F; BBR+SS简单速度对比，仅供参考，看这里。</p><p>更换内核后重启服务器无法启动 的问题</p><p>如果重启VPS后，无法连接，说明内核安装有问题 或 内核与系统存在兼容性问题，无法正常启动。</p><p>这代表你的VPS当前系统不支持最新的内核版本，无法开启BBR，请更换其他系统尝试！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提示 wget: unknown host “softs.pw” 之类的错误</span><br></pre></td></tr></table></figure><p>这是无法解析我的域名，多半是DNS的问题，请更换DNS为谷歌DNS。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;nameserver 8.8.8.8&quot; &gt; /etc/resolv.conf</span><br><span class="line">echo &quot;nameserver 8.8.4.4&quot; &gt;&gt; /etc/resolv.conf</span><br><span class="line">提示 wget: command not found 的错误</span><br></pre></td></tr></table></figure><p>这是你的系统精简的太干净了，wget都没有安装，所以需要安装wget。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Debian/Ubuntu系统:</span><br><span class="line"></span><br><span class="line">apt-get install -y wget</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoose 模型定义重复引用就报错：Cannot overwrite model once compiled 怎么解决？</title>
      <link href="/2017/07/08/2017node/20170708/"/>
      <url>/2017/07/08/2017node/20170708/</url>
      
        <content type="html"><![CDATA[<p>错误提示的意思是：mongoose模型被重复定义了，这是不允许的</p><p>首先，你需要搞清楚require和module.exports的运行机制，建议你看看这篇：<a href="http://www.nodeclass.com/articles/37488">http://www.nodeclass.com/articles/37488</a></p><span id="more"></span><p>然后，针对你这个场景，不应该把 mongoose.model()模型定义方法做为模块导出的方法，因<br>为：</p><p>模型定义不允许重复，所以这个mongoose.model()应该只调用一次，而导出它执行后的结果<br>require机制确保了mongoose.model()只会执行一次</p><p>所以，你的代码应该改写成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var UserAccountSchema = mongoose.Schema(&#123;</span><br><span class="line">   //...略去定义代码</span><br><span class="line">&#125;);</span><br><span class="line">var model = mongoose.model(&#x27;user.account&#x27;, UserAccountSchema);</span><br><span class="line">//导出模型</span><br><span class="line">module.exports =model;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron打包程序</title>
      <link href="/2017/07/05/2017node/20170705/"/>
      <url>/2017/07/05/2017node/20170705/</url>
      
        <content type="html"><![CDATA[<p>目录结构<br>T:&#x2F;player&#x2F;index.html(网页入口)<br>T:&#x2F;player&#x2F;main.js<br>T:&#x2F;player&#x2F;package.json<br>&#x2F;&#x2F;成功打包的话，会player同级目录生成exe<br>T:&#x2F;outplayer&#x2F;项目名</p><span id="more"></span><h3 id="mian-js"><a href="#mian-js" class="headerlink" title="mian.js"></a>mian.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="comment">// Module to control application life.</span></span><br><span class="line"><span class="keyword">const</span> app = electron.<span class="property">app</span></span><br><span class="line"><span class="comment">// Module to create native browser window.</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BrowserWindow</span> = electron.<span class="property">BrowserWindow</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep a global reference of the window object, if you don&#x27;t, the window will</span></span><br><span class="line"><span class="comment">// be closed automatically when the JavaScript object is garbage collected.</span></span><br><span class="line"><span class="keyword">let</span> mainWindow</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Create the browser window.</span></span><br><span class="line">    mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">1200</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">800</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// and load the index.html of the app.</span></span><br><span class="line">    mainWindow.<span class="title function_">loadURL</span>(url.<span class="title function_">format</span>(&#123;</span><br><span class="line">        <span class="attr">pathname</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;index.html&#x27;</span>),</span><br><span class="line">        <span class="attr">protocol</span>: <span class="string">&#x27;file:&#x27;</span>,</span><br><span class="line">        <span class="attr">slashes</span>: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open the DevTools.我默认关闭了调试模式</span></span><br><span class="line">    <span class="comment">//mainWindow.webContents.openDevTools()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Emitted when the window is closed.</span></span><br><span class="line">    mainWindow.<span class="title function_">on</span>(<span class="string">&#x27;closed&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// Dereference the window object, usually you would store windows</span></span><br><span class="line">        <span class="comment">// in an array if your app supports multi windows, this is the time</span></span><br><span class="line">        <span class="comment">// when you should delete the corresponding element.</span></span><br><span class="line">        mainWindow = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, createWindow)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed.</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// On OS X it is common for applications and their menu bar</span></span><br><span class="line">    <span class="comment">// to stay active until the user quits explicitly with Cmd + Q</span></span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">        app.<span class="title function_">quit</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// On OS X it&#x27;s common to re-create a window in the app when the</span></span><br><span class="line">    <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">    <span class="keyword">if</span> (mainWindow === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title function_">createWindow</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// In this file you can include the rest of your app&#x27;s specific main process</span></span><br><span class="line"><span class="comment">// code. You can also put them in separate files and require them here.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;player&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a music player&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron .&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron-packager ./ andrewplayer --win32 --out ./../outplayer --electronVersion 1.4.13 --overwrite&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Andrew li&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;electron&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.6.11&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;electron-packager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.7.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;electron-prebuilt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.4.13&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="package文件的打包脚本pack说明一下："><a href="#package文件的打包脚本pack说明一下：" class="headerlink" title="package文件的打包脚本pack说明一下："></a>package文件的打包脚本pack说明一下：</h2><p>andrewplayer               –是我的程序名<br>win32                      –生成windows下的exe可执行文件,其他平台: linux, win32, darwin, mas, all<br>.&#x2F;..&#x2F;outplayer             —生成的项目所在地方，和player（当前项目）同级目录<br>–electronVersion 1.4.13   —这个是electron-prebuilt的版本</p><p>更多查 <a href="https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#platform">官网api</a></p><h2 id="开始安装，先把源切到淘宝的镜像（yarn官网那个时慢时快）"><a href="#开始安装，先把源切到淘宝的镜像（yarn官网那个时慢时快）" class="headerlink" title="开始安装，先把源切到淘宝的镜像（yarn官网那个时慢时快）"></a>开始安装，先把源切到淘宝的镜像（yarn官网那个时慢时快）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 查看下载源</span><br><span class="line"></span><br><span class="line">yarn config get registry</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 更换为淘宝源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="后面直接运行脚本即可"><a href="#后面直接运行脚本即可" class="headerlink" title="后面直接运行脚本即可"></a>后面直接运行脚本即可</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure><p>先测试下能不能用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run start</span><br></pre></td></tr></table></figure><h2 id="最后打包"><a href="#最后打包" class="headerlink" title="最后打包"></a>最后打包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run pack</span><br></pre></td></tr></table></figure><p>和player同级目录外面应该已经生成一个outplayer目录了</p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yarn更换为淘宝镜像</title>
      <link href="/2017/07/01/2017node/20170701/"/>
      <url>/2017/07/01/2017node/20170701/</url>
      
        <content type="html"><![CDATA[<blockquote><p>npm install cnpm cnpm install yarn -g</p></blockquote><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 查看下载源</span><br><span class="line"></span><br><span class="line">yarn config get registry</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 更换为淘宝源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 初始化项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init -y</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 安装webpack</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 安装webpack到dev</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack -D</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 更新到最新的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn upgrade webpack</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 安装项目里的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html 网页中的锚点(命名锚记)的使用介绍</title>
      <link href="/2017/06/26/2016fe/20170626/"/>
      <url>/2017/06/26/2016fe/20170626/</url>
      
        <content type="html"><![CDATA[<blockquote><p>锚点是网页制作中超级链接的一种，又叫命名锚记。命名锚记像一个迅速定位器一样是一种页面内的超级链接，运用相当普遍。<br>英文名：anchor<br>使用命名锚记可以在文档中设置标记，这些标记通常放在文档的特定主题处或顶部。然后可以创建到这些命名锚记的链接，这些链接可快速将访问者带到指定位置。<br>创建到命名锚记的链接的过程分为两步。首先，创建命名锚记，然后创建到该命名锚记的链接。</p></blockquote><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">代码如下:   这种方法测试不行必须加上id这个字段才可以</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#method1&quot;</span>&gt;</span>页面锚点方法一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#method2&quot;</span>&gt;</span>页面锚点方法二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;method1&quot;</span>&gt;</span>方法一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用锚标签的 href 和 name 属性<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;method2&quot;</span>&gt;</span>方法二<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用锚标签和 id 属性<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoose分页</title>
      <link href="/2017/06/25/2017node/20170625/"/>
      <url>/2017/06/25/2017node/20170625/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var mongoose = require(&#x27;mongoose&#x27;);</span><br><span class="line">mongoose.connect(&#x27;MongoDB://192.168.0.229:27017/Test&#x27;);</span><br><span class="line"></span><br><span class="line">var Cat = mongoose.model(&#x27;Cat&#x27;, &#123;</span><br><span class="line">    name: String ,</span><br><span class="line">    _id:String ,</span><br><span class="line">    age:&#123; type: Number, min: 18, max: 65 &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var query=Cat.find(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">query.where(&#123;age:30&#125;);</span><br><span class="line">query.sort(&#123; name: &#x27;asc&#x27;, age: -1 &#125;);</span><br><span class="line">//query.and(&#123;_id:&quot;123456222&quot;&#125;);</span><br><span class="line">query.or([&#123;_id:&quot;123456fff222&quot;&#125;,&#123;_id:&quot;123456222&quot;&#125;]);</span><br><span class="line">//query.limit(3); //限制条数</span><br><span class="line">//query.skip(3)   //开始数 ，通过计算可是实现分页</span><br><span class="line">//query.friends(&#x27;name&#x27;)</span><br><span class="line">query.exec(function(err,docs)&#123;</span><br><span class="line">    console.log(docs);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>开发文档地址：<a href="http://mongoosejs.com/docs/api.html#query_Query-or">http://mongoosejs.com/docs/api.html#query_Query-or</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bootstrap弹出框</title>
      <link href="/2017/06/23/2016fe/20170623/"/>
      <url>/2017/06/23/2016fe/20170623/</url>
      
        <content type="html"><![CDATA[<h1 id="bootstrap弹出框"><a href="#bootstrap弹出框" class="headerlink" title="bootstrap弹出框"></a>bootstrap弹出框</h1><p>标签（空格分隔）： bootstrap</p><hr><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 实例 - 模态框（Modal）插件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://cdn.static.runoob.com/libs/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn.static.runoob.com/libs/jquery/2.1.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn.static.runoob.com/libs/bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>创建模态框（Modal）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按钮触发模态框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#myModal&quot;</span>&gt;</span></span><br><span class="line">    开始演示模态框</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myModalLabel&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">                    <span class="symbol">&amp;times;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModalLabel&quot;</span>&gt;</span></span><br><span class="line">                    模态框（Modal）标题</span><br><span class="line">                <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;bs-example bs-example-form&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span>字段1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;测试&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span>字段2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span>字段1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;测试&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span>字段2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span>字段1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;测试&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span>字段2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>关闭</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line">                    提交更改</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoose里.save()/update()/findOneAndUpdate()的区别</title>
      <link href="/2017/06/22/2017node/20170622/"/>
      <url>/2017/06/22/2017node/20170622/</url>
      
        <content type="html"><![CDATA[<p>.save()和update()<br>update比find之后save()效率高，因为这样不用读取整个文档。<br>Mongoose的update是MongoDB的update，但是Mongoose的save可能是MongoDB的插入或是update。</p><span id="more"></span><p>关于save，mongoose会自动diff新文档，只更改更新部分。这有利于原子性。<br>update不能触发中间件，validation默认不能，但是可以修改。<br>update()和findOneAndUpdate()<br>update()返回数据处理条数<br>findOneAndUpdate()返回处理后的数据<br>简单来说，你需要获取数据就用findOneAndUpdate()，只需要修改数据而不关注修改后数据那就用update()。</p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spy-debugger</title>
      <link href="/2017/06/20/2017node/20170620/"/>
      <url>/2017/06/20/2017node/20170620/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a href="https://github.com/wuchangming/spy-debugger">https://github.com/wuchangming/spy-debugger</a><br>推荐一个移动端的调试工具，可在 pc 端操作移动端页面，可看到操作台</p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高程笔记9-新api</title>
      <link href="/2017/06/17/2017%E9%AB%98%E7%A8%8B/20170617/"/>
      <url>/2017/06/17/2017%E9%AB%98%E7%A8%8B/20170617/</url>
      
        <content type="html"><![CDATA[<p>高程笔记9</p><span id="more"></span><h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame()"></a>requestAnimationFrame()</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mozRequestAnimationFrame()方法接收一个参数，即在重绘屏幕前调用的一个函数。这个函数</span><br><span class="line">负责改变下一次重绘时的 DOM 样式。为了创建动画循环，可以像以前使用 setTimeout()一样，把多</span><br><span class="line">个对 mozRequestAnimationFrame()的调用连缀起来。比如：</span><br><span class="line">function updateProgress()&#123;</span><br><span class="line"> var div = document.getElementById(&quot;status&quot;);</span><br><span class="line"> div.style.width = (parseInt(div.style.width, 10) + 5) + &quot;%&quot;;</span><br><span class="line"> if (div.style.left != &quot;100%&quot;)&#123;</span><br><span class="line"> mozRequestAnimationFrame(updateProgress);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">mozRequestAnimationFrame(updateProgress);</span><br></pre></td></tr></table></figure><h3 id="webkitRequestAnimationFrame与msRequestAnimationFrame"><a href="#webkitRequestAnimationFrame与msRequestAnimationFrame" class="headerlink" title="webkitRequestAnimationFrame与msRequestAnimationFrame"></a>webkitRequestAnimationFrame与msRequestAnimationFrame</h3><blockquote><p>基于 mozRequestAnimationFrame()，Chrome 和 IE10+也都给出了自己的实现，分别叫 webkitRequestAnimationFrame()和<br>msRequestAnimationFrame()。这两个版本与 Mozilla 的版本有两个<br>方面的微小差异。首先，不会给回调函数传递时间码，因此你无法知道下一次重绘将发生在什么时间。<br>其次，Chrome 又增加了第二个可选的参数，即将要发生变化的 DOM 元素。知道了重绘将发生在页面中<br>哪个特定元素的区域内，就可以将重绘限定在该区域中。<br>既然没有下一次重绘的时间码，那 Chrome 和 IE 没有提供 mozAnimationStartTime 的实现也就<br>很容易理解了——没有那个时间码，实现这个属性也没有什么用。不过，Chrome 倒是又提供了另一个<br>方法 webkitCancelAnimationFrame()，用于取消之前计划执行的重绘操作。<br>假如你不需要知道精确的时间差，那么可以在 Firefox 4+、IE10+和 Chrome 中可以参考以下模式创<br>建动画循环。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line"> function draw(timestamp)&#123;</span><br><span class="line"> //计算两次重绘的时间间隔</span><br><span class="line"> var drawStart = (timestamp || Date.now()),</span><br><span class="line"> diff = drawStart - startTime;</span><br><span class="line"> //使用 diff 确定下一步的绘制时间</span><br><span class="line"> //把 startTime 重写为这一次的绘制时间</span><br><span class="line"> startTime = drawStart;</span><br><span class="line"> //重绘 UI</span><br><span class="line"> requestAnimationFrame(draw);</span><br><span class="line"> &#125;</span><br><span class="line"> var requestAnimationFrame = window.requestAnimationFrame ||</span><br><span class="line"> window.mozRequestAnimationFrame ||</span><br><span class="line"> window.webkitRequestAnimationFrame ||</span><br><span class="line"> window.msRequestAnimationFrame,</span><br><span class="line"> startTime = window.mozAnimationStartTime || Date.now();</span><br><span class="line"> requestAnimationFrame(draw);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="File-API"><a href="#File-API" class="headerlink" title="File API"></a>File API</h1><p>File API 在表单中的文件输入字段的基础上，又添加了一些直接访问文件信息的接口。HTML5 在<br>DOM 中为文件输入元素添加了一个 files 集合。在通过文件输入字段选择了一或多个文件时，files<br>集合中将包含一组 File 对象，每个 File 对象对应着一个文件。每个 File 对象都有下列只读属性。</p><blockquote><p> name：本地文件系统中的文件名。<br> size：文件的字节大小。<br> type：字符串，文件的 MIME 类型。<br> lastModifiedDate：字符串，文件上一次被修改的时间（只有 Chrome 实现了这个属性）。<br>举个例子，通过侦听 change 事件并读取 files 集合就可以知道选择的每个文件的信息：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var filesList = document.getElementById(&quot;files-list&quot;);</span><br><span class="line">EventUtil.addHandler(filesList, &quot;change&quot;, function(event)&#123;</span><br><span class="line">var files = EventUtil.getTarget(event).files,</span><br><span class="line"> i = 0,</span><br><span class="line"> len = files.length;</span><br><span class="line"> while (i &lt; len)&#123;</span><br><span class="line"> console.log(files[i].name + &quot; (&quot; + files[i].type + &quot;, &quot; + files[i].size +</span><br><span class="line"> &quot; bytes) &quot;);</span><br><span class="line"> i++;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="FileReader类型"><a href="#FileReader类型" class="headerlink" title="FileReader类型"></a>FileReader类型</h2><p>FileReader类型实现的是一种异步文件读取机制。可以把FileReader想象成XMLHttpRequest，<br>区别只是它读取的是文件系统，而不是远程服务器。为了读取文件中的数据，FileReader 提供了如下<br>几个方法。</p><blockquote><p> readAsText(file,encoding)：以纯文本形式读取文件，将读取到的文本保存在 result 属<br>性中。第二个参数用于指定编码类型，是可选的。<br> readAsDataURL(file)：读取文件并将文件以数据 URI 的形式保存在 result 属性中。<br> readAsBinaryString(file)：读取文件并将一个字符串保存在 result 属性中，字符串中的<br>每个字符表示一字节。<br> readAsArrayBuffer(file)：读取文件并将一个包含文件内容的 ArrayBuffer 保存在<br>result 属性中。<br>这些读取文件的方法为灵活地处理文件数据提供了极大便利。例如，可以读取图像文件并将其保存<br>为数据 URI，以便将其显示给用户，或者为了解析方便，可以将文件读取为文本形式。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">var filesList = document.getElementById(&quot;files-list&quot;);</span><br><span class="line">EventUtil.addHandler(filesList, &quot;change&quot;, function(event)&#123;</span><br><span class="line"> var info = &quot;&quot;,</span><br><span class="line"> output = document.getElementById(&quot;output&quot;),</span><br><span class="line"> progress = document.getElementById(&quot;progress&quot;),</span><br><span class="line"> files = EventUtil.getTarget(event).files,</span><br><span class="line"> type = &quot;default&quot;,</span><br><span class="line"> reader = new FileReader();</span><br><span class="line"> if (/image/.test(files[0].type))&#123;</span><br><span class="line"> reader.readAsDataURL(files[0]);</span><br><span class="line"> type = &quot;image&quot;;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> reader.readAsText(files[0]);</span><br><span class="line"> type = &quot;text&quot;;</span><br><span class="line"> &#125;</span><br><span class="line"> reader.onerror = function()&#123;</span><br><span class="line"> output.innerHTML = &quot;Could not read file, error code is &quot; +</span><br><span class="line"> reader.error.code;</span><br><span class="line"> &#125;;</span><br><span class="line"> reader.onprogress = function(event)&#123;</span><br><span class="line"> if (event.lengthComputable)&#123;</span><br><span class="line"> progress.innerHTML = event.loaded + &quot;/&quot; + event.total;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> reader.onload = function()&#123;</span><br><span class="line"> var html = &quot;&quot;;</span><br><span class="line"> switch(type)&#123;</span><br><span class="line"> case &quot;image&quot;:</span><br><span class="line"> html = &quot;&lt;img src=\&quot;&quot; + reader.result + &quot;\&quot;&gt;&quot;;</span><br><span class="line"> break;</span><br><span class="line"> case &quot;text&quot;:</span><br><span class="line"> html = reader.result;</span><br><span class="line"> break;</span><br><span class="line"> &#125;</span><br><span class="line"> output.innerHTML = html;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">这个例子读取了表单字段中选择的文件，并将其内容显示在了页面中。如果文件有 MIMI 类型，表</span><br><span class="line">示文件是图像，因此在 load 事件中就把它保存为数据 URI，并在页面中将这幅图像显示出来。如果文</span><br><span class="line">件不是图像，则以字符串形式读取文件内容，然后如实在页面中显示读取到的内容。这里使用了</span><br><span class="line">progress 事件来跟踪读取了多少字节的数据，而 error 事件则用于监控发生的错误。</span><br></pre></td></tr></table></figure><h2 id="读取部分内容"><a href="#读取部分内容" class="headerlink" title="读取部分内容"></a>读取部分内容</h2><p>有时候，我们只想读取文件的一部分而不是全部内容。为此，File 对象还支持一个 slice()方法，<br>这个方法在 Firefox 中的实现叫 mozSlice()，在 Chrome 中的实现叫 webkitSlice()，Safari 的 5.1 及<br>之前版本不支持这个方法。slice()方法接收两个参数：起始字节及要读取的字节数。这个方法返回一<br>个 Blob 的实例，Blob 是 File 类型的父类型。下面是一个通用的函数，可以在不同实现中使用 slice()<br>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function blobSlice(blob, startByte, length)&#123;</span><br><span class="line"> if (blob.slice)&#123;</span><br><span class="line"> return blob.slice(startByte, length);</span><br><span class="line"> &#125; else if (blob.webkitSlice)&#123;</span><br><span class="line"> return blob.webkitSlice(startByte, length);</span><br><span class="line"> &#125; else if (blob.mozSlice)&#123;</span><br><span class="line"> return blob.mozSlice(startByte, length);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> return null;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象URL"><a href="#对象URL" class="headerlink" title="对象URL"></a>对象URL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象 URL 也被称为 blob URL，指的是引用保存在 File 或 Blob 中数据的 URL。使用对象 URL 的</span><br><span class="line">好处是可以不必把文件内容读取到 JavaScript 中而直接使用文件内容。为此，只要在需要文件内容的地</span><br><span class="line">方提供对象 URL 即可。要创建对象 URL，可以使用 window.URL.createObjectURL()方法，并传入</span><br><span class="line">File 或 Blob 对象。这个方法在 Chrome 中的实现叫 window.webkitURL.createObjectURL()，因</span><br><span class="line">此可以通过如下函数来消除命名的差异：</span><br><span class="line">function createObjectURL(blob)&#123;</span><br><span class="line"> if (window.URL)&#123;</span><br><span class="line"> return window.URL.createObjectURL(blob);</span><br><span class="line"> &#125; else if (window.webkitURL)&#123;</span><br><span class="line"> return window.webkitURL.createObjectURL(blob);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> return null;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取拖放的文件"><a href="#读取拖放的文件" class="headerlink" title="读取拖放的文件"></a>读取拖放的文件</h2><p>围绕读取文件信息，结合使用 HTML5 拖放 API 和文件 API，能够创造出令人瞩目的用户界面：在页<br>面上创建了自定义的放置目标之后，你可以从桌面上把文件拖放到该目标。与拖放一张图片或者一个链接<br>类似，从桌面上把文件拖放到浏览器中也会触发 drop 事件。而且可以在 event.dataTransfer. files<br>中读取到被放置的文件，当然此时它是一个 File 对象，与通过文件输入字段取得的 File 对象一样。<br>下面这个例子会将放置到页面中自定义的放置目标中的文件信息显示出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var droptarget = document.getElementById( &quot;droptarget&quot;);</span><br><span class="line">function handleEvent(event)&#123;</span><br><span class="line"> var info = &quot;&quot;,</span><br><span class="line"> output = document.getElementById(&quot;output&quot;),</span><br><span class="line"> files, i, len;</span><br><span class="line"> EventUtil.preventDefault(event);</span><br><span class="line"> if (event.type == &quot;drop&quot;)&#123;</span><br><span class="line"> files = event.dataTransfer.files;</span><br><span class="line"> i = 0;</span><br><span class="line"> len = files.length;</span><br><span class="line"> while (i &lt; len)&#123;</span><br><span class="line"> info += files[i].name + &quot; (&quot; + files[i].type + &quot;, &quot; + files[i].size +</span><br><span class="line"> &quot; bytes)&lt;br&gt;&quot;;</span><br><span class="line"> i++;</span><br><span class="line"> &#125;</span><br><span class="line"> output.innerHTML = info;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">EventUtil.addHandler(droptarget, &quot;dragenter&quot;, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, &quot;dragover&quot;, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, &quot;drop&quot;, handleEvent);</span><br></pre></td></tr></table></figure><h2 id="使用XHR上传文件"><a href="#使用XHR上传文件" class="headerlink" title="使用XHR上传文件"></a>使用XHR上传文件</h2><p>首先，要创建一个 FormData对象，通过它调用 append()方法并传入相应的 File 对象作为参数。然后，再把 FormData 对象传递给 XHR 的 send()方法，结果与通过表单上传一模一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var droptarget = document.getElementById(&quot;droptarget&quot;);</span><br><span class="line">function handleEvent(event)&#123;</span><br><span class="line"> var info = &quot;&quot;,</span><br><span class="line"> output = document.getElementById(&quot;output&quot;),</span><br><span class="line"> data, xhr,</span><br><span class="line"> files, i, len;</span><br><span class="line"> EventUtil.preventDefault(event);</span><br><span class="line"> if (event.type == &quot;drop&quot;)&#123;</span><br><span class="line"> data = new FormData();</span><br><span class="line"> //读取拖放的文件</span><br><span class="line"> files = event.dataTransfer.files;</span><br><span class="line"> i = 0;</span><br><span class="line"> len = files.length;</span><br><span class="line"> while (i &lt; len)&#123;</span><br><span class="line"> data.append(&quot;file&quot; + i, files[i]);</span><br><span class="line"> i++;</span><br><span class="line"> &#125;</span><br><span class="line"> xhr = new XMLHttpRequest();</span><br><span class="line"> xhr.open(&quot;post&quot;, &quot;FileAPIExample06Upload.php&quot;, true);</span><br><span class="line"> xhr.onreadystatechange = function()&#123;</span><br><span class="line"> if (xhr.readyState == 4)&#123;</span><br><span class="line"> alert(xhr.responseText);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> xhr.send(data);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">EventUtil.addHandler(droptarget, &quot;dragenter&quot;, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, &quot;dragover&quot;, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, &quot;drop&quot;, handleEvent);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 高程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高程笔记8-cookie</title>
      <link href="/2017/06/16/2017%E9%AB%98%E7%A8%8B/20170616/"/>
      <url>/2017/06/16/2017%E9%AB%98%E7%A8%8B/20170616/</url>
      
        <content type="html"><![CDATA[<p>高程笔记8</p><span id="more"></span><h1 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h1><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><blockquote><p>HTTP Cookie，通常直接叫做 cookie，最初是在客户端用于存储会话信息的。该标准要求服务器对<br>任意 HTTP 请求发送 Set-Cookie HTTP 头作为响应的一部分，其中包含会话信息。例如，这种服务器响<br>应的头可能如下：<br>HTTP&#x2F;1.1 200 OK<br>Content-type: text&#x2F;html<br>Set-Cookie: name&#x3D;value<br>Other-header: other-header-value</p></blockquote><p>由于 cookie 是存在客户端计算机上的，还加入了一些限制确保 cookie 不会被恶意使用，同时不会占<br>据太多磁盘空间。每个域的 cookie 总数是有限的，不过浏览器之间各有不同。如下所示。</p><blockquote><p> IE6 以及更低版本限制每个域名最多 20 个 cookie。<br> IE7 和之后版本每个域名最多 50 个。IE7 最初是支持每个域名最大 20 个 cookie，之后被微软的<br>一个补丁所更新。<br> Firefox 限制每个域最多 50 个 cookie。<br> Opera 限制每个域最多 30 个 cookie。<br> Safari 和 Chrome 对于每个域的 cookie 数量限制没有硬性规定。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">var CookieUtil = &#123;</span><br><span class="line"> get: function (name)&#123;</span><br><span class="line"> var cookieName = encodeURIComponent(name) + &quot;=&quot;,</span><br><span class="line"> cookieStart = document.cookie.indexOf(cookieName),</span><br><span class="line"> cookieValue = null;</span><br><span class="line"> if (cookieStart &gt; -1)&#123;</span><br><span class="line"> var cookieEnd = document.cookie.indexOf(&quot;;&quot;, cookieStart);</span><br><span class="line"> if (cookieEnd == -1)&#123;</span><br><span class="line"> cookieEnd = document.cookie.length;</span><br><span class="line"> &#125;</span><br><span class="line"> cookieValue = decodeURIComponent(document.cookie.substring(cookieStart</span><br><span class="line"> + cookieName.length, cookieEnd));</span><br><span class="line"> &#125;</span><br><span class="line"> return cookieValue;</span><br><span class="line"> &#125;,</span><br><span class="line"> set: function (name, value, expires, path, domain, secure) &#123;</span><br><span class="line"> var cookieText = encodeURIComponent(name) + &quot;=&quot; +</span><br><span class="line"> encodeURIComponent(value);</span><br><span class="line"> if (expires instanceof Date) &#123;</span><br><span class="line"> cookieText += &quot;; expires=&quot; + expires.toGMTString();</span><br><span class="line"> &#125;</span><br><span class="line"> if (path) &#123;</span><br><span class="line"> cookieText += &quot;; path=&quot; + path;</span><br><span class="line"> &#125;</span><br><span class="line"> if (domain) &#123;</span><br><span class="line"> cookieText += &quot;; domain=&quot; + domain;</span><br><span class="line"> &#125;</span><br><span class="line"> if (secure) &#123;</span><br><span class="line"> cookieText += &quot;; secure&quot;;</span><br><span class="line"> &#125;</span><br><span class="line"> document.cookie = cookieText;</span><br><span class="line"> &#125;,</span><br><span class="line"> unset: function (name, path, domain, secure)&#123;</span><br><span class="line"> this.set(name, &quot;&quot;, new Date(0), path, domain, secure);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以像下面这样使用上述方法。</span><br><span class="line">//设置 cookie</span><br><span class="line">CookieUtil.set(&quot;name&quot;, &quot;Nicholas&quot;);</span><br><span class="line">CookieUtil.set(&quot;book&quot;, &quot;Professional JavaScript&quot;);</span><br><span class="line">//读取 cookie 的值</span><br><span class="line">alert(CookieUtil.get(&quot;name&quot;)); //&quot;Nicholas&quot;</span><br><span class="line">alert(CookieUtil.get(&quot;book&quot;)); //&quot;Professional JavaScript&quot;</span><br><span class="line">//删除 cookie</span><br><span class="line">CookieUtil.unset(&quot;name&quot;);</span><br><span class="line">CookieUtil.unset(&quot;book&quot;);</span><br><span class="line">//设置 cookie，包括它的路径、域、失效日期</span><br><span class="line">CookieUtil.set(&quot;name&quot;, &quot;Nicholas&quot;, &quot;/books/projs/&quot;, &quot;www.wrox.com&quot;,</span><br><span class="line"> new Date(&quot;January 1, 2010&quot;));</span><br><span class="line">//删除刚刚设置的 cookie</span><br><span class="line">CookieUtil.unset(&quot;name&quot;, &quot;/books/projs/&quot;, &quot;www.wrox.com&quot;);</span><br><span class="line">//设置安全的 cookie</span><br><span class="line">CookieUtil.set(&quot;name&quot;, &quot;Nicholas&quot;, null, null, null, true);</span><br></pre></td></tr></table></figure><h1 id="Web存储机制"><a href="#Web存储机制" class="headerlink" title="Web存储机制"></a>Web存储机制</h1><blockquote><p>Web Storage 的两个主要目标是：<br> 提供一种在 cookie 之外存储会话数据的途径；<br> 提供一种存储大量可以跨会话存在的数据的机制。<br>最初的 Web Storage 规范包含了两种对象的定义：sessionStorage 和 globalStorage。</p></blockquote><ol><li><p>Storage 类型</p><blockquote><p>Storage 类型提供最大的存储空间（因浏览器而异）来存储名值对儿。Storage 的实例与其他对<br>象类似，有如下方法。<br> clear()： 删除所有值；Firefox 中没有实现 。<br> getItem(name)：根据指定的名字 name 获取对应的值。<br> key(index)：获得 index 位置处的值的名字。<br> removeItem(name)：删除由 name 指定的名值对儿。<br> setItem(name, value)：为指定的 name 设置一个对应的值。</p></blockquote></li><li><p>sessionStorage 对象</p><blockquote><p>sessionStorage 对象存储特定于某个会话的数据，也就是该数据只保持到浏览器关闭。这个对象<br>就像会话 cookie，也会在浏览器关闭后消失。存储在 sessionStorage 中的数据可以跨越页面刷新而<br>存在，同时如果浏览器支持，浏览器崩溃并重启之后依然可用（Firefox 和 WebKit 都支持，IE 则不行）。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//使用方法存储数据</span><br><span class="line">sessionStorage.setItem(&quot;name&quot;, &quot;Nicholas&quot;);</span><br><span class="line">//使用属性存储数据</span><br><span class="line">sessionStorage.book = &quot;Professional JavaScript&quot;;</span><br><span class="line"></span><br><span class="line">//使用方法读取数据</span><br><span class="line">var name = sessionStorage.getItem(&quot;name&quot;);</span><br><span class="line">//使用属性读取数据</span><br><span class="line">var book = sessionStorage.book;</span><br><span class="line"></span><br><span class="line">使用 for-in 循环来迭代 sessionStorage 中的值：</span><br><span class="line">for (var key in sessionStorage)&#123;</span><br><span class="line"> var value = sessionStorage.getItem(key);</span><br><span class="line"> alert(key + &quot;=&quot; + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//使用 delete 删除一个值——在 WebKit 中无效</span><br><span class="line">delete sessionStorage.name;</span><br><span class="line">//使用方法删除一个值</span><br><span class="line">sessionStorage.removeItem(&quot;book&quot;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-globalStorage-对象"><a href="#3-globalStorage-对象" class="headerlink" title="3. globalStorage 对象"></a>3. globalStorage 对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//保存数据</span><br><span class="line">globalStorage[&quot;wrox.com&quot;].name = &quot;Nicholas&quot;;</span><br><span class="line">//获取数据</span><br><span class="line">var name = globalStorage[&quot;wrox.com&quot;].name;</span><br><span class="line">/*</span><br><span class="line">在这里，访问的是针对域名 wrox.com 的存储空间。globalStorage 对象不是 Storage 的实例，</span><br><span class="line">而具体的 globalStorage[&quot;wrox.com&quot;]才是。这个存储空间对于 wrox.com 及其所有子域都是可以</span><br><span class="line">访问的。可以像下面这样指定子域名。</span><br><span class="line">*/</span><br><span class="line">//保存数据</span><br><span class="line">globalStorage[&quot;www.wrox.com&quot;].name = &quot;Nicholas&quot;;</span><br><span class="line">//获取数据</span><br><span class="line">var name = globalStorage[&quot;www.wrox.com&quot;].name;</span><br></pre></td></tr></table></figure><h2 id="4-localStorage-对象"><a href="#4-localStorage-对象" class="headerlink" title="4.localStorage 对象"></a>4.localStorage 对象</h2><p>localStorage 对象在修订过的 HTML 5 规范中作为持久保存客户端数据的方案取代了<br>globalStorage。与 globalStorage 不同，不能给 localStorage 指定任何访问规则；规则事先就<br>设定好了。要访问同一个 localStorage 对象，页面必须来自同一个域名（子域名无效），使用同一种<br>协议，在同一个端口上。这相当于 globalStorage[location.host]。</p><h2 id="5-Storage限制"><a href="#5-Storage限制" class="headerlink" title="5.Storage限制"></a>5.Storage限制</h2><blockquote><p>对于 localStorage 而言，大多数桌面浏览器会设置每个来源 5MB 的限制。Chrome 和 Safari 对每<br>个来源的限制是 2.5MB。而 iOS 版 Safari 和 Android 版 WebKit 的限制也是 2.5MB。<br>对 sessionStorage 的限制也是因浏览器而异。有的浏览器对 sessionStorage 的大小没有限制，<br>但 Chrome、Safari、iOS 版 Safari 和 Android 版 WebKit 都有限制，也都是 2.5MB。IE8+和 Opera 对<br>sessionStorage 的限制是 5MB。</p></blockquote><h2 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h2><ol><li>数据库<br>IndexedDB 就是一个数据库，与 MySQL 或 Web SQL Database 等这些你以前可能用过的数据库类似。<br>IndexedDB 最大的特色是使用对象保存数据，而不是使用表来保存数据。一个 IndexedDB 数据库，就是<br>一组位于相同命名空间下的对象的集合。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var request, database;</span><br><span class="line">request = indexedDB.open(&quot;admin&quot;);</span><br><span class="line">request.onerror = function(event)&#123;</span><br><span class="line"> alert(&quot;Something bad happened while trying to open: &quot; +</span><br><span class="line"> event.target.errorCode);</span><br><span class="line">&#125;;</span><br><span class="line">request.onsuccess = function(event)&#123;</span><br><span class="line"> database = event.target.result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="最-佳-实-践-x2F-代-码-风-格"><a href="#最-佳-实-践-x2F-代-码-风-格" class="headerlink" title="最 佳 实 践 &#x2F; 代 码 风 格"></a>最 佳 实 践 &#x2F; 代 码 风 格</h1><h3 id="命名的一般规则如下所示。"><a href="#命名的一般规则如下所示。" class="headerlink" title="命名的一般规则如下所示。"></a>命名的一般规则如下所示。</h3><blockquote><p> 变量名应为名词如 car 或 person。<br> 函数名应该以动词开始，如 getName()。返回布尔类型值的函数一般以 is 开头，如<br>isEnable()。<br> 变量和函数都应使用合乎逻辑的名字，不要担心长度。长度问题可以通过后处理和压缩（本章<br>后面会讲到）来缓解。</p></blockquote><h3 id="变量类型透明"><a href="#变量类型透明" class="headerlink" title="变量类型透明"></a>变量类型透明</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//通过初始化指定变量类型</span><br><span class="line">var found = false; //布尔型</span><br><span class="line">var count = -1; //数字</span><br><span class="line">var name = &quot;&quot;; //字符串</span><br><span class="line">var person = null; //对象</span><br><span class="line"></span><br><span class="line">第二种方法是使用匈牙利标记法来指定变量类型。</span><br><span class="line">//用于指定数据类型的匈牙利标记法</span><br><span class="line">var bFound; //布尔型</span><br><span class="line">var iCount; //整数</span><br><span class="line">var sName; //字符串</span><br><span class="line">var oPerson; //对象</span><br><span class="line"></span><br><span class="line">//用于指定类型的类型注释</span><br><span class="line">var found /*:Boolean*/ = false;</span><br><span class="line">var count /*:int*/ = 10;</span><br><span class="line">var name /*:String*/ = &quot;Nicholas&quot;;</span><br><span class="line">var person /*:Object*/ = null;</span><br></pre></td></tr></table></figure><h3 id="解耦应用逻辑／事件处理程序"><a href="#解耦应用逻辑／事件处理程序" class="headerlink" title="解耦应用逻辑／事件处理程序"></a>解耦应用逻辑／事件处理程序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function validateValue(value)&#123;</span><br><span class="line"> value = 5 * parseInt(value);</span><br><span class="line"> if (value &gt; 10)&#123;</span><br><span class="line"> document.getElementById(&quot;error-msg&quot;).style.display = &quot;block&quot;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">function handleKeyPress(event)&#123;</span><br><span class="line"> event = EventUtil.getEvent(event);</span><br><span class="line"> if (event.keyCode == 13)&#123;</span><br><span class="line"> var target = EventUtil.getTarget(event);</span><br><span class="line"> validateValue(target.value);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">以下是要牢记的应用和业务逻辑之间松散耦合的几条原则：</span><br><span class="line"> 勿将 event 对象传给其他方法；只传来自 event 对象中所需的数据；</span><br><span class="line"> 任何可以在应用层面的动作都应该可以在不执行任何事件处理程序的情况下进行；</span><br><span class="line"> 任何事件处理程序都应该处理事件，然后将处理转交给应用逻辑。</span><br><span class="line">牢记这几条可以在任何代码中都获得极大的可维护性的改进，并且为进一步的测试和开发制造了很</span><br><span class="line">多可能。</span><br></pre></td></tr></table></figure><h2 id="避免全局量"><a href="#避免全局量" class="headerlink" title="避免全局量"></a>避免全局量</h2><p>与尊重对象所有权密切相关的是尽可能避免全局变量和函数。这也关系到创建一个脚本执行的一致<br>的和可维护的环境。最多创建一个全局变量，让其他对象和函数存在其中。请看以下例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//两个全局量——避免！！</span><br><span class="line">var name = &quot;Nicholas&quot;;</span><br><span class="line">function sayName()&#123;</span><br><span class="line"> alert(name);</span><br><span class="line">&#125;</span><br><span class="line">这段代码包含了两个全局量：变量 name 和函数 sayName()。其实可以创建一个包含两者的对象，</span><br><span class="line">如下例所示：</span><br><span class="line">//一个全局量——推荐</span><br><span class="line">var MyApplication = &#123;</span><br><span class="line"> name: &quot;Nicholas&quot;,</span><br><span class="line"> sayName: function()&#123;</span><br><span class="line"> alert(this.name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="避免与-null-进行比较"><a href="#避免与-null-进行比较" class="headerlink" title="避免与 null 进行比较"></a>避免与 null 进行比较</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">由于 JavaScript 不做任何自动的类型检查，所有它就成了开发人员的责任。因此，在 JavaScript 代码</span><br><span class="line">中其实很少进行类型检测。最常见的类型检测就是查看某个值是否为 null。但是，直接将值与 null</span><br><span class="line">比较是使用过度的，并且常常由于不充分的类型检查导致错误。看以下例子：</span><br><span class="line">function sortArray(values)&#123;</span><br><span class="line"> if (values != null)&#123; //避免！</span><br><span class="line"> values.sort(comparator);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">比如数组，可以改造成</span><br><span class="line">function sortArray(values)&#123;</span><br><span class="line"> if (values instanceof Array)&#123; //推荐</span><br><span class="line"> values.sort(comparator);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果看到了与 null 比较的代码，尝试使用以下技术替换：<br> 如果值应为一个引用类型，使用 instanceof 操作符检查其构造函数；<br> 如果值应为一个基本类型，使用 typeof 检查其类型；<br> 如果是希望对象包含某个特定的方法名，则使用 typeof 操作符确保指定名字的方法存在于对<br>象上。<br>代码中的 null 比较越少，就越容易确定代码的目的，并消除不必要的错误。</p></blockquote><h3 id="使用常量"><a href="#使用常量" class="headerlink" title="使用常量"></a>使用常量</h3><p>尽管 JavaScript 没有常量的正式概念，但它还是很有用的。这种将数据从应用逻辑分离出来的思想，<br>可以在不冒引入错误的风险的同时，就改变数据。请看以下例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function validate(value)&#123;</span><br><span class="line"> if (!value)&#123;</span><br><span class="line"> alert(&quot;Invalid value!&quot;);</span><br><span class="line"> location.href = &quot;/errors/invalid.php&quot;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">改成：</span><br><span class="line">var Constants = &#123;</span><br><span class="line"> INVALID_VALUE_MSG: &quot;Invalid value!&quot;,</span><br><span class="line"> INVALID_VALUE_URL: &quot;/errors/invalid.php&quot;</span><br><span class="line">&#125;;</span><br><span class="line">function validate(value)&#123;</span><br><span class="line"> if (!value)&#123;</span><br><span class="line"> alert(Constants.INVALID_VALUE_MSG);</span><br><span class="line"> location.href = Constants.INVALID_VALUE_URL;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关键在于将数据和使用它的逻辑进行分离。要注意的值的类型如下所示。<br> 重复值——任何在多处用到的值都应抽取为一个常量。这就限制了当一个值变了而另一个没变<br>的时候会造成的错误。这也包含了 CSS 类名。<br> 用户界面字符串 —— 任何用于显示给用户的字符串，都应被抽取出来以方便国际化。<br> URLs ——在 Web 应用中，资源位置很容易变更，所以推荐用一个公共地方存放所有的 URL。<br> 任意可能会更改的值 —— 每当你在用到字面量值的时候，你都要问一下自己这个值在未来是不<br>是会变化。如果答案是“是”，那么这个值就应该被提取出来作为一个常量。</p></blockquote><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>1.避免全局查找<br>可能优化脚本性能最重要的就是注意全局查找。使用全局变量和函数肯定要比局部的开销更大，因<br>为要涉及作用域链上的查找。请看以下函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function updateUI()&#123;</span><br><span class="line"> var imgs = document.getElementsByTagName(&quot;img&quot;);</span><br><span class="line"> for (var i=0, len=imgs.length; i &lt; len; i++)&#123;</span><br><span class="line"> imgs[i].title = document.title + &quot; image &quot; + i;</span><br><span class="line"> &#125;</span><br><span class="line"> var msg = document.getElementById(&quot;msg&quot;);</span><br><span class="line"> msg.innerHTML = &quot;Update complete.&quot;;</span><br><span class="line">&#125;</span><br><span class="line">该函数可能看上去完全正常，但是它包含了三个对于全局 document 对象的引用。如果在页面上有</span><br><span class="line">多个图片，那么 for 循环中的 document 引用就会被执行多次甚至上百次，每次都会要进行作用域链</span><br><span class="line">查找。通过创建一个指向 document 对象的局部变量，就可以通过限制一次全局查找来改进这个函数的</span><br><span class="line">性能：</span><br><span class="line">function updateUI()&#123;</span><br><span class="line"> var doc = document;</span><br><span class="line"> var imgs = doc.getElementsByTagName(&quot;img&quot;);</span><br><span class="line"> for (var i=0, len=imgs.length; i &lt; len; i++)&#123;</span><br><span class="line"> imgs[i].title = doc.title + &quot; image &quot; + i;</span><br><span class="line"> &#125;</span><br><span class="line"> var msg = doc.getElementById(&quot;msg&quot;);</span><br><span class="line"> msg.innerHTML = &quot;Update complete.&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-多个变量声明"><a href="#1-多个变量声明" class="headerlink" title="1. 多个变量声明"></a>1. 多个变量声明</h3><blockquote><p>有个地方很多开发人员都容易创建很多语句，那就是多个变量的声明。很容易看到代码中由多个<br>var 语句来声明多个变量，如下所示：<br>&#x2F;&#x2F;4 个语句——很浪费<br>var count &#x3D; 5;<br>var color &#x3D; “blue”;<br>var values &#x3D; [1,2,3];<br>var now &#x3D; new Date();<br>在强类型语言中，不同的数据类型的变量必须在不同的语句中声明。然而，在 JavaScript 中所有的<br>变量都可以使用单个 var 语句来声明。前面的代码可以如下重写：<br>&#x2F;&#x2F;一个语句<br>var count &#x3D; 5,<br> color &#x3D; “blue”,<br> values &#x3D; [1,2,3],<br> now &#x3D; new Date();</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 高程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高程笔记7-JSON和ajax</title>
      <link href="/2017/06/15/2017%E9%AB%98%E7%A8%8B/20170615/"/>
      <url>/2017/06/15/2017%E9%AB%98%E7%A8%8B/20170615/</url>
      
        <content type="html"><![CDATA[<p>高程笔记7</p><span id="more"></span><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote><p>JSON 的语法可以表示以下三种类型的值。<br> 简单值：使用与 JavaScript 相同的语法，可以在 JSON 中表示字符串、数值、布尔值和 null。<br>但 JSON 不支持 JavaScript 中的特殊值 undefined。<br> 对象：对象作为一种复杂数据类型，表示的是一组无序的键值对儿。而每个键值对儿中的值可<br>以是简单值，也可以是复杂数据类型的值。<br> 数组：数组也是一种复杂数据类型，表示一组有序的值的列表，可以通过数值索引来访问其中<br>的值。数组的值也可以是任意类型——简单值、对象或数组。<br>JSON 不支持变量、函数或对象实例，它就是一种表示结构化数据的格式，虽然与 JavaScript 中表示<br>数据的某些语法相同，但它并不局限于 JavaScript 的范畴。</p></blockquote><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">JSON 中的对象与 JavaScript 字面量稍微有一些不同。下面是一个 JavaScript 中的对象字面量：</span><br><span class="line">var person = &#123;</span><br><span class="line"> name: &quot;Nicholas&quot;,</span><br><span class="line"> age: 29</span><br><span class="line">&#125;;</span><br><span class="line">这虽然是开发人员在 JavaScript 中创建对象字面量的标准方式，但 JSON 中的对象要求给属性加引</span><br><span class="line">号。实际上，在 JavaScript 中，前面的对象字面量完全可以写成下面这样：</span><br><span class="line">var object = &#123;</span><br><span class="line"> &quot;name&quot;: &quot;Nicholas&quot;,</span><br><span class="line"> &quot;age&quot;: 29</span><br><span class="line">&#125;;</span><br><span class="line">JSON 表示上述对象的方式如下：</span><br><span class="line">&#123;</span><br><span class="line"> &quot;name&quot;: &quot;Nicholas&quot;,</span><br><span class="line"> &quot;age&quot;: 29</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JSON 对象有两个方法：stringify()和 parse()。在最简单的情况下，这两个方法分别用于把<br>JavaScript 对象序列化为 JSON 字符串和把 JSON 字符串解析为原生 JavaScript 值。例如：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var book = &#123;</span><br><span class="line"> title: &quot;Professional JavaScript&quot;,</span><br><span class="line"> authors: [</span><br><span class="line"> &quot;Nicholas C. Zakas&quot;</span><br><span class="line"> ],</span><br><span class="line"> edition: 3,</span><br><span class="line"> year: 2011</span><br><span class="line"> &#125;;</span><br><span class="line">var jsonText = JSON.stringify(book);</span><br><span class="line"></span><br><span class="line">实际上，JSON.stringify()除了要序列化的 JavaScript 对象外，还可以接收另外两个参数，这两</span><br><span class="line">个参数用于指定以不同的方式序列化 JavaScript 对象。第一个参数是个过滤器，可以是一个数组，也可</span><br><span class="line">以是一个函数；第二个参数是一个选项，表示是否在 JSON 字符串中保留缩进。单独或组合使用这两个</span><br><span class="line">参数，可以更全面深入地控制 JSON 的序列化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 字符串缩进</span><br><span class="line">JSON.stringify()方法的第三个参数用于控制结果中的缩进和空白符。如果这个参数是一个数</span><br><span class="line">值，那它表示的是每个级别缩进的空格数。例如，要在每个级别缩进 4 个空格，可以这样写代码：</span><br><span class="line">var book = &#123;</span><br><span class="line"> &quot;title&quot;: &quot;Professional JavaScript&quot;,</span><br><span class="line"> &quot;authors&quot;: [</span><br><span class="line"> &quot;Nicholas C. Zakas&quot;</span><br><span class="line"> ],</span><br><span class="line"> edition: 3,</span><br><span class="line"> year: 2011</span><br><span class="line"> &#125;;</span><br><span class="line">var jsonText = JSON.stringify(book, null, 4);</span><br></pre></td></tr></table></figure><h2 id="解析选项"><a href="#解析选项" class="headerlink" title="解析选项"></a>解析选项</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var book = &#123;</span><br><span class="line"> &quot;title&quot;: &quot;Professional JavaScript&quot;,</span><br><span class="line"> &quot;authors&quot;: [</span><br><span class="line"> &quot;Nicholas C. Zakas&quot;</span><br><span class="line"> ],</span><br><span class="line"> edition: 3,</span><br><span class="line"> year: 2011,</span><br><span class="line"> releaseDate: new Date(2011, 11, 1)</span><br><span class="line"> &#125;;</span><br><span class="line">var jsonText = JSON.stringify(book);</span><br><span class="line">var bookCopy = JSON.parse(jsonText, function(key, value)&#123;</span><br><span class="line"> if (key == &quot;releaseDate&quot;)&#123;</span><br><span class="line"> return new Date(value);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> return value;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">alert(bookCopy.releaseDate.getFullYear());</span><br></pre></td></tr></table></figure><h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1><p>XHR的用法</p><blockquote><p>在使用 XHR 对象时，要调用的第一个方法是 open()，它接受 3 个参数：要发送的请求的类型<br>（”get”、”post”等）、请求的 URL 和表示是否异步发送请求的布尔值。下面就是调用这个方法的例子。<br>xhr.open(“get”, “example.php”, false);<br>这行代码会启动一个针对 example.php 的 GET 请求。有关这行代码，需要说明两点：一是 URL<br>相对于执行代码的当前页面（当然也可以使用绝对路径）；二是调用 open()方法并不会真正发送请求，<br>而只是启动一个请求以备发送。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">要发送特定的请求，必须像下面这样调用 send()方法：</span><br><span class="line">xhr.open(&quot;get&quot;, &quot;example.txt&quot;, false);</span><br><span class="line">xhr.send(null);</span><br></pre></td></tr></table></figure><p>在收到响应后，响应的数据会自动填充 XHR 对象的属性，相关的属性简介如下。</p><blockquote><p> responseText：作为响应主体被返回的文本。<br> responseXML：如果响应的内容类型是”text&#x2F;xml”或”application&#x2F;xml”，这个属性中将保<br>存包含着响应数据的 XML DOM 文档。<br> status：响应的 HTTP 状态。<br> statusText：HTTP 状态的说明</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(&quot;get&quot;, &quot;example.txt&quot;, false);</span><br><span class="line">xhr.send(null);</span><br><span class="line">if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304)&#123;</span><br><span class="line"> alert(xhr.responseText);</span><br><span class="line">&#125; else &#123;</span><br><span class="line"> alert(&quot;Request was unsuccessful: &quot; + xhr.status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但多数情况下，我们还是要发送异步请求，才能让JavaScript 继续执行而不必等待响应。此时，可以检测 XHR 对象的 readyState 属性，该属性表示请求&#x2F;响应过程的当前活动阶段。这个属性可取的值如下。</p><blockquote><p> 0：未初始化。尚未调用 open()方法。<br> 1：启动。已经调用 open()方法，但尚未调用 send()方法。<br> 2：发送。已经调用 send()方法，但尚未接收到响应。<br> 3：接收。已经接收到部分响应数据。<br> 4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = function()&#123;</span><br><span class="line"> if (xhr.readyState == 4)&#123;</span><br><span class="line"> if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304)&#123;</span><br><span class="line"> alert(xhr.responseText);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> alert(&quot;Request was unsuccessful: &quot; + xhr.status);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(&quot;get&quot;, &quot;example.txt&quot;, true);</span><br><span class="line">xhr.send(null);</span><br></pre></td></tr></table></figure><h3 id="HTTP头部信息"><a href="#HTTP头部信息" class="headerlink" title="HTTP头部信息"></a>HTTP头部信息</h3><blockquote><p>默认情况下，在发送 XHR 请求的同时，还会发送下列头部信息。<br> Accept：浏览器能够处理的内容类型。<br> Accept-Charset：浏览器能够显示的字符集。<br> Accept-Encoding：浏览器能够处理的压缩编码。<br> Accept-Language：浏览器当前设置的语言。<br> Connection：浏览器与服务器之间连接的类型。<br> Cookie：当前页面设置的任何 Cookie。<br> Host：发出请求的页面所在的域 。<br> Referer：发出请求的页面的 URI。注意，HTTP 规范将这个头部字段拼写错了，而为保证与规<br>范一致，也只能将错就错了。（这个英文单词的正确拼法应该是 referrer。）<br> User-Agent：浏览器的用户代理字符串</p></blockquote><p>虽然不同浏览器实际发送的头部信息会有所不同，但以上列出的基本上是所有浏览器都会发送的。<br>使用 setRequestHeader()方法可以设置自定义的请求头部信息。这个方法接受两个参数：头部字段<br>的名称和头部字段的值。要成功发送请求头部信息，<strong>必须在调用 open()方法之后且调用 send()方法<br>之前</strong>调用 setRequestHeader()</p><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用 GET 请求经常会发生的一个错误，就是查询字符串的格式有问题。查询字符串中每个参数的名</span><br><span class="line">称和值都必须使用 encodeURIComponent()进行编码，然后才能放到 URL 的末尾；而且所有名-值对</span><br><span class="line">儿都必须由和号（&amp;）分隔，如下面的例子所示。</span><br><span class="line">xhr.open(&quot;get&quot;, &quot;example.php?name1=value1&amp;name2=value2&quot;, true);</span><br><span class="line">下面这个函数可以辅助向现有 URL 的末尾添加查询字符串参数：</span><br><span class="line">function addURLParam(url, name, value) &#123;</span><br><span class="line"> url += (url.indexOf(&quot;?&quot;) == -1 ? &quot;?&quot; : &quot;&amp;&quot;);</span><br><span class="line"> url += encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(value);</span><br><span class="line"> return url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(&quot;post&quot;, &quot;example.php&quot;, true);</span><br><span class="line">发送 POST 请求的第二步就是向 send()方法中传入某些数据。由于 XHR 最初的设计主要是为了处</span><br><span class="line">理 XML，因此可以在此传入 XML DOM 文档，传入的文档经序列化之后将作为请求主体被提交到服务</span><br><span class="line">器。当然，也可以在此传入任何想发送到服务器的字符串。</span><br></pre></td></tr></table></figure><h2 id="XMLHttpRequest-2-级"><a href="#XMLHttpRequest-2-级" class="headerlink" title="XMLHttpRequest 2 级"></a>XMLHttpRequest 2 级</h2><blockquote><p>现代 Web 应用中频繁使用的一项功能就是表单数据的序列化，XMLHttpRequest 2 级为此定义了<br>FormData 类型。FormData 为序列化表单以及创建与表单格式相同的数据（用于通过 XHR 传输）提供<br>了便利。下面的代码创建了一个 FormData 对象，并向其中添加了一些数据。<br>var data &#x3D; new FormData();<br>data.append(“name”, “Nicholas”);<br>这个 append()方法接收两个参数：键和值，分别对应表单字段的名字和字段中包含的值。可以像<br>这样添加任意多个键值对儿。而通过向 FormData 构造函数中传入表单元素，也可以用表单元素的数据<br>预先向其中填入键值对儿：<br>var data &#x3D; new FormData(document.forms[0]);</p></blockquote><h3 id="超时设定"><a href="#超时设定" class="headerlink" title="超时设定"></a>超时设定</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = function()&#123;</span><br><span class="line"> if (xhr.readyState == 4)&#123;</span><br><span class="line"> try &#123;</span><br><span class="line"> if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304)&#123;</span><br><span class="line"> alert(xhr.responseText);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> alert(&quot;Request was unsuccessful: &quot; + xhr.status);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; catch (ex)&#123;</span><br><span class="line"> //假设由 ontimeout 事件处理程序处理</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(&quot;get&quot;, &quot;timeout.php&quot;, true);</span><br><span class="line">xhr.timeout = 1000; //将超时设置为 1 秒钟（仅适用于 IE8+）</span><br><span class="line">xhr.ontimeout = function()&#123;</span><br><span class="line"> alert(&quot;Request did not return in a second.&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send(null);</span><br><span class="line"></span><br><span class="line">在写作本书时，IE 8+仍然是唯一支持超时设定的浏览器。</span><br></pre></td></tr></table></figure><h3 id="overrideMimeType-方法"><a href="#overrideMimeType-方法" class="headerlink" title="overrideMimeType()方法"></a>overrideMimeType()方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">比如，服务器返回的 MIME 类型是 text/plain，但数据中实际包含的是 XML。根据 MIME 类型，</span><br><span class="line">即使数据是 XML，responseXML 属性中仍然是 null。通过调用 overrideMimeType()方法，可以保</span><br><span class="line">证把响应当作 XML 而非纯文本来处理。</span><br><span class="line">var xhr = createXHR();</span><br><span class="line">xhr.open(&quot;get&quot;, &quot;text.php&quot;, true);</span><br><span class="line">xhr.overrideMimeType(&quot;text/xml&quot;);</span><br><span class="line">xhr.send(null);</span><br></pre></td></tr></table></figure><h3 id="progress事件"><a href="#progress事件" class="headerlink" title="progress事件"></a>progress事件</h3><blockquote><p>Mozilla 对 XHR 的另一个革新是添加了 progress 事件，这个事件会在浏览器接收新数据期间周期<br>性地触发。而 onprogress 事件处理程序会接收到一个 event 对象，其 target 属性是 XHR 对象，但<br>包含着三个额外的属性：lengthComputable、position 和 totalSize。其中，lengthComputable<br>是一个表示进度信息是否可用的布尔值，position 表示已经接收的字节数，totalSize 表示根据<br>Content-Length 响应头部确定的预期字节数。有了这些信息，我们就可以为用户创建一个进度指示器<br>了。下面展示了为用户创建进度指示器的一个示例。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var xhr = createXHR();</span><br><span class="line">xhr.onload = function(event)&#123;</span><br><span class="line"> if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) ||</span><br><span class="line"> xhr.status == 304)&#123;</span><br><span class="line"> alert(xhr.responseText);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> alert(&quot;Request was unsuccessful: &quot; + xhr.status);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.onprogress = function(event)&#123;</span><br><span class="line"> var divStatus = document.getElementById(&quot;status&quot;);</span><br><span class="line"> if (event.lengthComputable)&#123;</span><br><span class="line"> divStatus.innerHTML = &quot;Received &quot; + event.position + &quot; of &quot; +</span><br><span class="line"> event.totalSize +&quot; bytes&quot;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(&quot;get&quot;, &quot;altevents.php&quot;, true);</span><br><span class="line">xhr.send(null);</span><br></pre></td></tr></table></figure><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><blockquote><p>如果服务器认为这个请求可以接受，就在 Access-Control-Allow-Origin 头部中回发相同的源<br>信息（如果是公共资源，可以回发”*”）。例如：<br>Access-Control-Allow-Origin: <a href="http://www.nczonline.net/">http://www.nczonline.net</a><br>如果没有这个头部，或者有这个头部但源信息不匹配，浏览器就会驳回请求。正常情况下，浏览器<br>会处理请求。注意，请求和响应都不包含 cookie 信息。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Firefox 3.5+、Safari 4+、Chrome、iOS 版 Safari 和 Android 平台中的 WebKit 都通过 XMLHttpRequest</span><br><span class="line">对象实现了对 CORS 的原生支持。在尝试打开不同来源的资源时，无需额外编写代码就可以触发这个行</span><br><span class="line">为。要请求位于另一个域中的资源，使用标准的 XHR 对象并在 open()方法中传入绝对 URL 即可，例如：</span><br><span class="line">var xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = function()&#123;</span><br><span class="line"> if (xhr.readyState == 4)&#123;</span><br><span class="line"> if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304)&#123;</span><br><span class="line"> alert(xhr.responseText);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> alert(&quot;Request was unsuccessful: &quot; + xhr.status);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(&quot;get&quot;, &quot;http://www.somewhere-else.com/page/&quot;, true);</span><br><span class="line">xhr.send(null);</span><br></pre></td></tr></table></figure><h2 id="跨浏览器的CORS"><a href="#跨浏览器的CORS" class="headerlink" title="跨浏览器的CORS"></a>跨浏览器的CORS</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function createCORSRequest(method, url)&#123;</span><br><span class="line"> var xhr = new XMLHttpRequest();</span><br><span class="line"> if (&quot;withCredentials&quot; in xhr)&#123;</span><br><span class="line"> xhr.open(method, url, true);</span><br><span class="line"> &#125; else if (typeof XDomainRequest != &quot;undefined&quot;)&#123;</span><br><span class="line"> vxhr = new XDomainRequest();</span><br><span class="line"> xhr.open(method, url);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> xhr = null;</span><br><span class="line"> &#125;</span><br><span class="line"> return xhr;</span><br><span class="line">&#125;</span><br><span class="line">var request = createCORSRequest(&quot;get&quot;, &quot;http://www.somewhere-else.com/page/&quot;);</span><br><span class="line">if (request)&#123;</span><br><span class="line"> request.onload = function()&#123;</span><br><span class="line"> //对 request.responseText 进行处理</span><br><span class="line"> &#125;;</span><br><span class="line"> request.send();</span><br></pre></td></tr></table></figure><blockquote><p>Firefox、Safari 和 Chrome 中的 XMLHttpRequest 对象与 IE 中的 XDomainRequest 对象类似，都<br>提供了够用的接口，因此以上模式还是相当有用的。这两个对象共同的属性&#x2F;方法如下。<br> abort()：用于停止正在进行的请求。<br> onerror：用于替代 onreadystatechange 检测错误。<br> onload：用于替代 onreadystatechange 检测成功。<br> responseText：用于取得响应内容。<br> send()：用于发送请求。<br>以上成员都包含在 createCORSRequest()函数返回的对象中，在所有浏览器中都能正常使用。</p></blockquote><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><blockquote><p>JSONP 是 JSON with padding（填充式 JSON 或参数式 JSON）的简写，是应用 JSON 的一种新方法，<br>在后来的 Web 服务中非常流行。JSONP 看起来与 JSON 差不多，只不过是被包含在函数调用中的 JSON，<br>就像下面这样。<br>callback({ “name”: “Nicholas” });<br>JSONP 由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数。回调<br>函数的名字一般是在请求中指定的。而数据就是传入回调函数中的JSON数据。下面是一个典型的JSONP<br>请求。<br><a href="http://freegeoip.net/json/?callback=handleResponse">http://freegeoip.net/json/?callback=handleResponse</a></p></blockquote><h1 id="Web-Sockets"><a href="#Web-Sockets" class="headerlink" title="Web Sockets"></a>Web Sockets</h1><blockquote><p>要说最令人津津乐道的新浏览器 API，就得数 Web Sockets 了。Web Sockets 的目标是在一个单独的<br>持久连接上提供全双工、双向通信。在 JavaScript 中创建了 Web Socket 之后，会有一个 HTTP 请求发送<br>到浏览器以发起连接。在取得服务器响应后，建立的连接会使用 HTTP 升级从 HTTP 协议交换为 Web<br>Socket 协议。也就是说，使用标准的 HTTP 服务器无法实现 Web Sockets，只有支持这种协议的专门服<br>务器才能正常工作。<br>由于 Web Sockets 使用了自定义的协议，所以 URL 模式也略有不同。未加密的连接不再是 http:&#x2F;&#x2F;，<br>而是 ws:&#x2F;&#x2F;；加密的连接也不是 https:&#x2F;&#x2F;，而是 wss:&#x2F;&#x2F;。在使用 Web Socket URL 时，必须带着这个<br>模式，因为将来还有可能支持其他模式。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">1. Web Sockets API</span><br><span class="line">要创建 Web Socket，先实例一个 WebSocket 对象并传入要连接的 URL：</span><br><span class="line">var socket = new WebSocket(&quot;ws://www.example.com/server.php&quot;);</span><br><span class="line">注意，必须给 WebSocket 构造函数传入绝对 URL。同源策略对 Web Sockets 不适用，因此可以通</span><br><span class="line">过它打开到任何站点的连接。至于是否会与某个域中的页面通信，则完全取决于服务器。（通过握手信</span><br><span class="line">息就可以知道请求来自何方。）</span><br><span class="line"></span><br><span class="line">实例化了 WebSocket 对象后，浏览器就会马上尝试创建连接。与 XHR 类似，WebSocket 也有一</span><br><span class="line">个表示当前状态的 readyState 属性。不过，这个属性的值与 XHR 并不相同，而是如下所示。</span><br><span class="line"> WebSocket.OPENING (0)：正在建立连接。</span><br><span class="line"> WebSocket.OPEN (1)：已经建立连接。</span><br><span class="line"> WebSocket.CLOSING (2)：正在关闭连接。</span><br><span class="line"> WebSocket.CLOSE (3)：已经关闭连接。</span><br><span class="line">WebSocket 没有 readystatechange 事件；不过，它有其他事件，对应着不同的状态。readyState</span><br><span class="line">的值永远从 0 开始。</span><br><span class="line">要关闭 Web Socket 连接，可以在任何时候调用 close()方法。</span><br><span class="line">socket.close();</span><br><span class="line">调用了 close()之后，readyState 的值立即变为 2（正在关闭），而在关闭连接后就会变成 3。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 发送和接收数据</span><br><span class="line">因为 Web Sockets 只能通过连接发送纯文本数据，所以对于复杂的数据结构，在通过连接发送之前，</span><br><span class="line">必须进行序列化。下面的例子展示了先将数据序列化为一个 JSON 字符串，然后再发送到服务器：</span><br><span class="line">var message = &#123;</span><br><span class="line"> time: new Date(),</span><br><span class="line"> text: &quot;Hello world!&quot;,</span><br><span class="line"> clientId: &quot;asdfp8734rew&quot;</span><br><span class="line">&#125;;</span><br><span class="line">socket.send(JSON.stringify(message));</span><br><span class="line">接下来，服务器要读取其中的数据，就要解析接收到的 JSON 字符串。</span><br><span class="line">当服务器向客户端发来消息时，WebSocket 对象就会触发 message 事件。这个 message 事件与</span><br><span class="line">其他传递消息的协议类似，也是把返回的数据保存在 event.data 属性中。</span><br><span class="line">socket.onmessage = function(event)&#123;</span><br><span class="line"> var data = event.data;</span><br><span class="line"> //处理数据</span><br><span class="line">&#125;;</span><br><span class="line">与通过 send()发送到服务器的数据一样，event.data 中返回的数据也是字符串。如果你想得到</span><br><span class="line">其他格式的数据，必须手工解析这些数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.其他事件</span><br><span class="line">WebSocket 对象还有其他三个事件，在连接生命周期的不同阶段触发。</span><br><span class="line"> open：在成功建立连接时触发。</span><br><span class="line"> error：在发生错误时触发，连接不能持续。</span><br><span class="line"> close：在连接关闭时触发</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>Ajax 是无需刷新页面就能够从服务器取得数据的一种方法。关于 Ajax，可以从以下几方面来总结<br>一下。<br> 负责 Ajax 运作的核心对象是 XMLHttpRequest（XHR）对象。<br> XHR 对象由微软最早在 IE5 中引入，用于通过 JavaScript 从服务器取得 XML 数据。<br> 在此之后，Firefox、Safari、Chrome 和 Opera 都实现了相同的特性，使 XHR 成为了 Web 的一个<br>事实标准。<br> 虽然实现之间存在差异，但 XHR 对象的基本用法在不同浏览器间还是相对规范的，因此可以放<br>心地用在 Web 开发当中。<br>同源策略是对 XHR 的一个主要约束，它为通信设置了“相同的域、相同的端口、相同的协议”这一<br>限制。试图访问上述限制之外的资源，都会引发安全错误，除非采用被认可的跨域解决方案。这个解决<br>方案叫做 CORS（Cross-Origin Resource Sharing，跨源资源共享），IE8 通过 XDomainRequest 对象支持<br>CORS，其他浏览器通过 XHR 对象原生支持 CORS。图像 Ping 和 JSONP 是另外两种跨域通信的技术，<br>但不如 CORS 稳妥。<br>Comet 是对 Ajax 的进一步扩展，让服务器几乎能够实时地向客户端推送数据。实现 Comet 的手段<br>主要有两个：长轮询和 HTTP 流。所有浏览器都支持长轮询，而只有部分浏览器原生支持 HTTP 流。SSE<br>（Server-Sent Events，服务器发送事件）是一种实现 Comet 交互的浏览器 API，既支持长轮询，也支持<br>HTTP 流。<br>Web Sockets 是一种与服务器进行全双工、双向通信的信道。与其他方案不同，Web Sockets 不使用<br>HTTP 协议，而使用一种自定义的协议。这种协议专门为快速传输小数据设计。虽然要求使用不同的<br>Web 服务器，但却具有速度上的优势。<br>各方面对 Ajax 和 Comet 的鼓吹吸引了越来越多的开发人员学习 JavaScript，人们对 Web 开发的关注<br>也再度升温。与 Ajax 有关的概念都还相对比较新，这些概念会随着时间推移继续发展。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 高程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高程笔记6-表单知识</title>
      <link href="/2017/06/14/2017%E9%AB%98%E7%A8%8B/20170614/"/>
      <url>/2017/06/14/2017%E9%AB%98%E7%A8%8B/20170614/</url>
      
        <content type="html"><![CDATA[<p>高程笔记6</p><span id="more"></span><h2 id="表单的基础知识"><a href="#表单的基础知识" class="headerlink" title="表单的基础知识"></a>表单的基础知识</h2><p>在 HTML 中，表单是由<form>元素来表示的，而在 JavaScript 中，表单对应的则是 HTMLFormElement<br>类型。HTMLFormElement 继承了 HTMLElement，因而与其他 HTML 元素具有相同的默认属<br>性。不过，HTMLFormElement 也有它自己下列独有的属性和方法。</p><blockquote><p> acceptCharset：服务器能够处理的字符集；等价于 HTML 中的 accept-charset 特性。<br> action：接受请求的 URL；等价于 HTML 中的 action 特性。<br> elements：表单中所有控件的集合（HTMLCollection）。<br> enctype：请求的编码类型；等价于 HTML 中的 enctype 特性。<br> length：表单中控件的数量。<br> method：要发送的 HTTP 请求类型，通常是”get”或”post”；等价于 HTML 的 method 特性。<br> name：表单的名称；等价于 HTML 的 name 特性。<br> reset()：将所有表单域重置为默认值。<br> submit()：提交表单。<br> target：用于发送请求和接收响应的窗口名称；等价于 HTML 的 target 特性</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">提交表单</span><br><span class="line">&lt;!-- 通用提交按钮 --&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;Submit Form&quot;&gt;</span><br><span class="line">&lt;!-- 自定义提交按钮 --&gt;</span><br><span class="line">&lt;button type=&quot;submit&quot;&gt;Submit Form&lt;/button&gt;</span><br><span class="line">&lt;!-- 图像按钮 --&gt;</span><br><span class="line">&lt;input type=&quot;image&quot; src=&quot;graphic.gif&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 通用重置按钮 --&gt;</span><br><span class="line">&lt;input type=&quot;reset&quot; value=&quot;Reset Form&quot;&gt;</span><br><span class="line">&lt;!-- 自定义重置按钮 --&gt;</span><br><span class="line">&lt;button type=&quot;reset&quot;&gt;Reset Form&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>表单共有的表单字段属性除了<fieldset>元素之外，所有表单字段都拥有相同的一组属性。由于<input>类型可以表示多种表单字段，因此有些属性只适用于某些字段，但还有一些属性是所有字段所共有的。表单字段共有的属性如下。</p><blockquote><p> disabled：布尔值，表示当前字段是否被禁用。<br> form：指向当前字段所属表单的指针；只读。<br> name：当前字段的名称。<br> readOnly：布尔值，表示当前字段是否只读。<br> tabIndex：表示当前字段的切换（tab）序号。<br> type：当前字段的类型，如”checkbox”、”radio”，等等。<br> value：当前字段将被提交给服务器的值。对文件字段来说，这个属性是只读的，包含着文件<br>在计算机中的路径。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//避免多次提交表单</span><br><span class="line">EventUtil.addHandler(form, &quot;submit&quot;, function(event)&#123;</span><br><span class="line"> event = EventUtil.getEvent(event);</span><br><span class="line"> var target = EventUtil.getTarget(event);</span><br><span class="line"> //取得提交按钮</span><br><span class="line"> var btn = target.elements[&quot;submit-btn&quot;];</span><br><span class="line"> //禁用它</span><br><span class="line"> btn.disabled = true;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>除了<fieldset>之外，所有表单字段都有 type 属性。对于<input>元素，这个值等于 HTML 特<br>性 type 的值。对于其他元素，这个 type 属性的值如下表所列.此外，<input>和<button>元素的 type 属性是可以动态修改的，而<select>元素的 type 属性则是只读的。</p></blockquote><h3 id="2-共有的表单字段方法"><a href="#2-共有的表单字段方法" class="headerlink" title="2. 共有的表单字段方法"></a>2. 共有的表单字段方法</h3><p>每个表单字段都有两个方法：focus()和 blur()。其中，focus()方法用于将浏览器的焦点设置<br>到表单字段，即激活表单字段，使其可以响应键盘事件</p><h3 id="3-共有的表单字段事件"><a href="#3-共有的表单字段事件" class="headerlink" title="3. 共有的表单字段事件"></a>3. 共有的表单字段事件</h3><p>除了支持鼠标、键盘、更改和 HTML 事件之外，所有表单字段都支持下列 3 个事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> blur：当前字段失去焦点时触发。</span><br><span class="line"> change：对于&lt;input&gt;和&lt;textarea&gt;元素，在它们失去焦点且 value 值改变时触发；对于</span><br><span class="line">&lt;select&gt;元素，在其选项改变时触发</span><br><span class="line"> focus：当前字段获得焦点时触发。</span><br></pre></td></tr></table></figure><h2 id="文本框脚本"><a href="#文本框脚本" class="headerlink" title="文本框脚本"></a>文本框脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt;元素则始终会呈现为一个多行文本框。要指定文本框的大小，可以使用 rows</span><br><span class="line">和 cols 特性。其中，rows 特性指定的是文本框的字符行数，而 cols 特性指定的是文本框的字符列数</span><br><span class="line">（类似于&lt;inpu&gt;元素的 size 特性）。与&lt;input&gt;元素不同，&lt;textarea&gt;的初始值必须要放在</span><br><span class="line">&lt;textarea&gt;和&lt;/textarea&gt;之间，如下面的例子所示。</span><br><span class="line">&lt;textarea rows=&quot;25&quot; cols=&quot;5&quot;&gt;initial value&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">注意： 在处理文本框的值时，最好不要使用 DOM 方法。</span><br></pre></td></tr></table></figure><h3 id="过滤输入"><a href="#过滤输入" class="headerlink" title="过滤输入"></a>过滤输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例如，下列代码只允许用户输入数值。</span><br><span class="line">EventUtil.addHandler(textbox, &quot;keypress&quot;, function(event)&#123;</span><br><span class="line"> event = EventUtil.getEvent(event);</span><br><span class="line"> var target = EventUtil.getTarget(event);</span><br><span class="line"> var charCode = EventUtil.getCharCode(event);</span><br><span class="line"> if (!/\d/.test(String.fromCharCode(charCode)))&#123;</span><br><span class="line"> EventUtil.preventDefault(event);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="自动切换焦点"><a href="#自动切换焦点" class="headerlink" title="自动切换焦点"></a>自动切换焦点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; name=&quot;tel1&quot; id=&quot;txtTel1&quot; maxlength=&quot;3&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;tel2&quot; id=&quot;txtTel2&quot; maxlength=&quot;3&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;tel3&quot; id=&quot;txtTel3&quot; maxlength=&quot;4&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(function()&#123;</span><br><span class="line"> function tabForward(event)&#123;</span><br><span class="line"> event = EventUtil.getEvent(event);</span><br><span class="line"> var target = EventUtil.getTarget(event);</span><br><span class="line"> if (target.value.length == target.maxLength)&#123;</span><br><span class="line"> var form = target.form;</span><br><span class="line"> for (var i=0, len=form.elements.length; i &lt; len; i++) &#123;</span><br><span class="line"> if (form.elements[i] == target) &#123;</span><br><span class="line"> if (form.elements[i+1])&#123;</span><br><span class="line"> form.elements[i+1].focus();</span><br><span class="line"> &#125;</span><br><span class="line"> return;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> var textbox1 = document.getElementById(&quot;txtTel1&quot;);</span><br><span class="line"> var textbox2 = document.getElementById(&quot;txtTel2&quot;);</span><br><span class="line"> var textbox3 = document.getElementById(&quot;txtTel3&quot;);</span><br><span class="line"> EventUtil.addHandler(textbox1, &quot;keyup&quot;, tabForward);</span><br><span class="line"> EventUtil.addHandler(textbox2, &quot;keyup&quot;, tabForward);</span><br><span class="line"> EventUtil.addHandler(textbox3, &quot;keyup&quot;, tabForward);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="HTML5-约束验证API"><a href="#HTML5-约束验证API" class="headerlink" title="HTML5 约束验证API"></a>HTML5 约束验证API</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1. 必填字段</span><br><span class="line">第一种情况是在表单字段中指定了 required 属性，如下面的例子所示：</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;username&quot; required&gt;</span><br><span class="line"></span><br><span class="line">2. 其他输入类型</span><br><span class="line">HTML5 为&lt;input&gt;元素的 type 属性又增加了几个值。这些新的类型不仅能反映数据类型的信息，</span><br><span class="line">而且还能提供一些默认的验证功能。其中，&quot;email&quot;和&quot;url&quot;是两个得到支持最多的类型，各浏览器也</span><br><span class="line">都为它们增加了定制的验证机制。例如：</span><br><span class="line">&lt;input type=&quot;email&quot; name =&quot;email&quot;&gt;</span><br><span class="line">&lt;input type=&quot;url&quot; name=&quot;homepage&quot;&gt;</span><br><span class="line"></span><br><span class="line">3. 数值范围</span><br><span class="line">除了&quot;email&quot;和&quot;url&quot;，HTML5还定义了另外几个输入元素。这几个元素都要求填写某种基于数字的值：&quot;number&quot;、&quot;range&quot;、&quot;datetime&quot;、&quot;datetime-local&quot;、&quot;date&quot;、&quot;month&quot;、&quot;week&quot;，还有&quot;time&quot;。浏览器对这几个类型的支持情况并不好，</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对所有这些数值类型的输入元素，可以指定 min 属性（最小的可能值）、max 属性（最大的可能值）</span><br><span class="line">和 step 属性（从 min 到 max 的两个刻度间的差值）。例如，想让用户只能输入 0 到 100 的值，而且这</span><br><span class="line">个值必须是 5 的倍数，可以这样写代码：</span><br><span class="line">&lt;input type=&quot;number&quot; min=&quot;0&quot; max=&quot;100&quot; step=&quot;5&quot; name=&quot;count&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 输入模式</span><br><span class="line">HTML5 为文本字段新增了 pattern 属性。这个属性的值是一个正则表达式，用于匹配文本框中的</span><br><span class="line">值。例如，如果只想允许在文本字段中输入数值，可以像下面的代码一样应用约束：</span><br><span class="line">&lt;input type=&quot;text&quot; pattern=&quot;\d+&quot; name=&quot;count&quot;&gt;</span><br><span class="line"></span><br><span class="line">5. 检测有效性</span><br><span class="line">使用 checkValidity()方法可以检测表单中的某个字段是否有效。所有表单字段都有个方法，如</span><br><span class="line">果字段的值有效，这个方法返回 true，否则返回 false。字段的值是否有效的判断依据是本节前面介</span><br><span class="line">绍过的那些约束。</span><br><span class="line"></span><br><span class="line">6. 禁用验证</span><br><span class="line">通过设置 novalidate 属性，可以告诉表单不进行验证。</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;signup.php&quot; novalidate&gt;</span><br><span class="line"> &lt;!--这里插入表单元素--&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="选择框脚本"><a href="#选择框脚本" class="headerlink" title="选择框脚本"></a>选择框脚本</h2><p>选择框是通过<select>和<option>元素创建的。为了方便与这个控件交互，除了所有表单字段共<br>有的属性和方法外，HTMLSelectElement 类型还提供了下列属性和方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> add(newOption, relOption)：向控件中插入新&lt;option&gt;元素，其位置在相关项（relOption）</span><br><span class="line">之前。</span><br><span class="line"> multiple：布尔值，表示是否允许多项选择；等价于 HTML 中的 multiple 特性。</span><br><span class="line"> options：控件中所有&lt;option&gt;元素的 HTMLCollection。</span><br><span class="line"> remove(index)：移除给定位置的选项。</span><br><span class="line"> selectedIndex：基于 0 的选中项的索引，如果没有选中项，则值为-1。对于支持多选的控件，</span><br><span class="line">只保存选中项中第一项的索引。</span><br><span class="line"> size：选择框中可见的行数；等价于 HTML 中的 size 特性。</span><br><span class="line">选择框的 type 属性不是&quot;select-one&quot;，就是&quot;select-multiple&quot;，这取决于 HTML 代码中有</span><br><span class="line">没有 multiple 特性。选择框的 value 属性由当前选中项决定，相应规则如下。</span><br><span class="line"> 如果没有选中的项，则选择框的 value 属性保存空字符串。</span><br><span class="line"> 如果有一个选中项，而且该项的 value 特性已经在 HTML 中指定，则选择框的 value 属性等</span><br><span class="line">于选中项的 value 特性。即使 value 特性的值是空字符串，也同样遵循此条规则。</span><br><span class="line"> 如果有一个选中项，但该项的 value 特性在 HTML 中未指定，则选择框的 value 属性等于该</span><br><span class="line">项的文本。</span><br><span class="line"> 如果有多个选中项，则选择框的 value 属性将依据前两条规则取得第一个选中项的值。</span><br><span class="line">以下面的选择框为例：</span><br><span class="line"></span><br><span class="line">&lt;select name=&quot;location&quot; id=&quot;selLocation&quot;&gt;</span><br><span class="line"> &lt;option value=&quot;Sunnyvale, CA&quot;&gt;Sunnyvale&lt;/option&gt;</span><br><span class="line"> &lt;option value=&quot;Los Angeles, CA&quot;&gt;Los Angeles&lt;/option&gt;</span><br><span class="line"> &lt;option value=&quot;Mountain View, CA&quot;&gt;Mountain View&lt;/option&gt;</span><br><span class="line"> &lt;option value=&quot;&quot;&gt;China&lt;/option&gt;</span><br><span class="line"> &lt;option&gt;Australia&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在 DOM 中，每个<code>&lt;option&gt;</code>元素都有一个 HTMLOptionElement 对象表示。为便于访问数据，<br>HTMLOptionElement 对象添加了下列属性：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> index：当前选项在 options 集合中的索引。</span><br><span class="line"> label：当前选项的标签；等价于 HTML 中的 label 特性。</span><br><span class="line"> selected：布尔值，表示当前选项是否被选中。将这个属性设置为 true 可以选中当前选项。</span><br><span class="line"> text：选项的文本。</span><br><span class="line"> value：选项的值（等价于 HTML 中的 value 特性）</span><br><span class="line"></span><br><span class="line">//推荐</span><br><span class="line">var text = selectbox.options[0].text; //选项的文本</span><br><span class="line">var value = selectbox.options[0].value; //选项的值</span><br></pre></td></tr></table></figure><p>移动和重排选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var selectbox1 = document.getElementById(&quot;selLocations1&quot;);</span><br><span class="line">var selectbox2 = document.getElementById(&quot;selLocations2&quot;);</span><br><span class="line">selectbox2.appendChild(selectbox1.options[0]);</span><br></pre></td></tr></table></figure><h3 id="表单序列化"><a href="#表单序列化" class="headerlink" title="表单序列化"></a>表单序列化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">function serialize(form)&#123;</span><br><span class="line"> var parts = [],</span><br><span class="line"> field = null,</span><br><span class="line"> i,</span><br><span class="line"> len,</span><br><span class="line"> j,</span><br><span class="line"> optLen,</span><br><span class="line"> option,</span><br><span class="line"> optValue;</span><br><span class="line"></span><br><span class="line"> for (i=0, len=form.elements.length; i &lt; len; i++)&#123;</span><br><span class="line"> field = form.elements[i];</span><br><span class="line"></span><br><span class="line"> switch(field.type)&#123;</span><br><span class="line"> case &quot;select-one&quot;:</span><br><span class="line"> case &quot;select-multiple&quot;:</span><br><span class="line"> if (field.name.length)&#123;</span><br><span class="line"> for (j=0, optLen = field.options.length; j &lt; optLen; j++)&#123; option = field.options[j];</span><br><span class="line"> if (option.selected)&#123;</span><br><span class="line"> optValue = &quot;&quot;;</span><br><span class="line"> if (option.hasAttribute)&#123;</span><br><span class="line"> optValue = (option.hasAttribute(&quot;value&quot;) ?</span><br><span class="line"> option.value : option.text);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> optValue = (option.attributes[&quot;value&quot;].specified ?</span><br><span class="line"> option.value : option.text);</span><br><span class="line"> &#125;</span><br><span class="line"> parts.push(encodeURIComponent(field.name) + &quot;=&quot; +</span><br><span class="line"> encodeURIComponent(optValue));</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> break;</span><br><span class="line"></span><br><span class="line"> case undefined: //字段集</span><br><span class="line"> case &quot;file&quot;: //文件输入</span><br><span class="line"> case &quot;submit&quot;: //提交按钮</span><br><span class="line"> case &quot;reset&quot;: //重置按钮</span><br><span class="line"> case &quot;button&quot;: //自定义按钮</span><br><span class="line"> break;</span><br><span class="line"></span><br><span class="line"> case &quot;radio&quot;: //单选按钮</span><br><span class="line"> case &quot;checkbox&quot;: //复选框</span><br><span class="line"> if (!field.checked)&#123;</span><br><span class="line"> break;</span><br><span class="line"> &#125;</span><br><span class="line"> /* 执行默认操作 */</span><br><span class="line"> default:</span><br><span class="line"> //不包含没有名字的表单字段</span><br><span class="line"> if (field.name.length)&#123;</span><br><span class="line"> parts.push(encodeURIComponent(field.name) + &quot;=&quot; +</span><br><span class="line"> encodeURIComponent(field.value));</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return parts.join(&quot;&amp;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><blockquote><p>跨文档消息传递<br>跨文档消息传送（cross-document messaging），有时候简称为 XDM，指的是在来自不同域的页面间<br>传递消息。例如，<a href="http://www.wrox.com/">www.wrox.com</a> 域中的页面与位于一个内嵌框架中的 p2p.wrox.com 域中的页面通信。<br>在 XDM 机制出现之前，要稳妥地实现这种通信需要花很多工夫。XDM 把这种机制规范化，让我们能<br>既稳妥又简单地实现跨文档通信。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">postMessage()方法接收两个参数：一条消息和一个表示消息接收方来自哪个域的字符串。第二</span><br><span class="line">个参数对保障安全通信非常重要，可以防止浏览器把消息发送到不安全的地方。来看下面的例子。</span><br><span class="line">//注意：所有支持 XDM 的浏览器也支持 iframe 的 contentWindow 属性</span><br><span class="line">var iframeWindow = document.getElementById(&quot;myframe&quot;).contentWindow;</span><br><span class="line">iframeWindow.postMessage(&quot;A secret&quot;, &quot;http://www.wrox.com&quot;);</span><br><span class="line"></span><br><span class="line">使用 postMessage()时，最好还是只传字符串。如果你想传入结构化的数据，最</span><br><span class="line">佳选择是先在要传入的数据上调用 JSON.stringify()，通过 postMessage()传入得到的字符串，然</span><br><span class="line">后再在 onmessage 事件处理程序中调用 JSON.parse()。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="可拖动"><a href="#可拖动" class="headerlink" title="可拖动"></a>可拖动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 让这个图像不可以拖动 --&gt;</span><br><span class="line">&lt;img src=&quot;smile.gif&quot; draggable=&quot;false&quot; alt=&quot;Smiley face&quot;&gt;</span><br><span class="line">&lt;!-- 让这个元素可以拖动 --&gt;</span><br><span class="line">&lt;div draggable=&quot;true&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="媒体元素"><a href="#媒体元素" class="headerlink" title="媒体元素"></a>媒体元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">随着音频和视频在 Web 上的迅速流行，大多数提供富媒体内容的站点为了保证跨浏览器兼容性，</span><br><span class="line">不得不选择使用 Flash。HTML5 新增了两个与媒体相关的标签，让开发人员不必依赖任何插件就能在网</span><br><span class="line">页中嵌入跨浏览器的音频和视频内容。这两个标签就是&lt;audio&gt;和&lt;video&gt;。</span><br><span class="line">这两个标签除了能让开发人员方便地嵌入媒体文件之外，都提供了用于实现常用功能的 JavaScript</span><br><span class="line">API，允许为媒体创建自定义的控件。这两个元素的用法如下。</span><br><span class="line">&lt;!-- 嵌入视频 --&gt;</span><br><span class="line">&lt;video src=&quot;conference.mpg&quot; id=&quot;myVideo&quot;&gt;Video player not available.&lt;/video&gt;</span><br><span class="line">&lt;!-- 嵌入音频 --&gt;</span><br><span class="line">&lt;audio src=&quot;song.mp3&quot; id=&quot;myAudio&quot;&gt;Audio player not available.&lt;/audio&gt;</span><br></pre></td></tr></table></figure><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">history.pushState(&#123;name:&quot;Nicholas&quot;&#125;, &quot;Nicholas&#x27; page&quot;, &quot;nicholas.html&quot;);</span><br><span class="line">执行 pushState()方法后，新的状态信息就会被加入历史状态栈，而浏览器地址栏也会变成新的</span><br><span class="line">相对 URL。但是，浏览器并不会真的向服务器发送请求，即使状态改变之后查询 location.href 也会</span><br><span class="line">返回与地址栏中相同的地址。另外，第二个参数目前还没有浏览器实现，因此完全可以只传入一个空字</span><br><span class="line">符串，或者一个短标题也可以。而第一个参数则应该尽可能提供初始化页面状态所需的各种信息。因为 pushState()会创建新的历史状态，所以你会发现“后退”按钮也能使用了。按下“后退”</span><br><span class="line">按钮，会触发 window 对象的 popstate 事件①。popstate 事件的事件对象有一个 state 属性，这个</span><br><span class="line">属性就包含着当初以第一个参数传递给 pushState()的状态对象。</span><br><span class="line">EventUtil.addHandler(window, &quot;popstate&quot;, function(event)&#123;</span><br><span class="line"> var state = event.state;</span><br><span class="line"> if (state)&#123; //第一个页面加载时 state 为空</span><br><span class="line"> processState(state);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br><span class="line">要更新当前状态，可以调用 replaceState()，传入的参数与 pushState()的前两个参数相同。</span><br><span class="line">调用这个方法不会在历史状态栈中创建新状态，只会重写当前状态。</span><br><span class="line">history.replaceState(&#123;name:&quot;Greg&quot;&#125;, &quot;Greg&#x27;s page&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 高程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高程笔记5-事件</title>
      <link href="/2017/06/13/2017%E9%AB%98%E7%A8%8B/20170613/"/>
      <url>/2017/06/13/2017%E9%AB%98%E7%A8%8B/20170613/</url>
      
        <content type="html"><![CDATA[<p>高程笔记5</p><span id="more"></span><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>IE 的事件流叫做事件冒泡（event bubbling），即事件开始时由最具体的元素（文档中嵌套层次最深<br>的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。以下面的 HTML 页面为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"> &lt;title&gt;Event Bubbling Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;div id=&quot;myDiv&quot;&gt;Click Me&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">如果你单击了页面中的&lt;div&gt;元素，那么这个 click 事件会按照如下顺序传播：</span><br><span class="line">(1) &lt;div&gt;</span><br><span class="line">(2) &lt;body&gt;</span><br><span class="line">(3) &lt;html&gt;</span><br><span class="line">(4) document</span><br><span class="line">也就是说，click 事件首先在&lt;div&gt;元素上发生，而这个元素就是我们单击的元素。然后，click</span><br><span class="line">事件沿 DOM 树向上传播，在每一级节点上都会发生，直至传播到 document 对象。图 13-1 展示了事件</span><br><span class="line">冒泡的过程。</span><br></pre></td></tr></table></figure><h2 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Netscape Communicator 团队提出的另一种事件流叫做事件捕获（event capturing）。事件捕获的思想</span><br><span class="line">是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。事件捕获的用意在于在</span><br><span class="line">事件到达预定目标之前捕获它。如果仍以前面的 HTML 页面作为演示事件捕获的例子，那么单击&lt;div&gt;</span><br><span class="line">元素就会以下列顺序触发 click 事件。</span><br><span class="line">(1) document</span><br><span class="line">(2) &lt;html&gt;</span><br><span class="line">(3) &lt;body&gt;</span><br><span class="line">(4) &lt;div&gt;</span><br><span class="line">在事件捕获过程中，document 对象首先接收到 click 事件，然后事件沿 DOM 树依次向下，一直</span><br><span class="line">传播到事件的实际目标，即&lt;div&gt;元素。</span><br></pre></td></tr></table></figure><h3 id="HTML事件处理程序"><a href="#HTML事件处理程序" class="headerlink" title="HTML事件处理程序"></a>HTML事件处理程序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在 HTML 中定义的事件处理程序可以包含要执行的具体动作，也可以调用在页面其他地方定义的</span><br><span class="line">脚本，如下面的例子所示：</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> function showMessage()&#123;</span><br><span class="line"> alert(&quot;Hello world!&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;Click Me&quot; onclick=&quot;showMessage()&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过 HTML 指定事件处理程序的最后一个缺点是 HTML 与 JavaScript 代码紧密耦合。如果要更换事</span><br><span class="line">件处理程序，就要改动两个地方：HTML 代码和 JavaScript 代码。而这正是许多开发人员摒弃 HTML 事</span><br><span class="line">件处理程序，转而使用 JavaScript 指定事件处理程序的原因所在。</span><br></pre></td></tr></table></figure><h3 id="DOM2-级事件处理程序"><a href="#DOM2-级事件处理程序" class="headerlink" title="DOM2 级事件处理程序"></a>DOM2 级事件处理程序</h3><blockquote><p>“DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：addEventListener()<br>和 removeEventListener()。所有 DOM 节点中都包含这两个方法，并且它们都接受 3 个参数：要处<br>理的事件名、作为事件处理程序的函数和一个布尔值。最后这个布尔值参数如果是 true，表示在捕获<br>阶段调用事件处理程序；如果是 false，表示在冒泡阶段调用事件处理程序。<br>要在按钮上为 click 事件添加事件处理程序，可以使用下列代码：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var btn = document.getElementById(&quot;myBtn&quot;);</span><br><span class="line">btn.addEventListener(&quot;click&quot;, function()&#123;</span><br><span class="line"> alert(this.id);</span><br><span class="line">&#125;, false);</span><br><span class="line">上面的代码为一个按钮添加了 onclick 事件处理程序，而且该事件会在冒泡阶段被触发（因为最</span><br><span class="line">后一个参数是 false）。与 DOM0 级方法一样，这里添加的事件处理程序也是在其依附的元素的作用域</span><br><span class="line">中运行。</span><br><span class="line"></span><br><span class="line">//移除removeEventListener，函数不能匿名</span><br><span class="line">var btn = document.getElementById(&quot;myBtn&quot;);</span><br><span class="line">var handler = function()&#123;</span><br><span class="line"> alert(this.id);</span><br><span class="line">&#125;;</span><br><span class="line">btn.addEventListener(&quot;click&quot;, handler, false);</span><br><span class="line">//这里省略了其他代码</span><br><span class="line">btn.removeEventListener(&quot;click&quot;, handler, false); //有效！</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><blockquote><p>Web 浏览器中可能发生的事件有很多类型。如前所述，不同的事件类型具有不同的信息，而“DOM3<br>级事件”规定了以下几类事件。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> UI（User Interface，用户界面）事件，当用户与页面上的元素交互时触发；</span><br><span class="line"> 焦点事件，当元素获得或失去焦点时触发；</span><br><span class="line"> 鼠标事件，当用户通过鼠标在页面上执行操作时触发；</span><br><span class="line"> 滚轮事件，当使用鼠标滚轮（或类似设备）时触发；</span><br><span class="line"> 文本事件，当在文档中输入文本时触发；</span><br><span class="line"> 键盘事件，当用户通过键盘在页面上执行操作时触发；</span><br><span class="line"> 合成事件，当为 IME（Input Method Editor，输入法编辑器）输入字符时触发；</span><br><span class="line"> 变动（mutation）事件，当底层 DOM 结构发生变化时触发。</span><br><span class="line"> 变动名称事件，当元素或属性名变动时触发。此类事件已经被废弃，没有任何浏览器实现它们，</span><br><span class="line">因此本章不做介绍</span><br></pre></td></tr></table></figure><h3 id="UI事件"><a href="#UI事件" class="headerlink" title="UI事件"></a>UI事件</h3><p>UI 事件指的是那些不一定与用户操作有关的事件。这些事件在 DOM 规范出现之前，都是以这种或<br>那种形式存在的，而在 DOM 规范中保留是为了向后兼容。现有的 UI 事件如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> DOMActivate：表示元素已经被用户操作（通过鼠标或键盘）激活。这个事件在 DOM3 级事</span><br><span class="line">件中被废弃，但 Firefox 2+和 Chrome 支持它。考虑到不同浏览器实现的差异，不建议使用这个</span><br><span class="line">事件。</span><br><span class="line"> load：当页面完全加载后在 window 上面触发，当所有框架都加载完毕时在框架集上面触发，</span><br><span class="line">当图像加载完毕时在&lt;img&gt;元素上面触发，或者当嵌入的内容加载完毕时在&lt;object&gt;元素上面</span><br><span class="line">触发。</span><br><span class="line"> unload：当页面完全卸载后在 window 上面触发，当所有框架都卸载后在框架集上面触发，或</span><br><span class="line">者当嵌入的内容卸载完毕后在&lt;object&gt;元素上面触发。</span><br><span class="line"> abort：在用户停止下载过程时，如果嵌入的内容没有加载完，则在&lt;object&gt;元素上面触发。</span><br><span class="line"> error：当发生 JavaScript 错误时在 window 上面触发，当无法加载图像时在&lt;img&gt;元素上面触</span><br><span class="line">发，当无法加载嵌入内容时在&lt;object&gt;元素上面触发，或者当有一或多个框架无法加载时在框</span><br><span class="line">架集上面触发。第 17 章将继续讨论这个事件。</span><br><span class="line"> select：当用户选择文本框（&lt;input&gt;或&lt;texterea&gt;）中的一或多个字符时触发。第 14 章将</span><br><span class="line">继续讨论这个事件。</span><br><span class="line"> resize：当窗口或框架的大小变化时在 window 或框架上面触发。</span><br><span class="line"> scroll：当用户滚动带滚动条的元素中的内容时，在该元素上面触发。&lt;body&gt;元素中包含所加</span><br><span class="line">载页面的滚动条。</span><br></pre></td></tr></table></figure><ol><li><p>load 事件</p><blockquote><p>JavaScript 中最常用的一个事件就是 load。当页面完全加载后（包括所有图像、JavaScript 文件、<br>CSS 文件等外部资源），就会触发 window 上面的 load 事件。有两种定义 onload 事件处理程序的方式。<br>第一种方式是使用如下所示的 JavaScript 代码：<br>EventUtil.addHandler(window, “load”, function(event){<br> alert(“Loaded!”);<br>});</p></blockquote></li><li><p>unload 事件</p><blockquote><p>与 load 事件对应的是 unload 事件，这个事件在文档被完全卸载后触发。只要用户从一个页面切<br>换到另一个页面，就会发生 unload 事件。而利用这个事件最多的情况是清除引用，以避免内存泄漏。<br>与 load 事件类似，也有两种指定 onunload 事件处理程序的方式。第一种方式是使用 JavaScript，如<br>下所示：<br>EventUtil.addHandler(window, “unload”, function(event){<br> alert(“Unloaded”);<br>});</p></blockquote></li><li><p>resize 事件</p><blockquote><p>当浏览器窗口被调整到一个新的高度或宽度时，就会触发resize事件。这个事件在window（窗口）上面触发，因此可以通过JavaScript或者<body>元素中的onresize特性来指定事件处理程序。如前所述，我们还是推荐使用如下所示的 JavaScript 方式：<br>EventUtil.addHandler(window, “resize”, function(event){<br> alert(“Resized”);<br>});</p></blockquote></li></ol><p>4.scroll 事件</p><blockquote><p>虽然 scroll 事件是在 window 对象上发生的，但它实际表示的则是页面中相应元素的变化。在混<br>杂模式下，可以通过<body>元素的 scrollLeft 和 scrollTop 来监控到这一变化；而在标准模式下，<br>除 Safari 之外的所有浏览器都会通过<html>元素来反映这一变化（Safari 仍然基于<body>跟踪滚动位<br>置），如下面的例子所示：<br>EventUtil.addHandler(window, “scroll”, function(event){<br> if (document.compatMode &#x3D;&#x3D; “CSS1Compat”){<br> alert(document.documentElement.scrollTop);<br> } else {<br> alert(document.body.scrollTop);<br> }<br>});</p></blockquote><h3 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h3><blockquote><p> blur：在元素失去焦点时触发。这个事件不会冒泡；所有浏览器都支持它。<br> focus：在元素获得焦点时触发。这个事件不会冒泡；所有浏览器都支持它。</p></blockquote><h3 id="鼠标与滚轮事件"><a href="#鼠标与滚轮事件" class="headerlink" title="鼠标与滚轮事件"></a>鼠标与滚轮事件</h3><p>鼠标事件是 Web 开发中最常用的一类事件，毕竟鼠标还是最主要的定位设备。DOM3 级事件中定<br>义了 9 个鼠标事件，简介如下。</p><blockquote><p> click：在用户单击主鼠标按钮（一般是左边的按钮）或者按下回车键时触发。这一点对确保<br>易访问性很重要，意味着 onclick 事件处理程序既可以通过键盘也可以通过鼠标执行。<br> dblclick：在用户双击主鼠标按钮（一般是左边的按钮）时触发。从技术上说，这个事件并不<br>是 DOM2 级事件规范中规定的，但鉴于它得到了广泛支持，所以 DOM3 级事件将其纳入了标准。<br> mousedown：在用户按下了任意鼠标按钮时触发。不能通过键盘触发这个事件。<br> mouseenter：在鼠标光标从元素外部首次移动到元素范围之内时触发。这个事件不冒泡，而且<br>在光标移动到后代元素上不会触发。DOM2 级事件并没有定义这个事件，但 DOM3 级事件将它<br>纳入了规范。IE、Firefox 9+和 Opera 支持这个事件。<br> mouseleave：在位于元素上方的鼠标光标移动到元素范围之外时触发。这个事件不冒泡，而且<br>在光标移动到后代元素上不会触发。DOM2 级事件并没有定义这个事件，但 DOM3 级事件将它<br>纳入了规范。IE、Firefox 9+和 Opera 支持这个事件。<br> mousemove：当鼠标指针在元素内部移动时重复地触发。不能通过键盘触发这个事件。<br> mouseout：在鼠标指针位于一个元素上方，然后用户将其移入另一个元素时触发。又移入的另<br>一个元素可能位于前一个元素的外部，也可能是这个元素的子元素。不能通过键盘触发这个事件。<br> mouseover：在鼠标指针位于一个元素外部，然后用户将其首次移入另一个元素边界之内时触<br>发。不能通过键盘触发这个事件。<br> mouseup：在用户释放鼠标按钮时触发。不能通过键盘触发这个事件。</p></blockquote><h3 id="键盘与文本事件"><a href="#键盘与文本事件" class="headerlink" title="键盘与文本事件"></a>键盘与文本事件</h3><p>有 3 个键盘事件，简述如下。</p><blockquote><p> keydown：当用户按下键盘上的任意键时触发，而且如果按住不放的话，会重复触发此事件。<br> keypress：当用户按下键盘上的字符键时触发，而且如果按住不放的话，会重复触发此事件。<br>按下 Esc 键也会触发这个事件。Safari 3.1 之前的版本也会在用户按下非字符键时触发 keypress<br>事件。<br> keyup：当用户释放键盘上的键时触发。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var textbox = document.getElementById(&quot;myText&quot;);</span><br><span class="line">EventUtil.addHandler(textbox, &quot;keyup&quot;, function(event)&#123;</span><br><span class="line"> event = EventUtil.getEvent(event);</span><br><span class="line"> alert(event.keyCode);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//字符编码</span><br><span class="line">var EventUtil = &#123;</span><br><span class="line"> //省略的代码</span><br><span class="line">   getCharCode: function(event)&#123;</span><br><span class="line">     if (typeof event.charCode == &quot;number&quot;)&#123;</span><br><span class="line">        return event.charCode;</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">        return event.keyCode;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> //省略的代码</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h1><blockquote><p>对“事件处理程序过多”问题的解决方案就是事件委托。事件委托利用了事件冒泡，只指定一个事<br>件处理程序，就可以管理某一类型的所有事件。例如，click 事件会一直冒泡到 document 层次。也就<br>是说，我们可以为整个页面指定一个 onclick 事件处理程序，而不必给每个可单击的元素分别添加事<br>件处理程序。以下面的 HTML 代码为例。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;myLinks&quot;&gt;</span><br><span class="line"> &lt;li id=&quot;goSomewhere&quot;&gt;Go somewhere&lt;/li&gt;</span><br><span class="line"> &lt;li id=&quot;doSomething&quot;&gt;Do something&lt;/li&gt;</span><br><span class="line"> &lt;li id=&quot;sayHi&quot;&gt;Say hi&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var list = document.getElementById(&quot;myLinks&quot;);</span><br><span class="line">EventUtil.addHandler(list, &quot;click&quot;, function(event)&#123;</span><br><span class="line"> event = EventUtil.getEvent(event);</span><br><span class="line"> var target = EventUtil.getTarget(event);</span><br><span class="line"> switch(target.id)&#123;</span><br><span class="line"> case &quot;doSomething&quot;:</span><br><span class="line"> document.title = &quot;I changed the document&#x27;s title&quot;;</span><br><span class="line"> break;</span><br><span class="line"> case &quot;goSomewhere&quot;:</span><br><span class="line"> location.href = &quot;http://www.wrox.com&quot;;</span><br><span class="line"> break;</span><br><span class="line"> case &quot;sayHi&quot;:</span><br><span class="line"> alert(&quot;hi&quot;);</span><br><span class="line"> break;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>最适合采用事件委托技术的事件包括 click、mousedown、mouseup、keydown、keyup 和 keypress。<br>虽然 mouseover 和 mouseout 事件也冒泡，但要适当处理它们并不容易，而且经常需要计算元素的位置。<br>（因为当鼠标从一个元素移到其子节点时，或者当鼠标移出该元素时，都会触发 mouseout 事件。）</p></blockquote><h3 id="自定义-DOM-事件"><a href="#自定义-DOM-事件" class="headerlink" title="自定义 DOM 事件"></a>自定义 DOM 事件</h3><p>DOM3 级还定义了“自定义事件”。自定义事件不是由 DOM 原生触发的，它的目的是让开发人员<br>创建自己的事件。要创建新的自定义事件，可以调用 createEvent(“CustomEvent”)。返回的对象有<br>一个名为 initCustomEvent()的方法，接收如下 4 个参数。</p><blockquote><p> type（字符串）：触发的事件类型，例如”keydown”。<br> bubbles（布尔值）：表示事件是否应该冒泡。<br> cancelable（布尔值）：表示事件是否可以取消。<br> detail（对象）：任意值，保存在 event 对象的 detail 属性中。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var div = document.getElementById(&quot;myDiv&quot;),</span><br><span class="line"> event;</span><br><span class="line">EventUtil.addHandler(div, &quot;myevent&quot;, function(event)&#123;</span><br><span class="line"> alert(&quot;DIV: &quot; + event.detail);</span><br><span class="line">&#125;);</span><br><span class="line">EventUtil.addHandler(document, &quot;myevent&quot;, function(event)&#123;</span><br><span class="line"> alert(&quot;DOCUMENT: &quot; + event.detail);</span><br><span class="line">&#125;);</span><br><span class="line">if (document.implementation.hasFeature(&quot;CustomEvents&quot;, &quot;3.0&quot;))&#123;</span><br><span class="line"> event = document.createEvent(&quot;CustomEvent&quot;);</span><br><span class="line"> event.initCustomEvent(&quot;myevent&quot;, true, false, &quot;Hello world!&quot;);</span><br><span class="line"> div.dispatchEvent(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这个例子创建了一个冒泡事件&quot;myevent&quot;。而 event.detail 的值被设置成了一个简单的字符串，</span><br><span class="line">然后在&lt;div&gt;元素和 document 上侦听这个事件。因为 initCustomEvent()方法已经指定这个事件应</span><br><span class="line">该冒泡，所以浏览器会负责将事件向上冒泡到 document。</span><br><span class="line">支持自定义 DOM 事件的浏览器有 IE9+和 Firefox 6+。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 高程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高程笔记4-BOM</title>
      <link href="/2017/06/12/2017%E9%AB%98%E7%A8%8B/20170612/"/>
      <url>/2017/06/12/2017%E9%AB%98%E7%A8%8B/20170612/</url>
      
        <content type="html"><![CDATA[<p>高程笔记4-BOM</p><span id="more"></span><h2 id="8-windows对象"><a href="#8-windows对象" class="headerlink" title="8-windows对象"></a>8-windows对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">抛开全局变量会成为 window 对象的属性不谈，定义全局变量与在 window 对象上直接定义属性还</span><br><span class="line">是有一点差别：全局变量不能通过 delete 操作符删除，而直接在 window 对象上的定义的属性可以。</span><br><span class="line">例如：</span><br><span class="line">var age = 29;</span><br><span class="line">window.color = &quot;red&quot;;</span><br><span class="line">//在 IE &lt; 9 时抛出错误，在其他所有浏览器中都返回 false</span><br><span class="line">delete window.age;</span><br><span class="line">//在 IE &lt; 9 时抛出错误，在其他所有浏览器中都返回 true</span><br><span class="line">delete window.color; //returns true</span><br><span class="line">alert(window.age); //29</span><br><span class="line">alert(window.color); //undefined</span><br></pre></td></tr></table></figure><h3 id="间歇调用和超时调用"><a href="#间歇调用和超时调用" class="headerlink" title="间歇调用和超时调用"></a>间歇调用和超时调用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//设置超时调用</span><br><span class="line">var timeoutId = setTimeout(function() &#123;</span><br><span class="line"> alert(&quot;Hello world!&quot;);</span><br><span class="line">&#125;, 1000);</span><br><span class="line">//注意：把它取消</span><br><span class="line">clearTimeout(timeoutId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//不建议传递字符串！</span><br><span class="line">setInterval (&quot;alert(&#x27;Hello world!&#x27;) &quot;, 10000);</span><br><span class="line">//推荐的调用方式</span><br><span class="line">setInterval (function() &#123;</span><br><span class="line"> alert(&quot;Hello world!&quot;);</span><br><span class="line">&#125;, 10000)</span><br></pre></td></tr></table></figure><blockquote><p>浏览器通过 alert()、confirm()和 prompt()方法可以调用系统对话框向用户显示消息。<br>&#x2F;&#x2F;显示“打印”对话框<br>window.print();<br>&#x2F;&#x2F;显示“查找”对话框<br>window.find();</p></blockquote><h2 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h2><p>位置操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">location.assign(&quot;http://www.wrox.com&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">window.location = &quot;http://www.wrox.com&quot;;</span><br><span class="line">location.href = &quot;http://www.wrox.com&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//假设初始 URL 为 http://www.wrox.com/WileyCDA/</span><br><span class="line">//将 URL 修改为&quot;http://www.wrox.com/WileyCDA/#section1&quot;</span><br><span class="line">location.hash = &quot;#section1&quot;;</span><br><span class="line">//将 URL 修改为&quot;http://www.wrox.com/WileyCDA/?q=javascript&quot;</span><br><span class="line">location.search = &quot;?q=javascript&quot;;</span><br><span class="line">//将 URL 修改为&quot;http://www.yahoo.com/WileyCDA/&quot;</span><br><span class="line">location.hostname = &quot;www.yahoo.com&quot;;</span><br><span class="line">//将 URL 修改为&quot;http://www.yahoo.com/mydir/&quot;</span><br><span class="line">location.pathname = &quot;mydir&quot;;</span><br><span class="line">//将 URL 修改为&quot;http://www.yahoo.com:8080/WileyCDA/&quot;</span><br><span class="line">location.port = 8080;</span><br><span class="line">每次修改 location 的属性（hash 除外），页面都会以新 URL 重新加载。</span><br></pre></td></tr></table></figure><blockquote><p>重新加载<br>location.reload(); &#x2F;&#x2F;重新加载（有可能从缓存中加载）<br>location.reload(true); &#x2F;&#x2F;重新加载（从服务器重新加载）</p></blockquote><h2 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">使用 go()方法可以在用户的历史记录中任意跳转，可以向后也可以向前。这个方法接受一个参数，</span><br><span class="line">表示向后或向前跳转的页面数的一个整数值。负数表示向后跳转（类似于单击浏览器的“后退”按钮），</span><br><span class="line">正数表示向前跳转（类似于单击浏览器的“前进”按钮）。来看下面的例子。</span><br><span class="line">//后退一页</span><br><span class="line">history.go(-1);</span><br><span class="line">//前进一页</span><br><span class="line">history.go(1);</span><br><span class="line">//前进两页</span><br><span class="line">history.go(2);</span><br><span class="line">//跳转到最近的 wrox.com 页面</span><br><span class="line">history.go(&quot;wrox.com&quot;);</span><br><span class="line">//跳转到最近的 nczonline.net 页面</span><br><span class="line">history.go(&quot;nczonline.net&quot;);</span><br><span class="line">另外，还可以使用两个简写方法 back()和 forward()来代替 go()。顾名思义，这两个方法可以</span><br><span class="line">模仿浏览器的“后退”和“前进”按钮。</span><br><span class="line">//后退一页</span><br><span class="line">history.back();</span><br><span class="line">//前进一页</span><br><span class="line">history.forward();</span><br></pre></td></tr></table></figure><h2 id="BOM总结"><a href="#BOM总结" class="headerlink" title="BOM总结"></a>BOM总结</h2><blockquote><p>浏览器对象模型（BOM）以 window 对象为依托，表示浏览器窗口以及页面可见区域。同时，window<br>对象还是 ECMAScript 中的 Global 对象，因而所有全局变量和函数都是它的属性，且所有原生的构造<br>函数及其他函数也都存在于它的命名空间下。本章讨论了下列 BOM 的组成部分。<br> 在使用框架时，每个框架都有自己的 window 对象以及所有原生构造函数及其他函数的副本。<br>每个框架都保存在 frames 集合中，可以通过位置或通过名称来访问。<br> 有一些窗口指针，可以用来引用其他框架，包括父框架。<br> top 对象始终指向最外围的框架，也就是整个浏览器窗口。<br> parent 对象表示包含当前框架的框架，而 self 对象则回指 window。<br> 使用 location 对象可以通过编程方式来访问浏览器的导航系统。设置相应的属性，可以逐段<br>或整体性地修改浏览器的 URL。<br> 调用 replace()方法可以导航到一个新 URL，同时该 URL 会替换浏览器历史记录中当前显示<br>的页面。<br> navigator 对象提供了与浏览器有关的信息。到底提供哪些信息，很大程度上取决于用户的浏<br>览器；不过，也有一些公共的属性（如 userAgent）存在于所有浏览器中。<br>BOM 中还有两个对象：screen 和 history，但它们的功能有限。screen 对象中保存着与客户端<br>显示器有关的信息，这些信息一般只用于站点分析。history 对象为访问浏览器的历史记录开了一个<br>小缝隙，开发人员可以据此判断历史记录的数量，也可以在历史记录中向后或向前导航到任意页面。</p></blockquote><h1 id="10-DOM"><a href="#10-DOM" class="headerlink" title="10.DOM"></a>10.DOM</h1><h2 id="DOCUMENT"><a href="#DOCUMENT" class="headerlink" title="DOCUMENT"></a>DOCUMENT</h2><blockquote><p>这个页面在经过浏览器解析后，其文档中只包含一个子节点，即<html>元素。可以通过<br>documentElement 或 childNodes 列表来访问这个元素，如下所示。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var html = document.documentElement; //取得对&lt;html&gt;的引用</span><br><span class="line">alert(html === document.childNodes[0]); //true</span><br><span class="line">alert(html === document.firstChild); //true</span><br><span class="line"></span><br><span class="line">//取得文档标题</span><br><span class="line">var originalTitle = document.title;</span><br><span class="line">//设置文档标题</span><br><span class="line">document.title = &quot;New page title&quot;;</span><br><span class="line"></span><br><span class="line">//取得完整的 URL</span><br><span class="line">var url = document.URL;</span><br><span class="line">//取得域名</span><br><span class="line">var domain = document.domain;</span><br><span class="line">//取得来源页面的 URL</span><br><span class="line">var referrer = document.referrer;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 文档写入</p><blockquote><p>有一个 document 对象的功能已经存在很多年了，那就是将输出流写入到网页中的能力。这个能力<br>体现在下列 4 个方法中：write()、writeln()、open()和 close()。其中，write()和 writeln()<br>方法都接受一个字符串参数，即要写入到输出流中的文本。write()会原样写入，而 writeln()则会<br>在字符串的末尾添加一个换行符（\n）。在页面被加载的过程中，可以使用这两个方法向页面中动态地<br>加入内容，如下面的例子所示。</p></blockquote><h4 id="Element类型"><a href="#Element类型" class="headerlink" title="Element类型"></a>Element类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if (element.tagName == &quot;div&quot;)&#123; //不能这样比较，很容易出错！</span><br><span class="line"> //在此执行某些操作</span><br><span class="line">&#125;</span><br><span class="line">if (element.tagName.toLowerCase() == &quot;div&quot;)&#123; //这样最好（适用于任何文档）</span><br><span class="line"> //在此执行某些操作</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//属性的3个方法</span><br><span class="line">div.setAttribute(&quot;id&quot;, &quot;someOtherId&quot;);</span><br><span class="line">alert(div.getAttribute(&quot;mycolor&quot;)); //null（IE 除外）</span><br><span class="line">div.removeAttribute(&quot;class&quot;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="DOM拓展"><a href="#DOM拓展" class="headerlink" title="DOM拓展"></a>DOM拓展</h1><p>querySelector()方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//取得 body 元素</span><br><span class="line">var body = document.querySelector(&quot;body&quot;);</span><br><span class="line"></span><br><span class="line">//取得某&lt;div&gt;中的所有&lt;em&gt;元素（类似于 getElementsByTagName(&quot;em&quot;)）</span><br><span class="line">var ems = document.getElementById(&quot;myDiv&quot;).querySelectorAll(&quot;em&quot;);</span><br><span class="line"></span><br><span class="line">//matchesSelector()方法</span><br><span class="line">//Selectors API Level 2 规范为 Element 类型新增了一个方法 matchesSelector()。这个方法接收</span><br><span class="line">//一个参数，即 CSS 选择符，如果调用元素与该选择符匹配，返回 true；否则，返回 false。看例子。</span><br><span class="line">if (document.body.matchesSelector(&quot;body.page1&quot;))&#123;</span><br><span class="line"> //true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="classList-属性"><a href="#classList-属性" class="headerlink" title="classList 属性"></a>classList 属性</h3><blockquote><p> add(value)：将给定的字符串值添加到列表中。如果值已经存在，就不添加了。<br> contains(value)：表示列表中是否存在给定的值，如果存在则返回 true，否则返回 false。<br> remove(value)：从列表中删除给定的字符串。<br> toggle(value)：如果列表中已经存在给定的值，删除它；如果列表中没有给定的值，添加它。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//删除&quot;disabled&quot;类</span><br><span class="line">div.classList.remove(&quot;disabled&quot;);</span><br><span class="line">//添加&quot;current&quot;类</span><br><span class="line">div.classList.add(&quot;current&quot;);</span><br><span class="line">//切换&quot;user&quot;类</span><br><span class="line">div.classList.toggle(&quot;user&quot;);</span><br><span class="line">//确定元素中是否包含既定的类名</span><br><span class="line">if (div.classList.contains(&quot;bd&quot;) &amp;&amp; !div.classList.contains(&quot;disabled&quot;))&#123;</span><br><span class="line"> //执行操作</span><br><span class="line">)</span><br><span class="line">//迭代类名</span><br><span class="line">for (var i=0, len=div.classList.length; i &lt; len; i++)&#123;</span><br><span class="line"> doSomething(div.classList[i]);</span><br><span class="line">&#125;</span><br><span class="line">有了 classList 属性，除非你需要全部删除所有类名，或者完全重写元素的 class 属性，否则也</span><br><span class="line">就用不到 className 属性了。</span><br><span class="line">支持 classList 属性的浏览器有 Firefox 3.6+和 Chrome。</span><br></pre></td></tr></table></figure><h3 id="焦点管理"><a href="#焦点管理" class="headerlink" title="焦点管理"></a>焦点管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">默认情况下，文档刚刚加载完成时，document.activeElement 中保存的是 document.body 元</span><br><span class="line">素的引用。文档加载期间，document.activeElement 的值为 null。</span><br><span class="line">另外就是新增了 document.hasFocus()方法，这个方法用于确定文档是否获得了焦点。</span><br><span class="line">var button = document.getElementById(&quot;myButton&quot;);</span><br><span class="line">button.focus();</span><br><span class="line">alert(document.hasFocus()); //true</span><br></pre></td></tr></table></figure><h3 id="自定义数据属性"><a href="#自定义数据属性" class="headerlink" title="自定义数据属性"></a>自定义数据属性</h3><blockquote><p>HTML5 规定可以为元素添加非标准的属性，但要添加前缀 data-，目的是为元素提供与渲染无关的<br>信息，或者提供语义信息。这些属性可以任意添加、随便命名，只要以 data-开头即可。来看一个例子。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;myDiv&quot; data-appId=&quot;12345&quot; data-myname=&quot;Nicholas&quot;&gt;&lt;/div&gt;</span><br><span class="line">添加了自定义属性之后，可以通过元素的 dataset 属性来访问自定义属性的值。dataset 属性的</span><br><span class="line">值是 DOMStringMap 的一个实例，也就是一个名值对儿的映射。在这个映射中，每个 data-name 形式</span><br><span class="line">的属性都会有一个对应的属性，只不过属性名没有 data-前缀（比如，自定义属性是 data-myname，</span><br><span class="line">那映射中对应的属性就是 myname）。还是看一个例子吧。</span><br><span class="line">//本例中使用的方法仅用于演示</span><br><span class="line">var div = document.getElementById(&quot;myDiv&quot;);</span><br><span class="line">//取得自定义属性的值</span><br><span class="line">var appId = div.dataset.appId;</span><br><span class="line">var myName = div.dataset.myname;</span><br><span class="line">//设置值</span><br><span class="line">div.dataset.appId = 23456;</span><br><span class="line">div.dataset.myname = &quot;Michael&quot;;</span><br></pre></td></tr></table></figure><h3 id="字符集属性"><a href="#字符集属性" class="headerlink" title="字符集属性"></a>字符集属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTML5 新增了几个与文档字符集有关的属性。其中，charset 属性表示文档中实际使用的字符集，</span><br><span class="line">也可以用来指定新字符集。默认情况下，这个属性的值为&quot;UTF-16&quot;，但可以通过&lt;meta&gt;元素、响应头</span><br><span class="line">部或直接设置 charset 属性修改这个值。来看一个例子。</span><br><span class="line">alert(document.charset); //&quot;UTF-16&quot;</span><br><span class="line">document.charset = &quot;UTF-8&quot;;</span><br></pre></td></tr></table></figure><h3 id="插入标记"><a href="#插入标记" class="headerlink" title="插入标记"></a>插入标记</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">innerHTMLs属性</span><br><span class="line">div.innerHTML = &quot;Hello world!&quot;;</span><br><span class="line"></span><br><span class="line">outerHTML 属性</span><br><span class="line">outerHTML会根据指定的 HTML 字符串创建新的 DOM 子树，然后用这个 DOM 子树完全替换调用元素</span><br><span class="line">div.outerHTML = &quot;&lt;p&gt;This is a paragraph.&lt;/p&gt;&quot;;   //div会被覆盖掉</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>insertAdjacentHTML()方法<br>插入标记的最后一个新增方式是insertAdjacentHTML()方法。这个方法最早也是在IE中出现的，<br>它接收两个参数：插入位置和要插入的 HTML 文本。第一个参数必须是下列值之一：<br> “beforebegin”，在当前元素之前插入一个紧邻的同辈元素；<br> “afterbegin”，在当前元素之下插入一个新的子元素或在第一个子元素之前再插入新的子元素；<br> “beforeend”，在当前元素之下插入一个新的子元素或在最后一个子元素之后再插入新的子元素；<br> “afterend”，在当前元素之后插入一个紧邻的同辈元素。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//作为前一个同辈元素插入</span><br><span class="line">element.insertAdjacentHTML(&quot;beforebegin&quot;, &quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;);</span><br><span class="line">//作为第一个子元素插入</span><br><span class="line">element.insertAdjacentHTML(&quot;afterbegin&quot;, &quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;);</span><br><span class="line">//作为最后一个子元素插入</span><br><span class="line">element.insertAdjacentHTML(&quot;beforeend&quot;, &quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;);</span><br><span class="line">//作为后一个同辈元素插入</span><br><span class="line">element.insertAdjacentHTML(&quot;afterend&quot;, &quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;);</span><br><span class="line">支持 insertAdjacentHTML()方法的浏览器有 IE、Firefox 8+、Safari、Opera 和 Chrome。</span><br></pre></td></tr></table></figure><h3 id="scrollIntoView-方法"><a href="#scrollIntoView-方法" class="headerlink" title="scrollIntoView()方法"></a>scrollIntoView()方法</h3><blockquote><p>如何滚动页面也是 DOM 规范没有解决的一个问题。为了解决这个问题，浏览器实现了一些方法，<br>以方便开发人员更好地控制页面滚动。在各种专有方法中，HTML5 最终选择了 scrollIntoView()作<br>为标准方法。<br>&#x2F;&#x2F;让元素可见</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.forms[0].scrollIntoView();</span><br></pre></td></tr></table></figure><blockquote><p> scrollIntoViewIfNeeded(alignCenter)：只在当前元素在视口中不可见的情况下，才滚<br>动浏览器窗口或容器元素，最终让它可见。如果当前元素在视口中可见，这个方法什么也不做。<br>如果将可选的 alignCenter 参数设置为 true，则表示尽量将元素显示在视口中部（垂直方向）。<br>Safari 和 Chrome 实现了这个方法。<br> scrollByLines(lineCount)：将元素的内容滚动指定的行高，lineCount 值可以是正值，<br>也可以是负值。Safari 和 Chrome 实现了这个方法。<br> scrollByPages(pageCount)：将元素的内容滚动指定的页面高度，具体高度由元素的高度决<br>定。Safari 和 Chrome 实现了这个方法。</p></blockquote><h3 id="设置CSS"><a href="#设置CSS" class="headerlink" title="设置CSS"></a>设置CSS</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">只要取得一个有效的 DOM 元素的引用，就可以随时使用 JavaScript 为其设置样式。以下是几个例子。</span><br><span class="line">var myDiv = document.getElementById(&quot;myDiv&quot;);</span><br><span class="line">//设置背景颜色</span><br><span class="line">myDiv.style.backgroundColor = &quot;red&quot;;</span><br><span class="line">//改变大小</span><br><span class="line">myDiv.style.width = &quot;100px&quot;;</span><br><span class="line">myDiv.style.height = &quot;200px&quot;;</span><br><span class="line">//指定边框</span><br><span class="line">myDiv.style.border = &quot;1px solid black&quot;;</span><br><span class="line">在以这种方式改变样式时，元素的外观会自动被更新。</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>DOM 样式属性和方法<br>“DOM2级样式”规范还为 style 对象定义了一些属性和方法。这些属性和方法在提供元素的 style<br>特性值的同时，也可以修改样式。下面列出了这些属性和方法。<br> cssText：如前所述，通过它能够访问到 style 特性中的 CSS 代码。<br> length：应用给元素的 CSS 属性的数量。<br> parentRule：表示 CSS 信息的 CSSRule 对象。本节后面将讨论 CSSRule 类型。<br> getPropertyCSSValue(propertyName)：返回包含给定属性值的 CSSValue 对象。<br> getPropertyPriority(propertyName)：如果给定的属性使用了!important 设置，则返回<br>“important”；否则，返回空字符串。<br> getPropertyValue(propertyName)：返回给定属性的字符串值。<br> item(index)：返回给定位置的 CSS 属性的名称。<br> removeProperty(propertyName)：从样式中删除给定属性。<br> setProperty(propertyName,value,priority)：将给定属性设置为相应的值，并加上优先<br>权标志（”important”或者一个空字符串）。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">myDiv.style.cssText = &quot;width: 25px; height: 100px; background-color: green&quot;;</span><br><span class="line">alert(myDiv.style.cssText);</span><br><span class="line"></span><br><span class="line">设计 length 属性的目的，就是将其与 item()方法配套使用，以便迭代在元素中定义的 CSS 属性。</span><br><span class="line">在使用 length 和 item()时，style 对象实际上就相当于一个集合，都可以使用方括号语法来代替</span><br><span class="line">item()来取得给定位置的 CSS 属性，如下面的例子所示。</span><br><span class="line">for (var i=0, len=myDiv.style.length; i &lt; len; i++)&#123;</span><br><span class="line"> alert(myDiv.style[i]); //或者 myDiv.style.item(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; CSS 规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var sheet = document.styleSheets[0];</span><br><span class="line">var rules = sheet.cssRules || sheet.rules; //取得规则列表</span><br><span class="line">var rule = rules[0]; //取得第一条规则</span><br><span class="line">alert(rule.selectorText); //&quot;div.box&quot;</span><br><span class="line">alert(rule.style.cssText); //完整的 CSS 代码</span><br><span class="line">alert(rule.style.backgroundColor); //&quot;blue&quot;</span><br><span class="line">alert(rule.style.width); //&quot;100px&quot;</span><br><span class="line">alert(rule.style.height); //&quot;200px&quot;</span><br><span class="line">/*</span><br><span class="line">使用这种方式，可以像确定元素的行内样式信息一样，确定与规则相关的样式信息。与使用元素的</span><br><span class="line">方式一样，在这种方式下也可以修改样式信息，如下面的例子所示。</span><br><span class="line">*/</span><br><span class="line">var sheet = document.styleSheets[0];</span><br><span class="line">var rules = sheet.cssRules || sheet.rules; //取得规则列表</span><br><span class="line">var rule = rules[0]; //取得第一条规则</span><br><span class="line">rule.style.backgroundColor = &quot;red&quot;</span><br><span class="line"></span><br><span class="line">//2. 创建规则</span><br><span class="line">sheet.insertRule(&quot;body &#123; background-color: silver &#125;&quot;, 0); //DOM 方法</span><br><span class="line">//3. 删除规则</span><br><span class="line">sheet.deleteRule(0); //DOM 方法</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 高程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高程笔记3-函数表达式</title>
      <link href="/2017/06/11/2017%E9%AB%98%E7%A8%8B/20170611/"/>
      <url>/2017/06/11/2017%E9%AB%98%E7%A8%8B/20170611/</url>
      
        <content type="html"><![CDATA[<p>高程笔记3</p><span id="more"></span><p>函数表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">函数表达式与其他表达式一样，在使用前必须先赋值。以下代码会导致错误。</span><br><span class="line">sayHi(); //错误：函数还不存在</span><br><span class="line">var sayHi = function()&#123;  //匿名函数</span><br><span class="line"> alert(&quot;Hi!&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>递归函数是在一个函数通过名字调用自身的情况下构成的，如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function factorial(num)&#123;</span><br><span class="line"> if (num &lt;= 1)&#123;</span><br><span class="line"> return 1;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> return num * factorial(num-1);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arguments.callee 是一个指向正在执行的函数的指针，因此可以用它来实现对函数</span><br><span class="line">的递归调用，例如</span><br><span class="line">function factorial(num)&#123;</span><br><span class="line"> if (num &lt;= 1)&#123;</span><br><span class="line"> return 1;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> return num * arguments.callee(num-1);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><pre><code>闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">function createComparisonFunction(propertyName) &#123;</span><br><span class="line"></span><br><span class="line"> return function(object1, object2)&#123;</span><br><span class="line"> var value1 = object1[propertyName];</span><br><span class="line"> var value2 = object2[propertyName];</span><br><span class="line"></span><br><span class="line"> if (value1 &lt; value2)&#123;</span><br><span class="line"> return -1;</span><br><span class="line"> &#125; else if (value1 &gt; value2)&#123;</span><br><span class="line"> return 1;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> return 0;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">作用域链的这种配置机制引出了一个值得注意的副作用，即闭包只能取得包含函数中任何变量的最</span><br><span class="line">后一个值。别忘了闭包所保存的是整个变量对象，而不是某个特殊的变量。下面这个例子可以清晰地说</span><br><span class="line">明这个问题。</span><br><span class="line">*/</span><br><span class="line">function createFunctions()&#123;</span><br><span class="line"> var result = new Array();</span><br><span class="line"> for (var i=0; i &lt; 10; i++)&#123;</span><br><span class="line"> result[i] = function()&#123;</span><br><span class="line"> return i;</span><br><span class="line"> &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> return result;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">这个函数会返回一个函数数组。表面上看，似乎每个函数都应该返自己的索引值，即位置 0 的函数</span><br><span class="line">返回 0，位置 1 的函数返回 1，以此类推。但实际上，每个函数都返回 10。因为每个函数的作用域链中</span><br><span class="line">都保存着 createFunctions() 函数的活动对象，所以它们引用的都是同一个变量 i 。 当</span><br><span class="line">createFunctions()函数返回后，变量 i 的值是 10，此时每个函数都引用着保存变量 i 的同一个变量</span><br><span class="line">对象，所以在每个函数内部 i 的值都是 10。但是，我们可以通过创建另一个匿名函数强制让闭包的行为</span><br><span class="line">符合预期，如下所示。</span><br><span class="line">*/</span><br><span class="line">function createFunctions()&#123;</span><br><span class="line"> var result = new Array();</span><br><span class="line"> for (var i=0; i &lt; 10; i++)&#123;</span><br><span class="line"> result[i] = function(num)&#123;</span><br><span class="line"> return function()&#123;</span><br><span class="line"> return num;</span><br><span class="line"> &#125;;</span><br><span class="line"> &#125;(i);</span><br><span class="line"> &#125;</span><br><span class="line"> return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>每个函数在被调用时都会自动取得两个特殊变量：this 和 arguments。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">把外部作用域中的 this 对象保存在一个闭包能够访问到的变量里，就可以让闭包访问该对象了</span><br><span class="line">var name = &quot;The Window&quot;;</span><br><span class="line">var object = &#123;</span><br><span class="line">    name : &quot;My Object&quot;,</span><br><span class="line">    getNameFunc : function()&#123;</span><br><span class="line">    var that = this;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        return that.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(object.getNameFunc()()); //&quot;My Object&quot;</span><br></pre></td></tr></table></figure><blockquote><p>内存泄漏</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function assignHandler()&#123;</span><br><span class="line"> var element = document.getElementById(&quot;someElement&quot;);</span><br><span class="line"> var id = element.id;</span><br><span class="line"></span><br><span class="line"> element.onclick = function()&#123;</span><br><span class="line"> alert(id);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> element = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模仿块级作用域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function outputNumbers(count)&#123;</span><br><span class="line"> (function () &#123;</span><br><span class="line"> for (var i=0; i &lt; count; i++)&#123;</span><br><span class="line"> alert(i);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)();</span><br><span class="line"></span><br><span class="line"> alert(i); //导致一个错误！</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>私有变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function MyObject()&#123;</span><br><span class="line"> //私有变量和私有函数</span><br><span class="line"> var privateVariable = 10;</span><br><span class="line"> function privateFunction()&#123;</span><br><span class="line"> return false;</span><br><span class="line"> &#125;</span><br><span class="line"> //特权方法</span><br><span class="line"> this.publicMethod = function ()&#123;</span><br><span class="line"> privateVariable++;</span><br><span class="line"> return privateFunction();</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br><span class="line">这个模式在构造函数内部定义了所有私有变量和函数。然后，又继续创建了能够访问这些私有成员</span><br><span class="line">的特权方法。能够在构造函数中定义特权方法，是因为特权方法作为闭包有权访问在构造函数中定义的</span><br><span class="line">所有变量和函数。对这个例子而言，变量 privateVariable 和函数 privateFunction()只能通过特</span><br><span class="line">权方法 publicMethod()来访问。在创建 MyObject 的实例后，除了使用 publicMethod()这一个途</span><br><span class="line">径外，没有任何办法可以直接访问 privateVariable 和 privateFunction()。</span><br><span class="line"></span><br><span class="line">利用私有和特权成员，可以隐藏那些不应该被直接修改的数据，例如：</span><br><span class="line">function Person(name)&#123;</span><br><span class="line"> this.getName = function()&#123;</span><br><span class="line"> return name;</span><br><span class="line"> &#125;;</span><br><span class="line"> this.setName = function (value) &#123;</span><br><span class="line"> name = value;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br><span class="line">var person = new Person(&quot;Nicholas&quot;);</span><br><span class="line">alert(person.getName()); //&quot;Nicholas&quot;</span><br><span class="line">person.setName(&quot;Greg&quot;);</span><br><span class="line">alert(person.getName()); //&quot;Greg&quot;</span><br></pre></td></tr></table></figure><p>静态私有变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line"></span><br><span class="line"> var name = &quot;&quot;;</span><br><span class="line"></span><br><span class="line"> Person = function(value)&#123;</span><br><span class="line"> name = value;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> Person.prototype.getName = function()&#123;</span><br><span class="line"> return name;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> Person.prototype.setName = function (value)&#123;</span><br><span class="line"> name = value;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">var person1 = new Person(&quot;Nicholas&quot;);</span><br><span class="line">alert(person1.getName()); //&quot;Nicholas&quot;</span><br><span class="line">person1.setName(&quot;Greg&quot;);</span><br><span class="line">alert(person1.getName()); //&quot;Greg&quot;</span><br><span class="line">var person2 = new Person(&quot;Michael&quot;);</span><br><span class="line">alert(person1.getName()); //&quot;Michael&quot;</span><br><span class="line">alert(person2.getName()); //&quot;Michael&quot;</span><br></pre></td></tr></table></figure><h3 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">模块模式通过为单例添加私有变量和特权方法能够使其得到增强，其语法形式如下：</span><br><span class="line">var singleton = function()&#123;</span><br><span class="line"></span><br><span class="line"> //私有变量和私有函数</span><br><span class="line"> var privateVariable = 10;</span><br><span class="line"></span><br><span class="line"> function privateFunction()&#123;</span><br><span class="line"> return false;</span><br><span class="line"> &#125;</span><br><span class="line"> //特权/公有方法和属性</span><br><span class="line"> return &#123;</span><br><span class="line">     publicProperty: true,</span><br><span class="line">     publicMethod : function()&#123;</span><br><span class="line">     privateVariable++;</span><br><span class="line">     return privateFunction();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">增强的模块模式</span><br><span class="line">*/</span><br><span class="line">var singleton = function()&#123;</span><br><span class="line"> //私有变量和私有函数</span><br><span class="line"> var privateVariable = 10;</span><br><span class="line"> function privateFunction()&#123;</span><br><span class="line"> return false;</span><br><span class="line"> &#125;</span><br><span class="line"> //创建对象</span><br><span class="line"> var object = new CustomType();</span><br><span class="line"> //添加特权/公有属性和方法</span><br><span class="line"> object.publicProperty = true;</span><br><span class="line"> object.publicMethod = function()&#123;</span><br><span class="line"> privateVariable++;</span><br><span class="line"> return privateFunction();</span><br><span class="line"> &#125;;</span><br><span class="line"> //返回这个对象</span><br><span class="line"> return object;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>在 JavaScript 编程中，函数表达式是一种非常有用的技术。使用函数表达式可以无须对函数命名，<br>从而实现动态编程。匿名函数，也称为拉姆达函数，是一种使用 JavaScript 函数的强大方式。以下总结<br>了函数表达式的特点。<br> 函数表达式不同于函数声明。函数声明要求有名字，但函数表达式不需要。没有名字的函数表<br>达式也叫做匿名函数。<br> 在无法确定如何引用函数的情况下，递归函数就会变得比较复杂；<br> 递归函数应该始终使用 arguments.callee 来递归地调用自身，不要使用函数名——函数名可<br>能会发生变化。<br>当在函数内部定义了其他函数时，就创建了闭包。闭包有权访问包含函数内部的所有变量，原理<br>如下。<br> 在后台执行环境中，闭包的作用域链包含着它自己的作用域、包含函数的作用域和全局作用域。<br> 通常，函数的作用域及其所有变量都会在函数执行结束后被销毁。<br> 但是，当函数返回了一个闭包时，这个函数的作用域将会一直在内存中保存到闭包不存在为止。<br>使用闭包可以在 JavaScript 中模仿块级作用域（JavaScript 本身没有块级作用域的概念），要点如下。<br> 创建并立即调用一个函数，这样既可以执行其中的代码，又不会在内存中留下对该函数的引用。<br> 结果就是函数内部的所有变量都会被立即销毁——除非将某些变量赋值给了包含作用域（即外<br>部作用域）中的变量。<br>闭包还可以用于在对象中创建私有变量，相关概念和要点如下。<br> 即使 JavaScript 中没有正式的私有对象属性的概念，但可以使用闭包来实现公有方法，而通过公<br>有方法可以访问在包含作用域中定义的变量。<br> 有权访问私有变量的公有方法叫做特权方法。<br> 可以使用构造函数模式、原型模式来实现自定义类型的特权方法，也可以使用模块模式、增强<br>的模块模式来实现单例的特权方法。<br>JavaScript 中的函数表达式和闭包都是极其有用的特性，利用它们可以实现很多功能。不过，因为<br>创建闭包必须维护额外的作用域，所以过度使用它们可能会占用大量内存。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 高程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高程笔记2-面向对象的程序设计</title>
      <link href="/2017/06/10/2017%E9%AB%98%E7%A8%8B/20170610/"/>
      <url>/2017/06/10/2017%E9%AB%98%E7%A8%8B/20170610/</url>
      
        <content type="html"><![CDATA[<p>高程笔记二</p><span id="more"></span><h1 id="面向对象的程序设计"><a href="#面向对象的程序设计" class="headerlink" title="面向对象的程序设计"></a>面向对象的程序设计</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><blockquote><p> [[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特<br>性，或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性，它们的<br>这个特性默认值为 true。<br> [[Enumerable]]：表示能否通过 for-in 循环返回属性。像前面例子中那样直接在对象上定<br>义的属性，它们的这个特性默认值为 true。<br> [[Writable]]：表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的<br>这个特性默认值为 true。<br> [[Value]]：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，<br>把新值保存在这个位置。这个特性的默认值为 undefined。</p></blockquote><blockquote><p>要修改属性默认的特性，必须使用ECMAScript 5的Object.defineProperty()方法。这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。其中，描述符（descriptor）对象的属性必须是：configurable、enumerable、writable 和 value。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;&#125;;</span><br><span class="line">Object.defineProperty(person, &quot;name&quot;, &#123;</span><br><span class="line"> writable: false,</span><br><span class="line"> value: &quot;Nicholas&quot;</span><br><span class="line">&#125;);</span><br><span class="line">alert(person.name); //&quot;Nicholas&quot;</span><br><span class="line">person.name = &quot;Greg&quot;;</span><br><span class="line">alert(person.name); //&quot;Nicholas&quot;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">这个例子创建了一个名为 name 的属性，它的值&quot;Nicholas&quot;是只读的。这个属性的值是不可修改</span><br><span class="line">的，如果尝试为它指定新值，则在非严格模式下，赋值操作将被忽略；在严格模式下，赋值操作将会导</span><br><span class="line">致抛出错误。</span><br><span class="line">类似的规则也适用于不可配置的属性。例如：</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">var person = &#123;&#125;;</span><br><span class="line">Object.defineProperty(person, &quot;name&quot;, &#123;</span><br><span class="line"> configurable: false,</span><br><span class="line"> value: &quot;Nicholas&quot;</span><br><span class="line">&#125;);</span><br><span class="line">alert(person.name); //&quot;Nicholas&quot;</span><br><span class="line">delete person.name;</span><br><span class="line">alert(person.name); //&quot;Nicholas&quot;</span><br></pre></td></tr></table></figure><h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var book = &#123;</span><br><span class="line"> _year: 2004,</span><br><span class="line"> edition: 1</span><br><span class="line">&#125;;</span><br><span class="line">Object.defineProperty(book, &quot;year&quot;, &#123;</span><br><span class="line"> get: function()&#123;</span><br><span class="line"> return this._year;</span><br><span class="line"> &#125;,</span><br><span class="line"> set: function(newValue)&#123;</span><br><span class="line"> if (newValue &gt; 2004) &#123;</span><br><span class="line"> this._year = newValue;</span><br><span class="line"> this.edition += newValue - 2004;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br><span class="line">book.year = 2005;</span><br><span class="line">alert(book.edition); //2</span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote><p>工厂模式是软件工程领域一种广为人知的设计模式，这种模式抽象了创建具体对象的过程（本书后<br>面还将讨论其他设计模式及其在 JavaScript 中的实现）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(name, age, job)&#123;</span><br><span class="line"> var o = new Object();</span><br><span class="line"> o.name = name;</span><br><span class="line"> o.age = age;</span><br><span class="line"> o.job = job;</span><br><span class="line"> o.sayName = function()&#123;</span><br><span class="line"> alert(this.name);</span><br><span class="line"> &#125;;</span><br><span class="line"> return o;</span><br><span class="line">&#125;</span><br><span class="line">var person1 = createPerson(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</span><br><span class="line">var person2 = createPerson(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</span><br></pre></td></tr></table></figure><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">我们创建的每个函数都有一个 prototype（原型）属性，这个属性是一个指针，指向一个对象，</span><br><span class="line">而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。如果按照字面意思来理解，那</span><br><span class="line">么 prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以</span><br><span class="line">让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是</span><br><span class="line">可以将这些信息直接添加到原型对象中，如下面的例子所示。</span><br><span class="line">function Person()&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = &quot;Nicholas&quot;;</span><br><span class="line">Person.prototype.age = 29;</span><br><span class="line">Person.prototype.job = &quot;Software Engineer&quot;;</span><br><span class="line">Person.prototype.sayName = function()&#123;</span><br><span class="line"> alert(this.name);</span><br><span class="line">&#125;;</span><br><span class="line">var person1 = new Person();</span><br><span class="line">person1.sayName(); //&quot;Nicholas&quot;</span><br></pre></td></tr></table></figure><h3 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">创建自定义类型的最常见方式，就是组合使用构造函数模式与原型模式。构造函数模式用于定义实</span><br><span class="line">例属性，而原型模式用于定义方法和共享的属性。结果，每个实例都会有自己的一份实例属性的副本，</span><br><span class="line">但同时又共享着对方法的引用，最大限度地节省了内存。另外，这种混成模式还支持向构造函数传递参</span><br><span class="line">数；可谓是集两种模式之长。下面的代码重写了前面的例子。</span><br><span class="line">function Person(name, age, job)&#123;</span><br><span class="line"> this.name = name;</span><br><span class="line"> this.age = age;</span><br><span class="line"> this.job = job;</span><br><span class="line"> this.friends = [&quot;Shelby&quot;, &quot;Court&quot;];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line"> constructor : Person,</span><br><span class="line"> sayName : function()&#123;</span><br><span class="line"> alert(this.name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</span><br><span class="line">var person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</span><br><span class="line">person1.friends.push(&quot;Van&quot;);</span><br><span class="line">alert(person1.friends); //&quot;Shelby,Count,Van&quot;</span><br><span class="line">alert(person2.friends); //&quot;Shelby,Count&quot;</span><br><span class="line">alert(person1.friends === person2.friends); //false</span><br><span class="line">alert(person1.sayName === person2.sayName); //true</span><br></pre></td></tr></table></figure><h3 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">有其他 OO 语言经验的开发人员在看到独立的构造函数和原型时，很可能会感到非常困惑。动态原</span><br><span class="line">型模式正是致力于解决这个问题的一个方案，它把所有信息都封装在了构造函数中，而通过在构造函数</span><br><span class="line">中初始化原型（仅在必要的情况下），又保持了同时使用构造函数和原型的优点。换句话说，可以通过</span><br><span class="line">检查某个应该存在的方法是否有效，来决定是否需要初始化原型。来看一个例子。</span><br><span class="line">function Person(name, age, job)&#123;</span><br><span class="line"> //属性</span><br><span class="line"> this.name = name;</span><br><span class="line"> this.age = age;</span><br><span class="line"> this.job = job;</span><br><span class="line"> //方法</span><br><span class="line"> if (typeof this.sayName != &quot;function&quot;)&#123;</span><br><span class="line">    Person.prototype.sayName = function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">var friend = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</span><br><span class="line">friend.sayName();</span><br></pre></td></tr></table></figure><h2 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">通常，在前述的几种模式都不适用的情况下，可以使用寄生（parasitic）构造函数模式。这种模式</span><br><span class="line">的基本思想是创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象；但</span><br><span class="line">从表面上看，这个函数又很像是典型的构造函数。下面是一个例子。</span><br><span class="line">function Person(name, age, job)&#123;</span><br><span class="line"> var o = new Object();</span><br><span class="line"> o.name = name;</span><br><span class="line"> o.age = age;</span><br><span class="line"> o.job = job;</span><br><span class="line"> o.sayName = function()&#123;</span><br><span class="line"> alert(this.name);</span><br><span class="line"> &#125;;</span><br><span class="line"> return o;</span><br><span class="line">&#125;</span><br><span class="line">var friend = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</span><br><span class="line">friend.sayName(); //&quot;Nicholas&quot;</span><br></pre></td></tr></table></figure><h3 id="原型链的问题"><a href="#原型链的问题" class="headerlink" title="原型链的问题"></a>原型链的问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">原型链虽然很强大，可以用它来实现继承，但它也存在一些问题。其中，最主要的问题来自包含引</span><br><span class="line">用类型值的原型。想必大家还记得，我们前面介绍过包含引用类型值的原型属性会被所有实例共享；而</span><br><span class="line">这也正是为什么要在构造函数中，而不是在原型对象中定义属性的原因。在通过原型来实现继承时，原</span><br><span class="line">型实际上会变成另一个类型的实例。于是，原先的实例属性也就顺理成章地变成了现在的原型属性了。</span><br><span class="line">下列代码可以用来说明这个问题。</span><br><span class="line">function SuperType()&#123;</span><br><span class="line"> this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</span><br><span class="line"> &#125;</span><br><span class="line">function SubType()&#123;</span><br><span class="line">&#125;</span><br><span class="line">//继承了 SuperType</span><br><span class="line">SubType.prototype = new SuperType();</span><br><span class="line">var instance1 = new SubType();</span><br><span class="line">instance1.colors.push(&quot;black&quot;);</span><br><span class="line">alert(instance1.colors); //&quot;red,blue,green,black&quot;</span><br><span class="line">var instance2 = new SubType();</span><br><span class="line">alert(instance2.colors); //&quot;red,blue,green,black&quot;</span><br></pre></td></tr></table></figure><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">组合继承（combination inheritance），有时候也叫做伪经典继承，指的是将原型链和借用构造函数的</span><br><span class="line">技术组合到一块，从而发挥二者之长的一种继承模式。其背后的思路是使用原型链实现对原型属性和方</span><br><span class="line">法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数</span><br><span class="line">复用，又能够保证每个实例都有它自己的属性。下面来看一个例子。</span><br><span class="line">function SuperType(name)&#123;</span><br><span class="line"> this.name = name;</span><br><span class="line"> this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = function()&#123;</span><br><span class="line"> alert(this.name);</span><br><span class="line"> &#125;;</span><br><span class="line">function SubType(name, age)&#123;</span><br><span class="line"> //继承属性</span><br><span class="line"> SuperType.call(this, name);</span><br><span class="line"></span><br><span class="line"> this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">//继承方法</span><br><span class="line">SubType.prototype = new SuperType();</span><br><span class="line">SubType.prototype.constructor = SubType;</span><br><span class="line">SubType.prototype.sayAge = function()&#123;</span><br><span class="line"> alert(this.age);</span><br><span class="line">&#125;;</span><br><span class="line">var instance1 = new SubType(&quot;Nicholas&quot;, 29);</span><br><span class="line">instance1.colors.push(&quot;black&quot;);</span><br><span class="line">alert(instance1.colors); //&quot;red,blue,green,black&quot;</span><br><span class="line">instance1.sayName(); //&quot;Nicholas&quot;;</span><br><span class="line">instance1.sayAge(); //29</span><br><span class="line">var instance2 = new SubType(&quot;Greg&quot;, 27);</span><br><span class="line">alert(instance2.colors); //&quot;red,blue,green&quot;</span><br><span class="line">instance2.sayName(); //&quot;Greg&quot;;</span><br><span class="line">instance2.sayAge(); //27</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line"> name: &quot;Nicholas&quot;,</span><br><span class="line"> friends: [&quot;Shelby&quot;, &quot;Court&quot;, &quot;Van&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">var anotherPerson = object(person);</span><br><span class="line">anotherPerson.name = &quot;Greg&quot;;</span><br><span class="line">anotherPerson.friends.push(&quot;Rob&quot;);</span><br><span class="line">var yetAnotherPerson = object(person);</span><br><span class="line">yetAnotherPerson.name = &quot;Linda&quot;;</span><br><span class="line">yetAnotherPerson.friends.push(&quot;Barbie&quot;);</span><br><span class="line">alert(person.friends); //&quot;Shelby,Court,Van,Rob,Barbie&quot;</span><br></pre></td></tr></table></figure><blockquote><p>ECMAScript 5 通过新增 Object.create()方法规范化了原型式继承。这个方法接收两个参数：一<br>个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象。在传入一个参数的情况下，<br>Object.create()与 object()方法的行为相同。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line"> name: &quot;Nicholas&quot;,</span><br><span class="line"> friends: [&quot;Shelby&quot;, &quot;Court&quot;, &quot;Van&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">var anotherPerson = Object.create(person);</span><br><span class="line">anotherPerson.name = &quot;Greg&quot;;</span><br><span class="line">anotherPerson.friends.push(&quot;Rob&quot;);</span><br><span class="line"></span><br><span class="line">var yetAnotherPerson = Object.create(person);</span><br><span class="line">yetAnotherPerson.name = &quot;Linda&quot;;</span><br><span class="line">yetAnotherPerson.friends.push(&quot;Barbie&quot;);</span><br><span class="line">alert(person.friends); //&quot;Shelby,Court,Van,Rob,Barbie&quot;</span><br></pre></td></tr></table></figure><h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function SuperType(name)&#123;</span><br><span class="line"> this.name = name;</span><br><span class="line"> this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = function()&#123;</span><br><span class="line"> alert(this.name);</span><br><span class="line">&#125;;</span><br><span class="line">function SubType(name, age)&#123;</span><br><span class="line"> SuperType.call(this, name);</span><br><span class="line"></span><br><span class="line"> this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(SubType, SuperType);</span><br><span class="line">SubType.prototype.sayAge = function()&#123;</span><br><span class="line"> alert(this.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>ECMAScript 支持面向对象（OO）编程，但不使用类或者接口。对象可以在代码执行过程中创建和<br>增强，因此具有动态性而非严格定义的实体。在没有类的情况下，可以采用下列模式创建对象。<br> 工厂模式，使用简单的函数创建对象，为对象添加属性和方法，然后返回对象。这个模式后来<br>被构造函数模式所取代。<br> 构造函数模式，可以创建自定义引用类型，可以像创建内置对象实例一样使用 new 操作符。不<br>过，构造函数模式也有缺点，即它的每个成员都无法得到复用，包括函数。由于函数可以不局<br>限于任何对象（即与对象具有松散耦合的特点），因此没有理由不在多个对象间共享函数。<br> 原型模式，使用构造函数的 prototype 属性来指定那些应该共享的属性和方法。组合使用构造<br>函数模式和原型模式时，使用构造函数定义实例属性，而使用原型定义共享的属性和方法。<br>JavaScript 主要通过原型链实现继承。原型链的构建是通过将一个类型的实例赋值给另一个构造函<br>数的原型实现的。这样，子类型就能够访问超类型的所有属性和方法，这一点与基于类的继承很相似。<br>原型链的问题是对象实例共享所有继承的属性和方法，因此不适宜单独使用。解决这个问题的技术是借<br>用构造函数，即在子类型构造函数的内部调用超类型构造函数。这样就可以做到每个实例都具有自己的<br>属性，同时还能保证只使用构造函数模式来定义类型。使用最多的继承模式是组合继承，这种模式使用<br>原型链继承共享的属性和方法，而通过借用构造函数继承实例属性。<br>此外，还存在下列可供选择的继承模式。<br> 原型式继承，可以在不必预先定义构造函数的情况下实现继承，其本质是执行对给定对象的浅<br>复制。而复制得到的副本还可以得到进一步改造。<br> 寄生式继承，与原型式继承非常相似，也是基于某个对象或某些信息创建一个对象，然后增强<br>对象，最后返回对象。为了解决组合继承模式由于多次调用超类型构造函数而导致的低效率问<br>题，可以将这个模式与组合继承一起使用。<br> 寄生组合式继承，集寄生式继承和组合继承的优点与一身，是实现基于类型继承的最有效方式。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 高程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高程笔记1</title>
      <link href="/2017/06/09/2017%E9%AB%98%E7%A8%8B/20170609/"/>
      <url>/2017/06/09/2017%E9%AB%98%E7%A8%8B/20170609/</url>
      
        <content type="html"><![CDATA[<p>高程笔记一</p><span id="more"></span><blockquote><p>JavaScript 是一种专为与网页交互而设计的脚本语言，由下列三个不同的部分组成：<br>ECMAScript，由 ECMA-262 定义，提供核心语言功能；<br>文档对象模型（DOM），提供访问和操作网页内容的方法和接口；<br>浏览器对象模型（BOM），提供与浏览器交互的方法和接口。</p></blockquote><pre><code>JavaScript 的这三个组成部分，在当前五个主要浏览器（IE、Firefox、Chrome、Safari 和 Opera）中都得到了不同程度的支持。其中，所有浏览器对 ECMAScript 第 3 版的支持大体上都还不错，而对ECMAScript 5 的支持程度越来越高，但对 DOM 的支持则彼此相差比较多。对已经正式纳入 HTML5 标准的 BOM 来说，尽管各浏览器都实现了某些众所周知的共同特性，但其他特性还是会因浏览器而异。</code></pre><h4 id="lt-script-gt-定义了下列-6-个属性。"><a href="#lt-script-gt-定义了下列-6-个属性。" class="headerlink" title="&lt;script&gt;定义了下列 6 个属性。"></a><code>&lt;script&gt;</code>定义了下列 6 个属性。</h4><pre><code> async：可选。表示应该立即下载脚本，但不应妨碍页面中的其他操作， 比如下载其他资源或等待加载其他脚本。只对外部脚本文件有效。 charset：可选。表示通过src属性指定的代码的字符集。由于大多数浏览器会忽略它的值，因此这个属性很少有人用。 defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。 只对外部脚本文件有效。IE7 及更早版本对嵌入脚本也支持这个属性。 language：已废弃。原来用于表示编写代码使用的脚本语言（如JavaScript、JavaScript1.2或VBScript）。大多数浏览器会忽略这个属性，因此也没有必要再用了。 src：可选。表示包含要执行代码的外部文件。 type：可选。可以看成是language的替代属性；表示编写代码使用的脚本语言的内容类型（也称为 MIME 类型）。虽然 text/javascript 和 text/ecmascript 都已经不被推荐使用，但人们一直以来使用的都还是text/javascript。实际上，服务器在传送JavaScript文件时使用的MIME类型通常是application/x–javascript，但在type中设置这个值却可能导致脚本被忽略。另外，在非IE浏览器中还可以使用以下值：application/javascript和application/ecmascript。考虑到约定俗成和最大限度的浏览器兼容性，目前type属性的值依旧还是text/javascript。不过，这个属性并不是必需的，如果没有指定这个属性，则其默认值仍为text/javascript</code></pre><h4 id="XHTML运行script"><a href="#XHTML运行script" class="headerlink" title="XHTML运行script"></a>XHTML运行script</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;&lt;![CDATA[</span><br><span class="line"> function compare(a, b) &#123;</span><br><span class="line"> if (a &lt; b) &#123;</span><br><span class="line"> alert(&quot;A is less than B&quot;);</span><br><span class="line"> &#125; else if (a &gt; b) &#123;</span><br><span class="line"> alert(&quot;A is greater than B&quot;);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> alert(&quot;A is equal to B&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">]]&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="html文档模式"><a href="#html文档模式" class="headerlink" title="html文档模式"></a>html文档模式</h4><blockquote><p>标准模式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML 4.01 严格型 --&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;</span><br><span class="line">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;!-- XHTML 1.0 严格型 --&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC</span><br><span class="line">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span><br><span class="line">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</span><br><span class="line">&lt;!-- HTML 5 --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>非标准模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML 4.01 过渡型 --&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC</span><br><span class="line">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><br><span class="line">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;!-- HTML 4.01 框架集型 --&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC</span><br><span class="line">&quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot;</span><br><span class="line">&quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;</span><br><span class="line">&lt;!-- XHTML 1.0 过渡型 --&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC</span><br><span class="line">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span><br><span class="line">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;!-- XHTML 1.0 框架集型 --&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC</span><br><span class="line">&quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot;</span><br><span class="line">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;</span><br></pre></td></tr></table></figure><p>ECMAScript 中有 5 种简单数据类型（也称为基本数据类型）：Undefined、Null、Boolean、Number<br>和 String。</p><blockquote><p>3 个函数可以把非数值转换为数值：Number()、parseInt()和parseFloat()。第一个函数，即转型函数Number()可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值。这 3 个函数对于同样的输入会有返回不同的结果。<br>Number()函数的转换规则如下。<br> 如果是 Boolean 值，true 和 false 将分别被转换为 1 和 0。<br> 如果是数字值，只是简单的传入和返回。<br> 如果是 null 值，返回 0。<br> 如果是 undefined，返回 NaN。</p></blockquote><h2 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h2><p>有 3 个函数可以把非数值转换为数值：Number()、parseInt()和 parseFloat()。第一个函数，即转型函数Number()可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值。这3个函数对于同样的输入会有返回不同的结果。Number()函数的转换规则如下。<br> 如果是 Boolean 值，true 和 false 将分别被转换为 1 和 0。<br> 如果是数字值，只是简单的传入和返回。<br> 如果是 null 值，返回 0。<br> 如果是 undefined，返回 NaN。<br> 如果是字符串，遵循下列规则：</p><blockquote><p> 如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即”1”会变成1，”123”会变成123，而”011”会变成11（注意：前导的零被忽略了）；<br> 如果字符串中包含有效的浮点格式，如”1.1”，则将其转换为对应的浮点数值 同样，也会忽略前导零）；<br> 如果字符串中包含有效的十六进制格式，例如”0xf”，则将其转换为相同大小的 十进制整数值；<br> 如果字符串是空的（不包含任何字符），则将其转换为 0；<br> 如果字符串中包含除上述格式之外的字符，则将其转换为 NaN。<br> 如果是对象，则调用对象的valueOf()方法，然后依照前面的规则转换返回的值。如果转换的结果是NaN，则调用对象的toString()方法，然后再次依照前面的规则转换返回的字符串值。根据这么多的规则使用Number()把各种数据类型转换为数值确实有点复杂。下面还是给出几个具体的例子吧。<br>var num1 &#x3D; Number(“Hello world!”); &#x2F;&#x2F;NaN<br>var num2 &#x3D; Number(“”); &#x2F;&#x2F;0<br>var num3 &#x3D; Number(“000011”); &#x2F;&#x2F;11</p></blockquote><h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var num1 = parseInt(&quot;10&quot;, 2); //2 （按二进制解析）</span><br><span class="line">var num2 = parseInt(&quot;10&quot;, 8); //8 （按八进制解析）</span><br><span class="line">var num3 = parseInt(&quot;10&quot;, 10); //10 （按十进制解析）</span><br><span class="line">var num4 = parseInt(&quot;10&quot;, 16); //16 （按十六进制解析</span><br></pre></td></tr></table></figure><h3 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat"></a>parseFloat</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var num1 = parseFloat(&quot;1234blue&quot;); //1234 （整数）</span><br><span class="line">var num2 = parseFloat(&quot;0xA&quot;); //0</span><br><span class="line">var num3 = parseFloat(&quot;22.5&quot;); //22.5</span><br><span class="line">var num4 = parseFloat(&quot;22.34.5&quot;); //22.34</span><br><span class="line">var num5 = parseFloat(&quot;0908.5&quot;); //908.5</span><br><span class="line">var num6 = parseFloat(&quot;3.125e7&quot;); //31250000</span><br></pre></td></tr></table></figure><h3 id="字符String"><a href="#字符String" class="headerlink" title="字符String"></a>字符String</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\n 换行</span><br><span class="line">\t 制表</span><br><span class="line">\b 空格</span><br><span class="line">\r 回车</span><br><span class="line">\f 进纸</span><br><span class="line">\\ 斜杠</span><br><span class="line">\&#x27; 单引号（&#x27;），在用单引号表示的字符串中使用。例如：&#x27;He said, \&#x27;hey.\&#x27;&#x27;</span><br><span class="line">\&quot; 双引号（&quot;），在用双引号表示的字符串中使用。例如：&quot;He said, \&quot;hey.\&quot;&quot;</span><br><span class="line">\xnn 以十六进制代码nn表示的一个字符（其中n为0～F）。例如，\x41表示&quot;A&quot;</span><br><span class="line">\unnnn 以十六进制代码nnnn表示的一个Unicode字符（其中n为0～F）。例如，\u03a3表示希腊字符Σ</span><br></pre></td></tr></table></figure><h3 id="求模运算"><a href="#求模运算" class="headerlink" title="求模运算"></a>求模运算</h3><blockquote><p>求模（余数）操作符由一个百分号（%）表示，用法如下：<br>var result &#x3D; 26 % 5; &#x2F;&#x2F; 等于 1<br>与另外两个乘性操作符类似，求模操作符会遵循下列特殊规则来处理特殊的值：<br> 如果操作数都是数值，执行常规的除法计算，返回除得的余数；<br> 如果被除数是无穷大值而除数是有限大的数值，则结果是 NaN；<br> 如果被除数是有限大的数值而除数是零，则结果是 NaN；<br> 如果是 Infinity 被 Infinity 除，则结果是 NaN；<br> 如果被除数是有限大的数值而除数是无穷大的数值，则结果是被除数；<br> 如果被除数是零，则结果是零；<br> 如果有一个操作数不是数值，则在后台调用 Number()将其转换为数值，然后再应用上面的规则。</p></blockquote><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var result1 = 5 - true; // 4，因为 true 被转换成了 1</span><br><span class="line">var result2 = NaN - 1; // NaN</span><br><span class="line">var result3 = 5 - 3; // 2</span><br><span class="line">var result4 = 5 - &quot;&quot;; // 5，因为&quot;&quot; 被转换成了 0</span><br><span class="line">var result5 = 5 - &quot;2&quot;; // 3，因为&quot;2&quot;被转换成了 2</span><br><span class="line">var result6 = 5 - null; // 5，因为 null 被转换成了 0</span><br></pre></td></tr></table></figure><h3 id="全等和不全等"><a href="#全等和不全等" class="headerlink" title="全等和不全等"></a>全等和不全等</h3><p>记住：null &#x3D;&#x3D; undefined 会返回 true，因为它们是类似的值；但 null &#x3D;&#x3D;&#x3D; undefined 会返回 false，因为它们是不同类型的值</p><h4 id="每个主要算术操作符（以及个别的其他操作符）都有对应的复合赋值操作符。这些操作符如下所示："><a href="#每个主要算术操作符（以及个别的其他操作符）都有对应的复合赋值操作符。这些操作符如下所示：" class="headerlink" title="每个主要算术操作符（以及个别的其他操作符）都有对应的复合赋值操作符。这些操作符如下所示："></a>每个主要算术操作符（以及个别的其他操作符）都有对应的复合赋值操作符。这些操作符如下所示：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 乘/赋值（*=）；</span><br><span class="line"> 除/赋值（/=）；</span><br><span class="line"> 模/赋值（%=）；</span><br><span class="line"> 加/赋值（+=）；</span><br><span class="line"> 减/赋值（=）；</span><br><span class="line"> 左移/赋值（&lt;&lt;=）；</span><br><span class="line"> 有符号右移/赋值（&gt;&gt;=）；</span><br></pre></td></tr></table></figure><h1 id="for-in语句"><a href="#for-in语句" class="headerlink" title="for-in语句"></a>for-in语句</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for-in 语句是一种精准的迭代语句，可以用来枚举对象的属性。以下是 for-in 语句的语法：</span><br><span class="line">for (property in expression) statement</span><br><span class="line">下面是一个示例：</span><br><span class="line">for (var propName in window) &#123;</span><br><span class="line"> document.write(propName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ECMAScript 对象的属性没有顺序。因此，通过 for-in 循环输出的属性名的顺序是不可预测的。<br>具体来讲，所有属性都会被返回一次，但返回的先后次序可能会因浏览器而异。</p><h3 id="js没有重载"><a href="#js没有重载" class="headerlink" title="js没有重载"></a>js没有重载</h3><blockquote><p>ECMAScript 函数不能像传统意义上那样实现重载。而在其他语言（如Java）中，可以为一个函数编写两个定义，只要这两个定义的签名（接受的参数的类型和数量）不同即可。如前所述，ECMAScirpt函数没有签名，因为其参数是由包含零或多个值的数组来表示的。而没有函数签名，真正的重载是不可能做到的。</p></blockquote><h1 id="基本类型和引用类型的值"><a href="#基本类型和引用类型的值" class="headerlink" title="基本类型和引用类型的值"></a>基本类型和引用类型的值</h1><blockquote><p>ECMAScript 变量可能包含两种不同数据类型的值：<strong>基本类型值和引用类型值</strong>。基本类型值指的是简单的数据段，而引用类型值指那些可能由多个值构成的对象。在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。第 3 章讨论了 5 种基本数据类型：<strong>Undefined、Null、Boolean、Number 和 String</strong>。这 5 种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。<br><strong>引用类型的值是保存在内存中的对象</strong>。与其他语言不同，JavaScript不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的①。</p></blockquote><h2 id="在-Web-浏览器中，全局执行环境被认为是-window-对象"><a href="#在-Web-浏览器中，全局执行环境被认为是-window-对象" class="headerlink" title="在 Web 浏览器中，全局执行环境被认为是 window 对象"></a>在 Web 浏览器中，全局执行环境被认为是 window 对象</h2><h3 id="数组的栈方法"><a href="#数组的栈方法" class="headerlink" title="数组的栈方法"></a>数组的栈方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var colors = new Array(); // 创建一个数组</span><br><span class="line">var count = colors.push(&quot;red&quot;, &quot;green&quot;); // 推入两项</span><br><span class="line">alert(count); //2</span><br><span class="line">count = colors.push(&quot;black&quot;); // 推入另一项</span><br><span class="line">alert(count); //3</span><br><span class="line">var item = colors.pop(); // 取得最后一项</span><br><span class="line">alert(item); //&quot;black&quot;</span><br><span class="line">alert(colors.length); //2</span><br></pre></td></tr></table></figure><h3 id="数组的重排序方法"><a href="#数组的重排序方法" class="headerlink" title="数组的重排序方法"></a>数组的重排序方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">数组中已经存在两个可以直接用来重排序的方法：reverse()和 sort()。有读者可能猜到了，</span><br><span class="line">reverse()方法会反转数组项的顺序。请看下面这个例子。</span><br><span class="line">var values = [1, 2, 3, 4, 5];</span><br><span class="line">values.reverse();</span><br><span class="line">alert(values); //5,4,3,2,1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//自定义排序</span><br><span class="line">function compare(value1, value2) &#123;</span><br><span class="line"> if (value1 &lt; value2) &#123;</span><br><span class="line"> return 1;</span><br><span class="line"> &#125; else if (value1 &gt; value2) &#123;</span><br><span class="line"> return -1;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> return 0;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">var values = [0, 1, 5, 10, 15];</span><br><span class="line">values.sort(compare);</span><br><span class="line">alert(values); // 15,10,5,1,0</span><br></pre></td></tr></table></figure><h3 id="数组的splice"><a href="#数组的splice" class="headerlink" title="数组的splice"></a>数组的splice</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];</span><br><span class="line">var removed = colors.splice(0,1); // 删除第一项</span><br><span class="line">alert(colors); // green,blue</span><br><span class="line">alert(removed); // red，返回的数组中只包含一项</span><br><span class="line">removed = colors.splice(1, 0, &quot;yellow&quot;, &quot;orange&quot;); // 从位置 1 开始插入两项</span><br><span class="line">alert(colors); // green,yellow,orange,blue</span><br><span class="line">alert(removed); // 返回的是一个空数组</span><br><span class="line">removed = colors.splice(1, 1, &quot;red&quot;, &quot;purple&quot;); // 插入两项，删除一项</span><br><span class="line">alert(colors); // green,red,purple,orange,blue</span><br><span class="line">alert(removed); // yellow，返回的数组中只包含一项</span><br></pre></td></tr></table></figure><h3 id="数组迭代方法"><a href="#数组迭代方法" class="headerlink" title="数组迭代方法"></a>数组迭代方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。</span><br><span class="line"> filter()：对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组。</span><br><span class="line"> forEach()：对数组中的每一项运行给定函数。这个方法没有返回值。</span><br><span class="line"> map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</span><br><span class="line"> some()：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。</span><br><span class="line"></span><br><span class="line">var numbers = [1,2,3,4,5,4,3,2,1];</span><br><span class="line">var everyResult = numbers.every(function(item, index, array)&#123;</span><br><span class="line"> return (item &gt; 2);</span><br><span class="line">&#125;);</span><br><span class="line">alert(everyResult); //false</span><br><span class="line">var someResult = numbers.some(function(item, index, array)&#123;</span><br><span class="line"> return (item &gt; 2);</span><br><span class="line">&#125;);</span><br><span class="line">alert(someResult); //true</span><br></pre></td></tr></table></figure><h3 id="数组的归并方法"><a href="#数组的归并方法" class="headerlink" title="数组的归并方法"></a>数组的归并方法</h3><blockquote><p>这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。传给reduce()和 reduceRight()的函数接收4个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用 reduce()方法可以执行求数组中所有值之和的操作，比如：</span><br><span class="line">var values = [1,2,3,4,5];</span><br><span class="line">var sum = values.reduce(function(prev, cur, index, array)&#123;</span><br><span class="line"> return prev + cur;</span><br><span class="line">&#125;);</span><br><span class="line">alert(sum); //15</span><br></pre></td></tr></table></figure><h3 id="js没有重载（深入理解）"><a href="#js没有重载（深入理解）" class="headerlink" title="js没有重载（深入理解）"></a>js没有重载（深入理解）</h3><p>将函数名想象为指针，也有助于理解为什么 ECMAScript 中没有函数重载的概念。以下是曾在第 3<br>章使用过的例子。</p><h3 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h3><blockquote><p>本节到目前为止，我们一直没有对函数声明和函数表达式加以区别。而实际上，解析器在向执行环<br>境中加载数据时，对函数声明和函数表达式并非一视同仁。解析器会率先读取函数声明，并使其在执行<br>任何代码之前可用（可以访问）；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真<br>正被解释执行。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alert(sum(10,10));</span><br><span class="line">function sum(num1, num2)&#123;</span><br><span class="line"> return num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">下面这个报错</span><br><span class="line">alert(sum(10,10));</span><br><span class="line">var sum = function(num1, num2)&#123;</span><br><span class="line"> return num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="作为值的函数"><a href="#作为值的函数" class="headerlink" title="作为值的函数"></a>作为值的函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function callSomeFunction(someFunction, someArgument)&#123;</span><br><span class="line"> return someFunction(someArgument);</span><br><span class="line">&#125;</span><br><span class="line">这个函数接受两个参数。第一个参数应该是一个函数，第二个参数应该是要传递给该函数的一个值。</span><br><span class="line">然后，就可以像下面的例子一样传递函数了。</span><br><span class="line">function add10(num)&#123;</span><br><span class="line"> return num + 10;</span><br><span class="line">&#125;</span><br><span class="line">var result1 = callSomeFunction(add10, 10);</span><br><span class="line">alert(result1); //20</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function factorial(num)&#123;</span><br><span class="line"> if (num &lt;=1) &#123;</span><br><span class="line"> return 1;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> return num * factorial(num-1)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">为了消除这种紧密耦合的现象，可以像下面这样使用 arguments.callee。</span><br><span class="line">function factorial(num)&#123;</span><br><span class="line"> if (num &lt;=1) &#123;</span><br><span class="line"> return 1;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> return num * arguments.callee(num-1)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的apply和bind"><a href="#函数的apply和bind" class="headerlink" title="函数的apply和bind"></a>函数的apply和bind</h3><blockquote><p>每个函数都包含两个非继承而来的方法：apply()和 call()。这两个方法的用途都是在特定的作<br>用域中调用函数，实际上等于设置函数体内 this 对象的值。首先，apply()方法接收两个参数：一个<br>是在其中运行函数的作用域，另一个是参数数组。其中，第二个参数可以是 Array 的实例，也可以是<br>arguments 对象。例如：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function sum(num1, num2)&#123;</span><br><span class="line"> return num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line">function callSum1(num1, num2)&#123;</span><br><span class="line"> return sum.apply(this, arguments); // 传入 arguments 对象</span><br><span class="line">&#125;</span><br><span class="line">function callSum2(num1, num2)&#123;</span><br><span class="line"> return sum.apply(this, [num1, num2]); // 传入数组</span><br><span class="line">&#125;</span><br><span class="line">alert(callSum1(10,10)); //20</span><br><span class="line">alert(callSum2(10,10)); //20</span><br></pre></td></tr></table></figure><blockquote><p>call()方法与 apply()方法的作用相同，它们的区别仅在于接收参数的方式不同。对于 call()<br>方法而言，第一个参数是 this 值没有变化，变化的是其余参数都直接传递给函数。换句话说，在使用<br>call()方法时，传递给函数的参数必须逐个列举出来，如下面的例子所示。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function sum(num1, num2)&#123;</span><br><span class="line"> return num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line">function callSum(num1, num2)&#123;</span><br><span class="line"> return sum.call(this, num1, num2);</span><br><span class="line">&#125;</span><br><span class="line">alert(callSum(10,10)); //20</span><br></pre></td></tr></table></figure><blockquote><p>能够扩充函数赖以运行的作用域</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">window.color = &quot;red&quot;;</span><br><span class="line">var o = &#123; color: &quot;blue&quot; &#125;;</span><br><span class="line">function sayColor()&#123;</span><br><span class="line"> alert(this.color);</span><br><span class="line">&#125;</span><br><span class="line">sayColor(); //red</span><br><span class="line">sayColor.call(this); //red</span><br><span class="line">sayColor.call(window); //red</span><br><span class="line">sayColor.call(o); //blue</span><br></pre></td></tr></table></figure><blockquote><p>ECMAScript 5 还定义了一个方法：bind()。这个方法会创建一个函数的实例，其 this 值会被绑<br>定到传给 bind()函数的值。例如：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">window.color = &quot;red&quot;;</span><br><span class="line">var o = &#123; color: &quot;blue&quot; &#125;;</span><br><span class="line">function sayColor()&#123;</span><br><span class="line"> alert(this.color);</span><br><span class="line">&#125;</span><br><span class="line">var objectSayColor = sayColor.bind(o);</span><br><span class="line">objectSayColor(); //blue</span><br><span class="line"></span><br><span class="line">在这里，sayColor()调用 bind()并传入对象 o，创建了 objectSayColor()函数。objectSayColor()函数的</span><br><span class="line">this 值等于 o，因此即使是在全局作用域中调用这个函数，也会看到&quot;blue&quot;。</span><br></pre></td></tr></table></figure><h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><blockquote><p>ECMAScript 还提供了 3 个特殊的引用类型：Boolean、Number 和String。<br>Object 构造函数也会像工厂方法一样，根据传入值的类型返回相应基本包装类型的实例。例如：<br>var obj &#x3D; new Object(“some text”);<br>alert(obj instanceof String); &#x2F;&#x2F;true</p></blockquote><blockquote><p>Number 类型还提供了一些用于将数值格式化为字符串的方法。<br>其中，toFixed()方法会按照指定的小数位返回数值的字符串表示，例如：<br>var num &#x3D; 10;<br>alert(num.toFixed(2)); &#x2F;&#x2F;“10.00”<br>toFixed()方法可以表示带有 0 到 20 个小数位的数值。但这只是标准实现的范<br>围，有些浏览器也可能支持更多位数</p></blockquote><blockquote><p>var num &#x3D; 10;<br>alert(num.toExponential(1)); &#x2F;&#x2F;“1.0e+1”<br>以上代码输出了”1.0e+1”；不过，这么小的数值一般不必使用 e 表示法。如果你想得到表示某个<br>数值的最合适的格式，就应该使用 toPrecision()方法。<br>var num &#x3D; 99;<br>alert(num.toPrecision(1)); &#x2F;&#x2F;“1e+2”<br>alert(num.toPrecision(2)); &#x2F;&#x2F;“99”<br>alert(num.toPrecision(3)); &#x2F;&#x2F;“99.0”</p></blockquote><h3 id="string截取"><a href="#string截取" class="headerlink" title="string截取"></a>string截取</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var stringValue = &quot;hello world&quot;;</span><br><span class="line">alert(stringValue.slice(3)); //&quot;lo world&quot;</span><br><span class="line">alert(stringValue.substring(3)); //&quot;lo world&quot;</span><br><span class="line">alert(stringValue.substr(3)); //&quot;lo world&quot;</span><br><span class="line">alert(stringValue.slice(3, 7)); //&quot;lo w&quot;</span><br><span class="line">alert(stringValue.substring(3,7)); //&quot;lo w&quot;</span><br><span class="line">alert(stringValue.substr(3, 7)); //&quot;lo worl&quot;</span><br></pre></td></tr></table></figure><blockquote><p>在传递给这些方法的参数是负值的情况下，它们的行为就不尽相同了。其中，slice()方法会将传入的负值与字符串的长度相加，substr()方法将负的第一个参数加上字符串的长度，而将负的第二个参数转换为0。最后，substring()方法会把所有负值参数都转换为 0。下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var stringValue = &quot;hello world&quot;;</span><br><span class="line">alert(stringValue.slice(-3)); //&quot;rld&quot;</span><br><span class="line">alert(stringValue.substring(-3)); //&quot;hello world&quot;</span><br><span class="line">alert(stringValue.substr(-3)); //&quot;rld&quot;</span><br><span class="line">alert(stringValue.slice(3, -4)); //&quot;lo w&quot;</span><br><span class="line">alert(stringValue.substring(3, -4)); //&quot;hel&quot;</span><br><span class="line">alert(stringValue.substr(3, -4)); //&quot;&quot;（空字符串）</span><br></pre></td></tr></table></figure><blockquote><p>字符串位置方法<br>var stringValue &#x3D; “hello world”;<br>alert(stringValue.indexOf(“o”, 6)); &#x2F;&#x2F;7<br>alert(stringValue.lastIndexOf(“o”, 6)); &#x2F;&#x2F;4</p></blockquote><h2 id="Global对象"><a href="#Global对象" class="headerlink" title="Global对象"></a>Global对象</h2><blockquote><p>诸如 isNaN()、isFinite()、parseInt()以及 parseFloat()，实际上全都是 Global对象的方法。除此之外，Global 对象还包含其他一些方法。<br>Global 对象的 encodeURI()和 encodeURIComponent()方法可以对 URI（Uniform Resource<br>Identifiers，通用资源标识符）进行编码，以便发送给浏览器。有效的 URI 中不能包含某些字符，例如<br>空格。而这两个 URI 编码方法就可以对 URI 进行编码，它们用特殊的 UTF-8 编码替换所有无效的字符，<br>从而让浏览器能够接受和理解。</p></blockquote><blockquote><p>encodeURI()主要用于整个URI（例如，<a href="http://www.wrox.com/illegalvalue.htm%EF%BC%89%EF%BC%8C%E8%80%8CencodeURIComponent()%E4%B8%BB%E8%A6%81%E7%94%A8%E4%BA%8E%E5%AF%B9URI">http://www.wrox.com/illegalvalue.htm），而encodeURIComponent()主要用于对URI</a> 中的某一段（例如前面URI中的illegal value.htm）进行编码。它们的主要区别在于，encodeURI()不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号；而encodeURIComponent()则会对它发现的任何非标准字符进行编码。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var uri = &quot;http://www.wrox.com/illegal value.htm#start&quot;;</span><br><span class="line">//&quot;http://www.wrox.com/illegal%20value.htm#start&quot;</span><br><span class="line">alert(encodeURI(uri));</span><br><span class="line">//&quot;http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start&quot;</span><br><span class="line">alert(encodeURIComponent(uri));</span><br><span class="line"></span><br><span class="line">使用 encodeURI()编码后的结果是除了空格之外的其他字符都原封不动，只有空格被替换成了</span><br><span class="line">%20。而 encodeURIComponent()方法则会使用对应的编码替换所有非字母数字字符。这也正是可以</span><br><span class="line">对整个 URI 使用 encodeURI()，而只能对附加在现有 URI 后面的字符串使用 encodeURIComponent()</span><br><span class="line">的原因所在。</span><br></pre></td></tr></table></figure><blockquote><p>与 encodeURI()和 encodeURIComponent()方法对应的两个方法分别是 decodeURI()和<br>decodeURIComponent()。</p></blockquote><h3 id="eval-方法"><a href="#eval-方法" class="headerlink" title="eval()方法"></a>eval()方法</h3><p>在 eval()中创建的任何变量或函数都不会被提升，因为在解析代码的时候，它们被包含在一个字<br>符串中；它们只在 eval()执行的时候创建</p><h3 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h3><blockquote><p>另一种取得 Global 对象的方法是使用以下代码：<br>var global &#x3D; function(){<br> return this;<br>}();</p></blockquote><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">要找到数组中的最大或最小值，可以像下面这样使用 apply()方法。</span><br><span class="line">var values = [1, 2, 3, 4, 5, 6, 7, 8];</span><br><span class="line">var max = Math.max.apply(Math, values);</span><br></pre></td></tr></table></figure><blockquote><p>Math.ceil()执行向上舍入，即它总是将数值向上舍入为最接近的整数；<br> Math.floor()执行向下舍入，即它总是将数值向下舍入为最接近的整数；<br> Math.round()执行标准舍入，即它总是将数值四舍五入为最接近的整数（这也是我们在数学课<br>上学到的舍入规则）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function selectFrom(lowerValue, upperValue) &#123;</span><br><span class="line"> var choices = upperValue - lowerValue + 1;</span><br><span class="line"> return Math.floor(Math.random() * choices + lowerValue);</span><br><span class="line">&#125;</span><br><span class="line">var num = selectFrom(2, 10);</span><br><span class="line">alert(num); // 介于 2 和 10 之间（包括 2 和 10）的一个数值</span><br><span class="line"></span><br><span class="line">//通过调用 selectFrom(2,10)就可以得到一个介于 2 和 10 之间（包括 2 和 10）的数值了。利用这个函数，可以方便地从数组中随机取出一项</span><br><span class="line">var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;purple&quot;, &quot;brown&quot;];</span><br><span class="line">var color = colors[selectFrom(0, colors.length-1)];</span><br><span class="line">alert(color); // 可能是数组中包含的任何一个字符串</span><br></pre></td></tr></table></figure><h2 id="js引用类型"><a href="#js引用类型" class="headerlink" title="js引用类型"></a>js引用类型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">对象在 JavaScript 中被称为引用类型的值，而且有一些内置的引用类型可以用来创建特定的对象，</span><br><span class="line">现简要总结如下：</span><br><span class="line"> 引用类型与传统面向对象程序设计中的类相似，但实现不同；</span><br><span class="line"> Object 是一个基础类型，其他所有类型都从 Object 继承了基本的行为；</span><br><span class="line"> Array 类型是一组值的有序列表，同时还提供了操作和转换这些值的功能；</span><br><span class="line"> Date 类型提供了有关日期和时间的信息，包括当前日期和时间以及相关的计算功能；</span><br><span class="line"> RegExp 类型是 ECMAScript 支持正则表达式的一个接口，提供了最基本的和一些高级的正则表</span><br><span class="line">达式功能。</span><br><span class="line">函数实际上是 Function 类型的实例，因此函数也是对象；而这一点正是 JavaScript 最有特色的地</span><br><span class="line">方。由于函数是对象，所以函数也拥有方法，可以用来增强其行为。</span><br><span class="line">因为有了基本包装类型，所以 JavaScript 中的基本类型值可以被当作对象来访问。三种基本包装类</span><br><span class="line">型分别是：Boolean、Number 和 String。以下是它们共同的特征：</span><br><span class="line"> 每个包装类型都映射到同名的基本类型；</span><br><span class="line"> 在读取模式下访问基本类型值时，就会创建对应的基本包装类型的一个对象，从而方便了数据</span><br><span class="line">操作；</span><br><span class="line"> 操作基本类型值的语句一经执行完毕，就会立即销毁新创建的包装对象。</span><br><span class="line">在所有代码执行之前，作用域中就已经存在两个内置对象：Global 和 Math。在大多数 ECMAScript</span><br><span class="line">实现中都不能直接访问 Global 对象；不过，Web 浏览器实现了承担该角色的 window 对象。全局变</span><br><span class="line">量和函数都是 Global 对象的属性。Math 对象提供了很多属性和方法，用于辅助完成复杂的数学计算</span><br><span class="line">任务。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 高程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2017/06/08/2018base/20170608/"/>
      <url>/2017/06/08/2018base/20170608/</url>
      
        <content type="html"><![CDATA[<p>排序</p><span id="more"></span><hr><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>)</span><br><span class="line"> <span class="comment">// 元素交换</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">exchange</span>(<span class="params">arr ,a , b</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[b];</span><br><span class="line">    arr[b] = arr[a];</span><br><span class="line">    arr[a] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">arr , count</span>)&#123;</span><br><span class="line">    <span class="comment">//log(&#x27;2----&#x27;, arr)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count ; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[i+<span class="number">1</span>]) &#123;        <span class="comment">// 相邻元素两两对比</span></span><br><span class="line">            <span class="keyword">var</span> a = <span class="title function_">exchange</span>(arr ,i , i+<span class="number">1</span>)</span><br><span class="line">            <span class="comment">//log(&#x27;3-------&#x27;,a)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="comment">//复制数组</span></span><br><span class="line">    <span class="keyword">var</span> arr = array.<span class="title function_">slice</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">var</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="comment">//控制次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> count = len- <span class="number">1</span> - i</span><br><span class="line">        <span class="title function_">compare</span>(arr , count)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">binarySearch</span> = <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> right = <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">var</span> center = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>[center] == obj) &#123;</span><br><span class="line">            value = center;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj &lt; <span class="variable language_">this</span>[center]) &#123;</span><br><span class="line">            right = center - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = center + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">alert</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.<span class="property">length</span>&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr;<span class="comment">//如果数组只有一个数，就直接返回；</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(arr.<span class="property">length</span>/<span class="number">2</span>);<span class="comment">//找到中间数的索引值，如果是浮点数，则向下取整</span></span><br><span class="line">  <span class="keyword">var</span> numValue = arr.<span class="title function_">splice</span>(num,<span class="number">1</span>);<span class="comment">//找到中间数的值</span></span><br><span class="line">  <span class="keyword">var</span> left = [];</span><br><span class="line">  <span class="keyword">var</span> right = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i]&lt;numValue)&#123;</span><br><span class="line">      left.<span class="title function_">push</span>(arr[i]);<span class="comment">//基准点的左边的数传到左边数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      right.<span class="title function_">push</span>(arr[i]);<span class="comment">//基准点的右边的数传到右边数组</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="title function_">quickSort</span>(left).<span class="title function_">concat</span>([numValue],<span class="title function_">quickSort</span>(right));<span class="comment">//递归不断重复比较</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">quickSort</span>([<span class="number">32</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">16</span>,<span class="number">2</span>,<span class="number">87</span>]));<span class="comment">//弹出“2,16,32,37,45,87”</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> base </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用淘宝的cnpm代替npm</title>
      <link href="/2017/06/05/2017node/20170702/"/>
      <url>/2017/06/05/2017node/20170702/</url>
      
        <content type="html"><![CDATA[<p>使用国内 npm 镜像</p><blockquote><p>npm 默认从国外的源（<a href="https://registry.npmjs.org/%EF%BC%89%E8%8E%B7%E5%8F%96%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%8C%85%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E5%BE%88%E4%B8%8D%E7%90%86%E6%83%B3%E3%80%82">https://registry.npmjs.org/）获取和下载包信息，国内访问速度很不理想。</a><br>就像其他很多开源软件都有国内镜像源，npm 也不例外。所以我们可以利用国内镜像源来加速模块安装。</p></blockquote><span id="more"></span><h2 id="国内-npm-镜像源"><a href="#国内-npm-镜像源" class="headerlink" title="国内 npm 镜像源"></a>国内 npm 镜像源</h2><p>cnpmjs 镜像：</p><p>搜索地址：<a href="https://cnpmjs.org/">https://cnpmjs.org/</a><br>registry ： <a href="https://r.cnpmjs.org/">https://r.cnpmjs.org/</a><br>淘宝 npm 镜像：</p><p>搜索地址：<a href="https://npm.taobao.org/">https://npm.taobao.org/</a><br>registry ： <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a></p><p>临时使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --registry https://r.cnpmjs.org/</span><br></pre></td></tr></table></figure><p>持久使用</p><p>npm 依次通过命令行、环境变量、.npmrc 文件来获取配置</p><p>方式一：命令行修改 npm 配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置 registry</span><br><span class="line">npm config set registry https://r.cnpmjs.org/</span><br><span class="line"># 验证配置是否修改成功</span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>方式二：修改环境变量</p><blockquote><p>任何环境变量以npm_config_开头，将被解释为配置参数。<br>以 windows 为例，打开：系统信息 &gt; 高级系统设置 &gt; 环境变量。可以新建一条用户变量或者系统变量</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 变量名</span><br><span class="line">npm_config_registry</span><br><span class="line"># 变量值</span><br><span class="line">https://r.cnpmjs.org/</span><br></pre></td></tr></table></figure><p>方式三：添加 npm 配置文件 .npmrc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.npmrc 包含 4 级，可以按需求选择配置的地方</span><br><span class="line"></span><br><span class="line">项目目录：/path/to/my/project/.npmrc</span><br><span class="line">用户目录：~/.npmrc</span><br><span class="line">全局配置：$PREFIX/etc/.npmrc</span><br><span class="line">内置配置：/path/to/npm/.npmrc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># .npmrc 配置</span><br><span class="line">registry = https://r.cnpmjs.org</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="命令行工具-cnpm"><a href="#命令行工具-cnpm" class="headerlink" title="命令行工具 cnpm"></a>命令行工具 cnpm</h2><p>还可以通过定制的 cnpm 命令来直接从淘宝镜像源安装模块，参考 <a href="https://npm.taobao.org/">https://npm.taobao.org/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装 cnpm</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"># 通过 cnpm 命令替代 npm 命令安装模块</span><br><span class="line">cnpm install express</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置静态网页</title>
      <link href="/2017/02/25/2016linux/20170225/"/>
      <url>/2017/02/25/2016linux/20170225/</url>
      
        <content type="html"><![CDATA[<p>负载均衡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream bbs &#123;</span><br><span class="line">       server music.istorm.cc:80 weight=1;</span><br><span class="line">   &#125;</span><br><span class="line">   upstream blog &#123;</span><br><span class="line">       server http://0.0.0.0:2020 weight=1;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>静态服务器和动态服务器配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name music.istorm.cc;</span><br><span class="line">    location / &#123;</span><br><span class="line">        #这个地方指定被访问的文件夹位置</span><br><span class="line">        root /var/www/static/music;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    #location /二级域名/ &#123;</span><br><span class="line">    #    root /var/www/static/music;</span><br><span class="line">    #    index index.html;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    # 配置 www.istorm.cc</span><br><span class="line">    server_name www.istorm.cc;</span><br><span class="line">    access_log  /var/log/nginx/www.log;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /home/website_root;</span><br><span class="line"> # proxy_pass 为反向代理后的 网站</span><br><span class="line">        proxy_pass http://0.0.0.0:2020;</span><br><span class="line">        proxy_read_timeout 300;</span><br><span class="line">        proxy_connect_timeout 300;</span><br><span class="line">        proxy_redirect     off;</span><br><span class="line">        proxy_set_header   X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header   Host              $http_host;</span><br><span class="line">        proxy_set_header   X-Real-IP         $remote_addr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 的 403 Forbidden errors</title>
      <link href="/2017/02/24/2016linux/20170224/"/>
      <url>/2017/02/24/2016linux/20170224/</url>
      
        <content type="html"><![CDATA[<p>nginx 的 403 Forbidden errors 表示你在请求一个资源文件但是nginx不允许你查看。<br>403 Forbidden 只是一个HTTP状态码，像404,200一样不是技术上的错误。<br>哪些场景需要返回403状态码的场景？</p><span id="more"></span><p>1.网站禁止特定的用户访问所有内容，例：网站屏蔽某个ip访问。<br>2.访问禁止目录浏览的目录，例：设置autoindex off后访问目录。<br>3.用户访问只能被内网访问的文件。</p><p>以上几种常见的需要返回 403 Forbidden 的场景。</p><p>由于服务器端的错误配置导致在不希望nginx返回403时返回403 Forbidden。</p><p>1.权限配置不正确</p><p>这个是nginx出现403 forbidden最常见的原因。</p><p>为了保证文件能正确执行，nginx既需要文件的读权限,又需要文件所有父目录的可执行权限。</p><p>例如，当访问&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;image.jpg时，nginx既需要image.jpg文件的可读权限，也需要&#x2F;,&#x2F;usr,&#x2F;usr&#x2F;local,&#x2F;usr&#x2F;local&#x2F;nginx,&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html的可以执行权限。</p><p>解决办法:设置所有父目录为755权限，设置文件为644权限可以避免权限不正确。</p><p>2.目录索引设置错误（index指令配置）</p><p>网站根目录不包含index指令设置的文件。</p><p>例如，运行PHP的网站，通常像这样配置index</p><p>index  index.html index.htm index.php;</p><p>当访问该网站的时，nginx 会按照 index.html，index.htm ，index.php 的先后顺序在根目录中查找文件。如果这三个文件都不存在，那么nginx就会返回403 Forbidden。</p><p>如果index中不定义 index.php ，nginx直接返回403 Forbidden而不会去检查index.php是否存在。</p><p>同样对于如果运行jsp, py时也需要添加index.jsp,index.py到目录索引指令index中。</p><p>解决办法:添加首页文件到index指令，常见的是index.php，index.jsp，index.jsp或者自定义首页文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx反向代理</title>
      <link href="/2017/02/23/2016linux/20170223/"/>
      <url>/2017/02/23/2016linux/20170223/</url>
      
        <content type="html"><![CDATA[<p>当只有一台服务器，而又想运行多个 web 后端服务，且希望网址为 <a href="http://www.xx.com/">www.XX.com</a> &#x2F; bbs.XX.com &#x2F; blog.XX.com,怎么办，此时就要用nginx进行反向代理</p><blockquote><p>以 ubuntu 为例</p></blockquote><ol><li>安装 NGINX</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install nginx</span><br></pre></td></tr></table></figure><span id="more"></span><ol start="2"><li>修改 NGINX 的配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件在 /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="built_in">cd</span> /etc/nginx</span><br></pre></td></tr></table></figure>然后修改 nginx.conf,<br>具体为:修改配置文件中 的 http{}<br>在 http{} 中的末尾补上反向代理配置代码</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">worker_connections 768;</span><br><span class="line"># multi_accept on;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    ##</span><br><span class="line">    #  前面的代码再此不展示了,在 http&#123;&#125; 中补上以上代码</span><br><span class="line">    ##</span><br><span class="line">##</span><br><span class="line"># 反向代理配置代码</span><br><span class="line">##</span><br><span class="line">    # 注意端口号 8081 为 bbs 服务, 8082 为 blog 服务,8083 为 www 服务</span><br><span class="line">upstream bbs &#123;</span><br><span class="line">        server 127.0.0.1:8081 weight=1;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream blog &#123;</span><br><span class="line">        server 127.0.0.1:8082 weight=1;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream www &#123;</span><br><span class="line">        server 127.0.0.1:8083 weight=1;</span><br><span class="line">    &#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        # 配置 www.bigbananas.cn</span><br><span class="line">        server_name www.bigbananas.cn;</span><br><span class="line">        access_log  /var/log/nginx/www.log;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /home/website_root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        # 配置 blog.bigbananas.cn</span><br><span class="line">        server_name blog.bigbananas.cn;</span><br><span class="line">        access_log  /var/log/nginx/blog_access.log;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /home/todo_root;</span><br><span class="line">            # proxy_pass 为反向代理后的 网站</span><br><span class="line">            proxy_pass http://127.0.0.1:8081/;</span><br><span class="line">            proxy_read_timeout 300;</span><br><span class="line">            proxy_connect_timeout 300;</span><br><span class="line">            proxy_redirect     off;</span><br><span class="line">            proxy_set_header   X-Forwarded-Proto $scheme;</span><br><span class="line">            proxy_set_header   Host              $http_host;</span><br><span class="line">            proxy_set_header   X-Real-IP         $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        # 配置 bbs.bigbananas.cn</span><br><span class="line">        server_name bbs.bigbananas.cn;</span><br><span class="line">        access_log  /var/log/nginx/bbs_access.log;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /home/todo_root;</span><br><span class="line">            # proxy_pass 为反向代理后的 网站</span><br><span class="line">            proxy_pass http://127.0.0.1:8082/;</span><br><span class="line">            proxy_read_timeout 300;</span><br><span class="line">            proxy_connect_timeout 300;</span><br><span class="line">            proxy_redirect     off;</span><br><span class="line">            proxy_set_header   X-Forwarded-Proto $scheme;</span><br><span class="line">            proxy_set_header   Host              $http_host;</span><br><span class="line">            proxy_set_header   X-Real-IP         $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、 在重启 NGINX 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>4、 在服务器启动 BLOG、BBS、WWW 服务</p><p>注意：<br>端口号 8081 为 bbs 服务, 8082 为 blog 服务,8083 为 www 服务</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git还原某个特定的文件到之前的版本</title>
      <link href="/2017/02/03/2018git/20170203/"/>
      <url>/2017/02/03/2018git/20170203/</url>
      
        <content type="html"><![CDATA[<blockquote><p>场景： 对于某个Git控制下的文件进行了修改，但是改的不满意，想退回到改之前的版本。假定该文件为 src&#x2F;main&#x2F;main.c</p></blockquote><span id="more"></span><p>解决方法：</p><p>第一步： 在命令行中输入 Git log src&#x2F;main&#x2F;main.c 得到该文件的commit 历史。 会得到类似下面的界面</p><p>第二步： 复制需要回退版本的hash，在此假设我们回退到 d98a0f565804ba639ba46d6e4295d4f787ff2949 ,则复制该序列即可</p><p>第三步：checkout 对应版本。格式为 git checkout <hash> <filename>, 在此即为命令行中输入 git checkout d98a0f565804ba639ba46d6e4295d4f787ff2949 src&#x2F;main&#x2F;main.c</p><p>第四步： commit checkout下来的版本。 如： git commit -m “revert to previous version”</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node启动listen EADDRINUSE</title>
      <link href="/2017/01/21/2017node/20170121/"/>
      <url>/2017/01/21/2017node/20170121/</url>
      
        <content type="html"><![CDATA[<p>我在使用elasticsearch的kibana插件时候，有一次启动，遇到这个错误：</p><p>Error: listen EADDRINUSE 0.0.0.0:5601<br>它的意思是，端口5601被其他进程占用。</p><p>故而，需要kill掉那个进程，或者更换kibana的端口号。</p><span id="more"></span><p>我先找到那个进程是什么：</p><p>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -apn|grep 5601</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后kill掉，即可启动kibana。</p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github怎么绑定自己的域名？</title>
      <link href="/2017/01/13/2018git/20170113/"/>
      <url>/2017/01/13/2018git/20170113/</url>
      
        <content type="html"><![CDATA[<ol><li>向你的 Github Pages 仓库添加一个CNAME(一定要<em>大写</em>)文件其中只能包含一个顶级域名，<br>像这样：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example.com</span><br></pre></td></tr></table></figure><span id="more"></span></li></ol><p>如果你是用 hexo 框架搭建博客并部署到 Github Pages 上，每次</p><blockquote><p>hexo g<br>hexo d</p></blockquote><p>后会把你的博客所在目录下 public 文件夹里的东西都推到 Github Pages 仓库上，并且把 CNAME 文件覆盖掉，<br>解决这个问题可以直接把 CNAME 文件添加到 source 文件夹里，这样每次推的时候就不用担心仓库里的 CNAME 文件被覆盖掉了。</p><ol start="2"><li>向你的 DNS 配置中添加 3 条记录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@          A             192.30.252.153</span><br><span class="line">@          A             192.30.252.154</span><br><span class="line">www      CNAME    username.github.io.</span><br></pre></td></tr></table></figure>用你自己的 Github 用户名替换 username推荐使用 DNSPOD 的服务，使用国外的 DNS 解析服务可能有被墙的风险。至于如何使用 DNSPOD 解析域名，<br>参考<br><a href="http://jingyan.baidu.com/article/546ae1857c4ee81149f28cbe.html3">http://jingyan.baidu.com/article/546ae1857c4ee81149f28cbe.html3</a>.<br>等待你的 DNS 配置生效对DNS的配置不是立即生效的，过10分钟再去访问你的域名看看有没有配置成功 : )</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gua5700</title>
      <link href="/2016/11/15/2016fe/20161115/"/>
      <url>/2016/11/15/2016fe/20161115/</url>
      
        <content type="html"><![CDATA[<h1 id="5700奥义"><a href="#5700奥义" class="headerlink" title="5700奥义"></a>5700奥义</h1><span id="more"></span><h2 id="FE部分"><a href="#FE部分" class="headerlink" title="FE部分"></a>FE部分</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">HTML</span> 部分</span><br><span class="line"><span class="variable language_">localStorage</span> 和 cookies</span><br><span class="line"><span class="comment">// localStorage、 sessionStorage 与 cookies 的区别</span></span><br><span class="line"><span class="comment">// localStorage 用于多页面通信</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">FormData</span></span><br><span class="line"><span class="comment">// 上传文件需要用到这个对象</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">File</span> <span class="variable constant_">API</span></span><br><span class="line"><span class="comment">// 预览图片使用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">CSS</span> 部分</span><br><span class="line">float</span><br><span class="line">position</span><br><span class="line">display</span><br><span class="line">    flex (用 flexbox froggy 或者阮一峰的博客去学)</span><br><span class="line">水平居中</span><br><span class="line">    inline 的水平居中</span><br><span class="line">    block 的水平居中</span><br><span class="line">垂直居中</span><br><span class="line">    有完整的套路</span><br><span class="line">    父节点为 <span class="attr">position</span>: relative</span><br><span class="line">    自己为   <span class="attr">position</span>: absolute</span><br><span class="line">            <span class="attr">top</span>: <span class="number">50</span>%</span><br><span class="line">            <span class="attr">transform</span>: <span class="title function_">translateY</span>(-<span class="number">50</span>%)</span><br><span class="line">响应式设计</span><br><span class="line">移动开发</span><br><span class="line">    主要是微信网页开发</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">JS</span> 部分</span><br><span class="line">值类型与引用类型</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">v</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">v</span>)</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a.<span class="property">v</span> = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">v</span>)</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">a = &#123;</span><br><span class="line">    <span class="attr">v</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">v</span>)</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量声明提升(这是一个特性)</span></span><br><span class="line"><span class="comment">// 这段代码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有以 function 函数名() &#123;&#125; 方式定义的函数都相当于提前定义了一遍</span></span><br><span class="line"><span class="comment">// 这段代码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">b</span>())</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">b</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这段代码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">c</span>())</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">var</span> c</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">c</span>())</span><br><span class="line">c = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 所以 console.log 会报错, 因为 c 在那个时候还不是一个函数, 只是 undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，let 或者 const 声明的变量不具备 变量声明提升 的特性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// this</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;</span><br><span class="line">o.<span class="property">x</span> = <span class="number">1</span></span><br><span class="line">o.<span class="property">m</span> = test</span><br><span class="line">o.<span class="title function_">m</span>()</span><br><span class="line">o[<span class="string">&#x27;m&#x27;</span>]()</span><br><span class="line">o.<span class="property">m</span>.<span class="title function_">apply</span>()</span><br><span class="line"><span class="comment">// apply 请看 apply bind call this 那节课</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// this + arguments</span></span><br><span class="line"><span class="keyword">var</span> gua = <span class="string">&#x27;name 001&#x27;</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// arguments 并不是数组, 只是行为恰好和数组一样, 一般称为奇异数组</span></span><br><span class="line">    <span class="comment">// 这个函数的 this 是 arguments</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="string">&#x27;0&#x27;</span>]())</span><br><span class="line">    <span class="comment">// console.log(arguments[0]())</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;</span><br><span class="line">o.<span class="property">gua</span> = <span class="string">&#x27;name 000&#x27;</span></span><br><span class="line">o.<span class="property">func</span> = foo</span><br><span class="line">o.<span class="title function_">func</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">gua</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">o.<span class="property">func2</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">arguments</span>.<span class="property">gua</span> = <span class="string">&#x27;gua&#x27;</span></span><br><span class="line">    <span class="comment">// 这个函数的 this 是 arguments, 所以输出是 &#x27;gua&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o.<span class="title function_">func2</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">gua</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// prototype</span></span><br><span class="line"><span class="comment">// 原型链</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">f1.<span class="property">name</span> = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">arguments</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> <span class="variable language_">arguments</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call, apply, bind</span><br><span class="line"><span class="comment">// call, apply 和 bind 的区别</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span> 和 <span class="built_in">setInterval</span></span><br><span class="line"><span class="comment">// 两者的区别</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span> 与循环结合</span><br><span class="line"><span class="comment">// 下面的输出全是 5, 因为引用的是 i 这个变量</span></span><br><span class="line"><span class="comment">// 注意超时时间是 1000</span></span><br><span class="line"><span class="comment">// 引用的 i 可以在函数内部访问到这件事称之为 闭包</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 皇帝的闭包问题</span></span><br><span class="line"><span class="comment">// 这根本不是闭包的问题</span></span><br><span class="line"><span class="comment">// 因为 setTimeout 即便第二个参数是 0 也会在循环结束之后才执行函数</span></span><br><span class="line"><span class="comment">// 所以 5 个输出都是 5</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), i)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), i)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), i)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">事件冒泡, 事件捕获, 事件委托</span><br><span class="line"><span class="comment">// 讲清楚这三个概念</span></span><br><span class="line"></span><br><span class="line">闭包</span><br><span class="line"><span class="comment">// 所谓经典的闭包面试题(上面讲过的皇帝的闭包)</span></span><br><span class="line"><span class="comment">// 使用闭包实现如下程序</span></span><br><span class="line"><span class="comment">// 函数每调用一次，该函数的返回值加 1</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">foo</span>()</span><br><span class="line"><span class="title function_">a</span>()</span><br><span class="line"><span class="title function_">a</span>()</span><br><span class="line"></span><br><span class="line">clone 和 deepClone</span><br><span class="line"><span class="comment">// 实现 clone 和 deepClone 函数</span></span><br><span class="line"><span class="comment">// 用 JSON.stringify 和 JSON.parse 实现 deepClone 是一个很有新意的方式</span></span><br><span class="line"><span class="comment">// 具体实现会在 面试大全 里</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ajax（可能需要手写原生的 ajax）</span><br><span class="line"><span class="comment">// 实现原生的 ajax 函数</span></span><br><span class="line"><span class="comment">// readyState 0 1 2 3 4 各代表什么含义</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">HTTP</span> 请求方法, 常见状态码, 头部常见字段</span><br><span class="line"><span class="comment">// HTTP 有哪些常见请求方法 GET POST PUT PATCH DELETE</span></span><br><span class="line"><span class="comment">// HTTP 常见状态码有哪些 200 301 302 403 404 500 502</span></span><br><span class="line"><span class="comment">// HTTP 头部常见字段有哪些</span></span><br><span class="line">    <span class="title class_">Content</span>-<span class="title class_">Type</span></span><br><span class="line">    <span class="title class_">Content</span>-<span class="title class_">Length</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">跨域 （jsonp, postMessage, cors, 用服务器(比如 node)转发请求和响应）</span><br><span class="line"><span class="comment">// 跨域有哪些常见的解决方式</span></span><br><span class="line"></span><br><span class="line">网络安全: xss, csrf</span><br><span class="line"><span class="comment">// xss 和 csrf 的原理是什么</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">DOM</span> 操作（查找, 添加, 删除, 修改）</span><br><span class="line"><span class="comment">// DOM 查找/添加/删除/修改对应的 API 是什么</span></span><br><span class="line"></span><br><span class="line">jQuery 常见 <span class="variable constant_">API</span></span><br><span class="line"><span class="comment">// jQuery 常见 API</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数据结构</span><br><span class="line">数组</span><br><span class="line">对象</span><br><span class="line">队列</span><br><span class="line">栈</span><br><span class="line">数组、对象、字符串的想换转化</span><br><span class="line">比如 a=<span class="number">1</span>&amp;b=<span class="number">2</span>&amp;c=<span class="number">3</span> 怎样转成对象, 复习基础课程的作业就可以</span><br><span class="line"><span class="comment">// 有这样一个 url： http://vip.qq.com/a.java?a=1&amp;b=2&amp;c=3&amp;d=xxx&amp;e</span></span><br><span class="line"><span class="comment">// 写一段 JS 程序将 url 的参数转成对象的形式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">e</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">ES6</span></span><br><span class="line"><span class="title class_">ES6</span> 的面试题一般是概念性质的, 所以清楚下面的概念就可以了</span><br><span class="line"><span class="keyword">let</span> 和 <span class="keyword">const</span>, 有一个 <span class="variable constant_">TDZ</span> （暂时性死区的概念，了解下即可）</span><br><span class="line">箭头函数</span><br><span class="line">解构</span><br><span class="line">剩余参数(扩展符号)</span><br><span class="line"><span class="title class_">Promise</span>, 可能会附带 <span class="keyword">async</span> <span class="keyword">await</span></span><br><span class="line"><span class="keyword">class</span></span><br><span class="line"><span class="title class_">Set</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用解构来简化参数列表</span></span><br><span class="line"><span class="keyword">var</span> gua = <span class="keyword">function</span>(<span class="params">&#123;name, height&#125;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, height)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> gua2 = <span class="keyword">function</span>(<span class="params">info</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">name</span>, info.<span class="property">height</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;gua&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">169</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">gua</span>(info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">React</span></span><br><span class="line"><span class="comment">// React 也是概念性质的题目为主, 基本上不会考察写代码</span></span><br><span class="line"><span class="title class_">React</span> <span class="title class_">Angular</span> 这 <span class="number">2</span> 个一般只会一个就可以的, 所以这里只说 <span class="title class_">React</span> 的情况</span><br><span class="line">react 的广告</span><br><span class="line">virtual dom</span><br><span class="line">diff 算法的原理</span><br><span class="line">state 和 props</span><br><span class="line">组件生命周期</span><br><span class="line">组件通信：父组件 -&gt; 子组件, 子组件 -&gt; 父组件, A 组件 -&gt; B 组件</span><br><span class="line"><span class="title class_">React</span> <span class="title class_">Router</span>（react 路由）</span><br><span class="line"><span class="title class_">Redux</span>/<span class="title class_">MobX</span></span><br><span class="line">react ui 有两套很流行: <span class="title class_">Material</span> <span class="variable constant_">UI</span> 和 <span class="title class_">Ant</span> <span class="title class_">Design</span>, 国内流行的是 <span class="title class_">Ant</span> <span class="title class_">Design</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="职业规划"><a href="#职业规划" class="headerlink" title="职业规划"></a>职业规划</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">写简历</span><br><span class="line">    个人基本信息(姓名 邮箱 手机)</span><br><span class="line">    技能</span><br><span class="line">    项目</span><br><span class="line">    教育经历</span><br><span class="line">    工作经验</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">投简历</span><br><span class="line">    拉勾(假公司比较多, 100 中 5 差不多, 用小号投)</span><br><span class="line">    boss 直聘, 野鸡比较多(100 中 5)</span><br><span class="line">    智联/51job(小城市)</span><br><span class="line">    原则是海投海面 不要有感情</span><br><span class="line">    注意不要被培训公司诈骗</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">面试</span><br><span class="line">    记录面试情况, 有问题来找我反馈</span><br><span class="line">    反馈的时候要提供以下信息</span><br><span class="line">        1, 所在城市</span><br><span class="line">        2, 投递的简历数量</span><br><span class="line">        3, 面试次数</span><br><span class="line">        4, 面试遇到的问题</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">工作</span><br><span class="line">1, 工作之后的规划</span><br><span class="line">    1) 规划跳槽, 从第一天起</span><br><span class="line">        规划好自己半年/一年后的状态</span><br><span class="line">        规划好达到那个状态需要做的计划</span><br><span class="line">        不要对公司/老板有盲目的感恩之心，互利双赢才能长久</span><br><span class="line">        要以自己的规划为主</span><br><span class="line">    2) 要设定职业规划, 探索职业方向</span><br><span class="line">        要照顾到自己的喜好, 做喜欢的事情</span><br><span class="line">        要保护好自己的热情(做喜欢的事情, 尽量避免被公司业务污染)</span><br><span class="line">            要符合自己的意义</span><br><span class="line">            公务员的工作有意义，但是你不认同也会做着痛苦</span><br><span class="line">    3) 认清自己的地位</span><br><span class="line">        你做了自己的选择，并不只是运气好</span><br><span class="line">        你只是一个流水线工人</span><br><span class="line">        一个公司相当于一个作坊, 由 前端/后端/设计/产品/测试 合作完成一个东西</span><br><span class="line">            资深工人</span><br><span class="line">            多工种工人</span><br><span class="line">    4) 个人增值的方式</span><br><span class="line">        把某个技术做精, 变成专家级流水工</span><br><span class="line">            坏处就是万一被淘汰就跪了</span><br><span class="line">            还有就是鸡蛋放到一个篮子里面了</span><br><span class="line">            选择的空间也少, 比如 nokia 和 moto 被裁员的员工</span><br><span class="line">            为了避免这个窘况, 大家要做流行性高/通用性强的方向</span><br><span class="line">                ios 安卓 就不行</span><br><span class="line">                web 更长青</span><br><span class="line">                编程能力是最重要的，切换语言很简单</span><br><span class="line">                市场如果有需求，一夜之间千万 xx 语言码农就出来了</span><br><span class="line">        横跨多个领域, 做复合型掏粪工</span><br><span class="line">            比如全栈, 就是典型的复合型掏粪工( node.js )</span><br><span class="line">                掏得越多越好 越快越好</span><br><span class="line">                node 是趋势 前端没理由去接触别的语言</span><br><span class="line">            比如技术和其他领域的结合</span><br><span class="line">                软件 + 医疗</span><br><span class="line">                互联网 +</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2, 学习的计划</span><br><span class="line">    合理正确的规划方式</span><br><span class="line">        时间不要贪多, 以自己能接受为前提, 从小到大慢慢提高</span><br><span class="line">            计划太多学不完</span><br><span class="line">            学不完有负罪感</span><br><span class="line">            然后就炸了</span><br><span class="line">            所以要慢慢来，遵循客观规律</span><br><span class="line">            不要妄自菲薄（我自控力差，我做不好事）</span><br><span class="line">        目标要细化, 最好是把事情分解为 20 分钟甚至 10 分钟能解决的程度</span><br><span class="line">            目标大了就会拖，拖了就做不完</span><br><span class="line">            把目标写下来</span><br><span class="line">            一条条做</span><br><span class="line">        要合理看待不能完成的任务, 要有标准化的预案</span><br><span class="line">            比如超过设定的极限时间不能解决就提问</span><br><span class="line">    避免买包出斧心理</span><br><span class="line">        买包就是试图付出 xx 资源来得到 yy 好处（无视客观规律）</span><br><span class="line">        出斧就是情绪驱动，不按照客观规律做事</span><br><span class="line">        不要试图通过去学一些奇怪的东西来提高能力</span><br><span class="line">            我要看原版书，我看原版书，得到原汁原味的知识</span><br><span class="line">                有些东西英语就是英语，用中文是无法表达的</span><br><span class="line">            我要学 java</span><br><span class="line">            我要学人工智能</span><br><span class="line">            我要学底层（什么是底层？）</span><br><span class="line">        不要被情绪驱动, 要按照计划来做事/学习</span><br><span class="line">            不能说今晚做不出就不睡</span><br><span class="line">            不能说我一定要自己想出来才是我的，该问就问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3, 前端知识点的聚合</span><br><span class="line">    react grunt gulp webpack babel es6 less sass 这些都是花哨的名词而已</span><br><span class="line">        都可以通过 阮一峰 的网站来了解</span><br><span class="line">        仅限于阮一峰的网站中介绍的内容，其他一概忽略</span><br><span class="line">    最重要的还是 js 编程能力</span><br><span class="line">        比如不断地练习写程序来提高</span><br><span class="line">        比如通过阅读《代码大全》这样的经典书籍来提高</span><br><span class="line">            这本书可以随机读自己喜欢的章节</span><br><span class="line">        编程能力在不同语言之间是互通的</span><br><span class="line">    其次是 html 和 css 的运用能力</span><br><span class="line">        多写</span><br><span class="line">        多抄</span><br><span class="line">        多看书</span><br><span class="line">    任何工具都只是帮助你更好更方便地构建网站, 本质还是写网页</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4, 其他</span><br><span class="line">    倍速视频</span><br><span class="line">        节约时间</span><br><span class="line">        集中精力</span><br><span class="line">    论坛提问的表格具有很高的价值, 要善加利用</span><br><span class="line">        比提问的智慧简单很多</span><br><span class="line">        是长期实践中归纳总结出来的方法</span><br><span class="line">    怎样选择要读的书(不限于技术书)</span><br><span class="line">        绝大部分书都是垃圾</span><br><span class="line">        即便是好书, 大部分内容很可能也没什么用</span><br><span class="line">        粗读, 不要精读</span><br><span class="line">        绝不要去读原版</span><br><span class="line">        这些是我长期实践的总结，仅供参考</span><br><span class="line">    更多的训练项目</span><br><span class="line">        electron 视频播放器</span><br><span class="line">        天气应用</span><br><span class="line">        计算器</span><br><span class="line">        浏览器插件（GIF ZhiHu）</span><br><span class="line">        爬虫</span><br><span class="line">        爬虫结果的图表化数据分析（数据可视化、数据分析）</span><br><span class="line">        markdown 编辑器</span><br><span class="line">        美味便签</span><br><span class="line">        小游戏(phaser.js 网站上学习)</span><br><span class="line">    HTTP 协议(主要用在 AJAX 上)</span><br><span class="line">        用到再学</span><br><span class="line">    改键位和快捷键</span><br><span class="line">        https://zhuanlan.zhihu.com/p/24020977</span><br><span class="line">    KISS keep it simple stupid 要把事情做得简单(一个函数简短 并且完成一个功能)</span><br><span class="line">    DRY dont repeat yourself 不要写重复代码</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gua.js</title>
      <link href="/2016/11/12/2016fe/20161112/"/>
      <url>/2016/11/12/2016fe/20161112/</url>
      
        <content type="html"><![CDATA[<p>备份</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="keyword">function</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> es = <span class="keyword">function</span> (<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selector)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appendHtml = <span class="keyword">function</span>(<span class="params">element, html</span>) &#123;</span><br><span class="line">element.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, html)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindEvent = <span class="keyword">function</span>(<span class="params">element, eventName, callback</span>) &#123;</span><br><span class="line">    element.<span class="title function_">addEventListener</span>(eventName, callback)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> toggleClass = <span class="keyword">function</span>(<span class="params">element, className</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (element.<span class="property">classList</span>.<span class="title function_">contains</span>(className)) &#123;</span><br><span class="line">        element.<span class="property">classList</span>.<span class="title function_">remove</span>(className)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element.<span class="property">classList</span>.<span class="title function_">add</span>(className)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removeClassAll = <span class="keyword">function</span>(<span class="params">className</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> selector = <span class="string">&#x27;.&#x27;</span> + className</span><br><span class="line">    <span class="keyword">var</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selector)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = elements[i]</span><br><span class="line">        e.<span class="property">classList</span>.<span class="title function_">remove</span>(className)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindAll = <span class="keyword">function</span>(<span class="params">selector, eventName, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selector)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = elements[i]</span><br><span class="line">        <span class="title function_">bindEvent</span>(e, eventName, callback)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// find 函数可以查找 element 的所有子元素</span></span><br><span class="line"><span class="keyword">var</span> find = <span class="keyword">function</span>(<span class="params">element, selector</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> element.<span class="title function_">querySelector</span>(selector)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closestClass = <span class="keyword">function</span>(<span class="params">element, className</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = element</span><br><span class="line">    <span class="keyword">while</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">classList</span>.<span class="title function_">contains</span>(className)) &#123;</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            e = e.<span class="property">parentElement</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closestId = <span class="keyword">function</span>(<span class="params">element, idName</span>)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    element 是一个 DOM 元素</span></span><br><span class="line"><span class="comment">    idName 是一个 string</span></span><br><span class="line"><span class="comment">    循环查找 element 的直系父元素</span></span><br><span class="line"><span class="comment">    如果父元素拥有 idName 这个 id, 则返回这个父元素</span></span><br><span class="line"><span class="comment">    如果找到 document 都还没有, 则返回 null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> e = element</span><br><span class="line">    <span class="keyword">while</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断 e 是否包含 idName 这个 id</span></span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">id</span> == idName) &#123;</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            e = e.<span class="property">parentElement</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closestTag = <span class="keyword">function</span>(<span class="params">element, tagName</span>)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    element 是一个 DOM 元素</span></span><br><span class="line"><span class="comment">    tagName 是一个 string</span></span><br><span class="line"><span class="comment">    循环查找 element 的直系父元素</span></span><br><span class="line"><span class="comment">    如果父元素是一个 tagName 标签, 则返回这个父元素</span></span><br><span class="line"><span class="comment">    如果找到 document 都还没有, 则返回 null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    tagName 是 &#x27;div&#x27; &#x27;p&#x27; &#x27;h1&#x27; 这样的标签名</span></span><br><span class="line"><span class="comment">    获取一个 DOM 元素的标签名的方法如下</span></span><br><span class="line"><span class="comment">    element.tagName</span></span><br><span class="line"><span class="comment">    需要注意的是, tagName 属性返回的标签名是大写的</span></span><br><span class="line"><span class="comment">    例如 &#x27;DIV&#x27; &#x27;H1&#x27;</span></span><br><span class="line"><span class="comment">    所以你在比较的时候需要把 tagName 转换为大写字母</span></span><br><span class="line"><span class="comment">    使用如下 js 标准库函数转换</span></span><br><span class="line"><span class="comment">    tagName.toUpperCase()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> e = element</span><br><span class="line">    <span class="keyword">while</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断 e 是否和 tagName 相等</span></span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">tagName</span>.<span class="title function_">toUpperCase</span>() == idName.<span class="title function_">toUpperCase</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            e = e.<span class="property">parentElement</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closest = <span class="keyword">function</span>(<span class="params">element, selector</span>)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    element 是一个 DOM 元素</span></span><br><span class="line"><span class="comment">    selector 是一个 string, 表示一个选择器</span></span><br><span class="line"><span class="comment">    可能的值是  &#x27;div&#x27;  &#x27;#id-div-gua&#x27;  &#x27;.red&#x27; 这三种</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    循环查找 element 的直系父元素</span></span><br><span class="line"><span class="comment">    如果父元素符合选择器, 则返回这个父元素</span></span><br><span class="line"><span class="comment">    如果找到 document 都还没有, 则返回 null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> flag = selector[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> className = selector.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">closestClass</span>(element, className)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> idName = selector.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">closestId</span>(element, idName)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> tag = selector</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">closestId</span>(element, tag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>guajs简单版本</title>
      <link href="/2016/11/11/2016fe/20161111/"/>
      <url>/2016/11/11/2016fe/20161111/</url>
      
        <content type="html"><![CDATA[<p>guajs简单版本，备用工具</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="keyword">function</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> es = <span class="keyword">function</span>(<span class="params">selector</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selector)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appendHtml = <span class="keyword">function</span>(<span class="params">element, html</span>) &#123;</span><br><span class="line">element.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, html)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindEvent = <span class="keyword">function</span>(<span class="params">element, eventName, callback</span>) &#123;</span><br><span class="line">    element.<span class="title function_">addEventListener</span>(eventName, callback)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> toggleClass = <span class="keyword">function</span>(<span class="params">element, className</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (element.<span class="property">classList</span>.<span class="title function_">contains</span>(className)) &#123;</span><br><span class="line">        element.<span class="property">classList</span>.<span class="title function_">remove</span>(className)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element.<span class="property">classList</span>.<span class="title function_">add</span>(className)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removeClassAll = <span class="keyword">function</span>(<span class="params">className</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> selector = <span class="string">&#x27;.&#x27;</span> + className</span><br><span class="line">    <span class="keyword">var</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selector)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = elements[i]</span><br><span class="line">        e.<span class="property">classList</span>.<span class="title function_">remove</span>(className)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindAll = <span class="keyword">function</span>(<span class="params">selector, eventName, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selector)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = elements[i]</span><br><span class="line">        <span class="title function_">bindEvent</span>(e, eventName, callback)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// find 函数可以查找 element 的子元素</span></span><br><span class="line"><span class="keyword">var</span> find = <span class="keyword">function</span>(<span class="params">element, selector</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> element.<span class="title function_">querySelector</span>(selector)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// find 函数可以查找 element 的所有子元素</span></span><br><span class="line"><span class="keyword">var</span> findAll = <span class="keyword">function</span>(<span class="params">element, selector</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> element.<span class="title function_">querySelectorAll</span>(selector)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js同步异步</title>
      <link href="/2016/11/10/2016fe/20161110/"/>
      <url>/2016/11/10/2016fe/20161110/</url>
      
        <content type="html"><![CDATA[<h1 id="guasync-file"><a href="#guasync-file" class="headerlink" title="guasync file"></a>guasync file</h1><p>&#x2F;*<br> 同步和异步编程的概念</p><p> 同步的意思是 函数通过返回值来传递数据<br> 函数从获取数据一直到返回数据之间的时间一直在等待</p><p> 异步的意思是 函数通过回调函数的方式来传递获取的数据<br> 函数执行后立刻就返回了, 数据获取成功后, 调用回调函数并传递参数<br> *&#x2F;</p> <span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> log = <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>, <span class="string">&#x27;---&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们先写入文件</span></span><br><span class="line"><span class="comment">// 写入成功后 读取当前目录看是否有这个文件</span></span><br><span class="line"><span class="comment">// 如果有这个文件, 我们读取文件的内容并打印出来</span></span><br><span class="line"><span class="comment">// 然后我们删除这个文件</span></span><br><span class="line"><span class="keyword">var</span> filename = <span class="string">&#x27;message.txt&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入前&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">writeFile</span>(filename, <span class="string">&#x27;你好 Node.js&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readdir</span>(<span class="string">&#x27;.&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, files</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件成功 files&#x27;</span>, files)</span><br><span class="line">        <span class="keyword">if</span>(files.<span class="title function_">includes</span>(filename)) &#123;</span><br><span class="line">            fs.<span class="title function_">readFile</span>(filename, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 读取文件成功, 打印并删除文件, data 并不是 string 而是一个 Buffer 对象(以后会讲)</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取成功&#x27;</span>, data)</span><br><span class="line">                fs.<span class="title function_">unlink</span>(filename, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`最后一步, 文件 <span class="subst">$&#123;filename&#125;</span> 成功删除`</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入函数调用后&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> guasync = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="comment">// setTimeout 函数一定会把第一个参数放到后台去执行</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>()</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> processFiles = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> filename = <span class="string">&#x27;guasync.txt&#x27;</span></span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;同步写入前&#x27;</span>)</span><br><span class="line">    fs.<span class="title function_">writeFileSync</span>(filename, <span class="string">&#x27;你好 同步 api&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> files = fs.<span class="title function_">readdirSync</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件成功 files&#x27;</span>, files)</span><br><span class="line">    <span class="keyword">if</span>(files.<span class="title function_">includes</span>(filename)) &#123;</span><br><span class="line">        <span class="keyword">var</span> data = fs.<span class="title function_">readFileSync</span>(filename)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取成功&#x27;</span>, data)</span><br><span class="line">        fs.<span class="title function_">unlinkSync</span>(filename)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`最后一步, 文件 <span class="subst">$&#123;filename&#125;</span> 成功删除`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;同步写入完成后&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// http://www.kuaidadi.com/assets/js/animate.js</span></span><br><span class="line"><span class="title function_">guasync</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">processFiles</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;干点别的事情&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// guasync(function() &#123;</span></span><br><span class="line"><span class="comment">//     step1()</span></span><br><span class="line"><span class="comment">//     step2()</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h1 id="guasync-ajax"><a href="#guasync-ajax" class="headerlink" title="guasync ajax"></a>guasync ajax</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ajax = <span class="keyword">function</span>(<span class="params">request</span>) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     request 是一个 object, 有如下属性</span></span><br><span class="line"><span class="comment">     method, 请求的方法, string</span></span><br><span class="line"><span class="comment">     url, 请求的路径, string</span></span><br><span class="line"><span class="comment">     data, 请求发送的数据, 如果是 GET 方法则没这个值, string</span></span><br><span class="line"><span class="comment">     callback, 响应回调, function</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     本题不会就放弃, 本题带了一个用法在下方</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> r = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    r.<span class="title function_">open</span>(request.<span class="property">method</span>, request.<span class="property">url</span>, <span class="literal">false</span>)</span><br><span class="line">    r.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, request.<span class="property">contentType</span>)</span><br><span class="line">    r.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(r.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="title function_">log</span>(<span class="string">&#x27;ajax 状态 4 准备执行 callback&#x27;</span>)</span><br><span class="line">            data = r.<span class="property">response</span></span><br><span class="line">            <span class="comment">// request.callback(r.response)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (request.<span class="property">method</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        r.<span class="title function_">send</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        r.<span class="title function_">send</span>(request.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> request = &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://vip.cocode.cc/sandbox/todo/3400711034/all&#x27;</span>,</span><br><span class="line">    <span class="attr">callback</span>: <span class="keyword">function</span> (<span class="params">r</span>) &#123;</span><br><span class="line">        <span class="title function_">log</span>(<span class="string">&#x27;响应完成 callback&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> guasync = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="comment">// setTimeout 函数一定会把第一个参数放到后台去执行</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>()</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">guasync</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;ajax 开始&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> data = <span class="title function_">ajax</span>(request)</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;ajax 结束&#x27;</span>, data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;guasync 结束&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 新内容</title>
      <link href="/2016/11/09/2016fe/20161109/"/>
      <url>/2016/11/09/2016fe/20161109/</url>
      
        <content type="html"><![CDATA[<p>HTML5 新内容主要是以下几点</p><p>语义化标签如 article、footer、header、nav、section<br>视频和音频标签 video 和 audio<br>本地离线存储 localStorage 和 sessionStorage<br>新增表单特性如新控件 calendar email color 等<br>用于绘图的 canvas 标签(用于游戏等)<br>用于高性能图形的 WebGL(用于游戏等, 这个是专用领域的知识, 我们不会直接接触)</p><span id="more"></span><p>HTML5 语义化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">原来的标签</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">完整的 html5 语义化标签是这样的</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">section</span>&gt;</span>区块<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span>&gt;</span>侧栏<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span>页脚<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;article&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span></span><br><span class="line">        前端掏粪指南</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;content&#x27;</span>&gt;</span></span><br><span class="line">        前端掏粪指南</span><br><span class="line">        前端掏粪指南</span><br><span class="line">        前端掏粪指南</span><br><span class="line">        前端掏粪指南</span><br><span class="line">        前端掏粪指南</span><br><span class="line">        前端掏粪指南</span><br><span class="line">        前端掏粪指南</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;article&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span></span><br><span class="line">        前端掏粪指南</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;content&#x27;</span>&gt;</span></span><br><span class="line">        前端掏粪指南</span><br><span class="line">        前端掏粪指南</span><br><span class="line">        前端掏粪指南</span><br><span class="line">        前端掏粪指南</span><br><span class="line">        前端掏粪指南</span><br><span class="line">        前端掏粪指南</span><br><span class="line">        前端掏粪指南</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gua</span>&gt;</span><span class="tag">&lt;/<span class="name">gua</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">gua &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 42px;</span><br><span class="line">  height: 42px;</span><br><span class="line">  background: url(&#x27;gua.png&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">视频和音频标签和配套的 JS API 是新加入的功能</span><br><span class="line">以前的话只能依赖 flash, 现在有 video 和 audio</span><br><span class="line"></span><br><span class="line">带控制器的视频标签, 不同浏览器有不同的文件格式要求</span><br><span class="line">所以用 2 个 source 标签指定不同的视频格式</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogv&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">带控制器的音频标签, 不同浏览器有不同的文件格式要求</span><br><span class="line">所以用 2 个 source 标签指定不同的音频格式</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">&#x27;id-audio-player&#x27;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;audio.ogg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span>&gt;</span></span><br><span class="line">&lt;/audio &gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">audio 基本操作如下</span><br><span class="line">var a = document.querySelector(&#x27;#id-audio-player&#x27;)</span><br><span class="line">a.play()            // 播放</span><br><span class="line">a.pause()           // 暂停</span><br><span class="line">a.autoplay          // bool 属性</span><br><span class="line">a.src               // 音乐文件的地址</span><br><span class="line">a.volume            // 音量, 0 - 1.0</span><br><span class="line">a.duration          // 时长, 秒为单位</span><br><span class="line">a.currentTime = 1   // 当前播放时间, 秒为单位</span><br><span class="line">a.playbackRate      // 播放速率, 默认为 1</span><br><span class="line"></span><br><span class="line">官方文档如下(文档永远是这样的)</span><br><span class="line">https://developer.mozilla.org/en/docs/Web/HTML/Element/audio</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>HTML5 提供两种存储方法 localStorage 与 sessionStorage<br>localStorage 与 sessionStorage 都是用来存储数据的<br>使用方式一样, 区别只在于过期时间<br>localStorage 没有过期时间, 要用 clear remove 主动删除数据<br>sessionStorage 的数据在用户关闭浏览器后将被删除</p><p>由于之前有使用, 这里就不讲了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">新增表单特性如控件 calendar email color 等</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;calendar&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">boolean 值的属性只要写了属性就是 true</span><br><span class="line"></span><br><span class="line">false</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">true</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用于绘图的 canvas 标签(用于游戏等)<br>canvas 标签提供一块画布, 可以访问画布中的像素点<br>主要用途是游戏或者是高级复杂的图形效果<br>例如 particles.js phaser.js 这些库, 例子如下<br><a href="https://phaser.io/examples/v2/weapon/fire-rate">https://phaser.io/examples/v2/weapon/fire-rate</a></p><p>移动网页<br>手机网页和电脑网页的技术是一样的<br>区别仅在屏幕尺寸和交互方式<br>下面只列出手机页面开发中重要的点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1 设置 viewport</span><br><span class="line">viewport 是 html 的父元素</span><br><span class="line">在手机上需要用下面的语句设置它的尺寸</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">属性解释</span><br><span class="line">width=device-width      宽度等于设备宽度</span><br><span class="line">height=device-height    高度等于设备高度</span><br><span class="line">initial-scale           初始缩放比例</span><br><span class="line">minimum-scale           允许用户缩放的最小比例</span><br><span class="line">maximum-scale           允许用户缩放的最大比例</span><br><span class="line">user-scalable           是否允许用户缩放</span><br></pre></td></tr></table></figure><p>2 调试页面<br>可以用 chrome 的开发工具调试手机页面<br>但是由于浏览器兼容性问题, 最终的外观<br>得用手机真机来检验<br>标签&#x2F;css 的兼容性问题有很多网站可以查询<br>比如下面这个网站<br>caniuse.com</p><p>3 媒体查询<br>媒体查询实际上是用来做响应式设计的<br>响应式设计就是一套 CSS 根据当前的分辨率选择不同的样式<br>现在已经没有前几年那么热门了, 不过我们还是过一遍</p><p>媒体查询主要用来:</p><ul><li>检测媒体的类型, 比如 screen, tv等</li><li>检测布局视口的特性, 比如视口的宽高分辨率等<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用法</span><br><span class="line">@media all and (min-width: 200px) and (max-width: 300px)&#123;</span><br><span class="line">    body &#123;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上面代码中, all 是媒体类型, 代表任何设备<br>and 是逻辑操作<br>意思是, 对于任何设备, 在宽度在 200-300 的范围内应用这个样式</li></ul><p>4 Hybrid App(混合开发)<br>混合开发说的是, 你写的网页运行在手机程序里<br>本来网页能提供的功能是有限的<br>但是应用程序可以给页面添加函数<br>在这种情况下, js 就可以调用别人提供的功能<br>这就是混合开发的基础</p><p>比如你 js 不能实现让手机震动的功能<br>但是别的程序能实现这个功能, 并且把这个功能<br>注册为你网页中的一个 js 函数<br>这样 js 也就拥有这个功能了<br>然后你调用 vfds() 就让手机震动了</p><p>这样的效果就是原生代码(相对于 js 而言的<br>官方开发语言)实现功能并且提供 js 函数<br>js 代码用别人提供的功能写逻辑</p><p>说穿了就这么一回事, 无任何难度的普通掏粪而已</p>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux相关</title>
      <link href="/2016/11/08/2016linux/20161108/"/>
      <url>/2016/11/08/2016linux/20161108/</url>
      
        <content type="html"><![CDATA[<p>Linux 服务器介绍和使用<br>常用 Linux 版本分析<br>常用工具&#x2F;概念&#x2F;使用方式<br>以前和现在的服务器(托管和云平台)<br>服务器配置<br>部署项目</p><span id="more"></span><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br></pre></td><td class="code"><pre><span class="line">域名购买(腾讯云买 .cc 域名)</span><br><span class="line">VPS购买, 可以用下面的服务(论坛使用的主机商), 2.5刀/月的即可</span><br><span class="line">http://www.vultr.com/?ref=6991688</span><br><span class="line">    地址选 日本, 如果不能访问, 那么就删除再新建一个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为什么服务器多用 Linux?</span><br><span class="line">    微软很贵, Linux 免费</span><br><span class="line">Linux 生态圈更好</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Linux 的各种版本分析</span><br><span class="line">Debian 最好的 最稳定</span><br><span class="line">Ubuntu 抄的 debian, 用途广泛, 用户多(我们用的是 ubuntu 1604)</span><br><span class="line">CentOS 垃圾 工具老旧, 使用不方便</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">连接服务器推荐使用 cmder 软件(windows下)</span><br><span class="line">如果在 mac 下, 直接用终端连接</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">系统配置</span><br><span class="line">程序安装</span><br><span class="line">PATH</span><br><span class="line">命令</span><br><span class="line">参数</span><br><span class="line">权限</span><br><span class="line">用户</span><br><span class="line">用户组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">常用操作</span><br><span class="line">pwd</span><br><span class="line">print working dir</span><br><span class="line">显示现在所处的目录</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line">不带参数就显示当前目录下的所有文件</span><br><span class="line">程序可以加选项</span><br><span class="line">-l 显示详细信息</span><br><span class="line">-h 人性化显示文件尺寸</span><br><span class="line">-a 显示所有文件， 以 . 开头的文件是隐藏文件</span><br><span class="line">还可以带一个目录当参数，这样就会显示这个目录</span><br><span class="line">ls /usr</span><br><span class="line">下面两个是等价的</span><br><span class="line">ls -l -h</span><br><span class="line">ls -lh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入命令时, 可以用 tab 补全</span><br><span class="line"></span><br><span class="line">cd</span><br><span class="line">cd /usr</span><br><span class="line">改变当前目录</span><br><span class="line">    . 代表当前目录</span><br><span class="line">    .. 代表上级目录</span><br><span class="line">cd 不带参数就回到默认的家目录, 与 cd ~ 的效果是一样的</span><br><span class="line">每个用户都有一个家目录，默认在 /home/用户名</span><br><span class="line">root 用户的家目录是 /root</span><br><span class="line"></span><br><span class="line">我们可以在 linux 命令行中使用 nano 这个编辑器, 很方便</span><br><span class="line"></span><br><span class="line">操作文件与目录</span><br><span class="line">cp</span><br><span class="line">复制出一个文件，用法如下</span><br><span class="line">cp a.txt b.txt</span><br><span class="line">复制 a.txt 并把新文件取名为 b.txt</span><br><span class="line">复制目录要加上 -r 参数</span><br><span class="line">cp -r a b</span><br><span class="line">mkdir</span><br><span class="line">创建一个目录</span><br><span class="line">-p 可以一次性创建多层目录</span><br><span class="line">mkdir -p a/b/c</span><br><span class="line">rmdir</span><br><span class="line">只能用来删除一个空目录</span><br><span class="line">rm</span><br><span class="line">这个命令直接删除东西，很危险，一般不要用</span><br><span class="line">删除文件或者目录</span><br><span class="line">-f 强制删除</span><br><span class="line">-r 用来递归删除目录</span><br><span class="line">mv</span><br><span class="line">移动文件或者文件夹</span><br><span class="line">也可以用来改名</span><br><span class="line">mv a.txt b.txt</span><br><span class="line">mv b.txt ../</span><br><span class="line">mv b.txt ../gua.txt</span><br><span class="line">可以用 mv xx /tmp 的方式来将文件放入临时文件夹</span><br><span class="line">（/tmp是操作系统提供的临时文件夹，重启会删除里面的所有文件）</span><br><span class="line"></span><br><span class="line">ls -l /usr/bin/ &gt; b.txt</span><br><span class="line"></span><br><span class="line">cat</span><br><span class="line">显示文件内容</span><br><span class="line">tac</span><br><span class="line">反过来显示文件内容</span><br><span class="line">nl</span><br><span class="line">显示内容并附带行号</span><br><span class="line">more less head tail</span><br><span class="line">more 可以分屏分批看文件内容</span><br><span class="line">less 比 more 更高级，可以前后退看文件</span><br><span class="line">h 显示屏幕帮助, q 退出 less 程序</span><br><span class="line"></span><br><span class="line">head 可以显示文件的前 10 行</span><br><span class="line">tail 可以显示文件的后 10 行</span><br><span class="line">head 和 tail 有一个 -n 参数</span><br><span class="line">head -n 20 a.gua</span><br><span class="line">touch</span><br><span class="line">touch a.gua</span><br><span class="line">如果 a.gua 存在就更新修改时间</span><br><span class="line">如果 a.gua 不存在就创建文件</span><br><span class="line"></span><br><span class="line">权限操作</span><br><span class="line">腾讯主机默认是用 ubuntu 这个用户登录, 为了方便操作, 统一选择 root 用户登录</span><br><span class="line">sudo</span><br><span class="line">用管理员帐户执行程序</span><br><span class="line">比如安装程序或者修改一些系统配置都需要管理员权限</span><br><span class="line"></span><br><span class="line">文件权限    文件类型    用户 用户组 文件大小  修改日期           文件名</span><br><span class="line">-rw-r--r--  1       root root   45      May 24 10:17    lazy_dog.txt</span><br><span class="line">-rw-r--r--  1       root root   56      May 24 09:47    ls-error.txt</span><br><span class="line">-rw-r--r--  1       root root   30      May 24 09:45    ls-output.txt</span><br><span class="line">drwxr-xr-x  4       root root 4096      May 24 03:37    node9</span><br><span class="line"></span><br><span class="line"> drwxr-xr-x 第一位是表示文件类型, 后面每三位分为一组, 每组表示的权限意思是一样的</span><br><span class="line">文件类型    是否可读  是否可写  是否可执行</span><br><span class="line">d           r       w           x</span><br><span class="line">-           r       w           x</span><br><span class="line"></span><br><span class="line">其中 d 表示 目录 directory, - 表示普通文件</span><br><span class="line">三组 rwx 分表代表 所属用户|同组用户(文件所属的群组)|其他用户</span><br><span class="line">rwx 可以用数字表示为 421</span><br><span class="line"></span><br><span class="line">777 表示三组都是 rwx rwx rwx</span><br><span class="line">也就是 -rwxrwxrwx</span><br><span class="line"></span><br><span class="line">每一位使用的是 2 进制数字表示</span><br><span class="line">210</span><br><span class="line">于是乎</span><br><span class="line">r-- 就是 4</span><br><span class="line">rw- 就是 6</span><br><span class="line">rwx 就是 7</span><br><span class="line">r-x 就是 5</span><br><span class="line"></span><br><span class="line">-rw-rw-r--     文件的访问权限</span><br><span class="line">1              文件的链接数目(这个不用关心)</span><br><span class="line">root           文件所有者的用户名</span><br><span class="line">root           文件所属用户组</span><br><span class="line">10             文件大小（单位是字节）</span><br><span class="line">11/09 20:28    上次修改文件的日期和时间</span><br><span class="line">b.gua          文件名</span><br><span class="line"></span><br><span class="line">// 我们只考虑一个 root 用户的情况, 所以这部分不演示了, 直接跳过</span><br><span class="line">chown</span><br><span class="line">改变文件的用户</span><br><span class="line">chown gua c.gua</span><br><span class="line">chown gua:gua c.gua</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod</span><br><span class="line">改变文件权限</span><br><span class="line">666 这种表示按照 8 进制数字更改, 换成字符就是 rw- rw- rw-</span><br><span class="line"></span><br><span class="line">u   user    表示文件所有者</span><br><span class="line">g   group   表示文件所属群组</span><br><span class="line">o   others  表示其他用户</span><br><span class="line">a   all     表示 ugo 的组合</span><br><span class="line">+x 表示添加 x 权限, 等价于 a+x, 文件所有者/文件所属群组/其他用户都添加 x 权限</span><br><span class="line">-x 表示减少 x 权限</span><br><span class="line">chmod 666 a.txt</span><br><span class="line">chmod +x b.txt</span><br><span class="line">chmod -x tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">信息查找</span><br><span class="line">file</span><br><span class="line">显示文件的类型（不是百分之百准确）</span><br><span class="line">uname</span><br><span class="line">显示操作系统的名字或者其他信息</span><br><span class="line">uname -r</span><br><span class="line">uname -a</span><br><span class="line">which</span><br><span class="line">which perl</span><br><span class="line">有时候开发语言里会提到 3p, 也就是 perl php python</span><br><span class="line">which pwd</span><br><span class="line">显示 pwd 的具体路径</span><br><span class="line">whereis</span><br><span class="line">whereis ls</span><br><span class="line">显示更全面的信息</span><br><span class="line">whoami</span><br><span class="line">find . -name &quot;&quot;</span><br><span class="line"></span><br><span class="line">奇怪符号</span><br><span class="line"></span><br><span class="line">~   家目录快捷方式</span><br><span class="line">&gt;   覆盖式重定向</span><br><span class="line">&gt;&gt;  追加重定向</span><br><span class="line">|   管道, 很麻烦 以后说</span><br><span class="line">``  获取命令执行的结果</span><br><span class="line">比如 echo pwd 输出的就是 pwd 这个字符串</span><br><span class="line">echo `pwd` 输出的是 pwd 命令执行的结果, 相当于一个变量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp;   后台执行</span><br><span class="line">node app.js &amp;</span><br><span class="line">可以用 fg 命令把一个在后台的程序拉到前台来</span><br><span class="line">可以用 Ctrl-z 来把一个前台的程序放到后台去挂起</span><br><span class="line">()  开新的子进程shell执行(不用掌握这一条, 因为几乎没人用)</span><br><span class="line"></span><br><span class="line">history</span><br><span class="line">查看历史命令</span><br><span class="line">grep</span><br><span class="line">查找</span><br><span class="line">这两个一般配合使用</span><br><span class="line">history | grep touch</span><br><span class="line"></span><br><span class="line">ps</span><br><span class="line">查看进程, 一般用下面的用法</span><br><span class="line">ps ax</span><br><span class="line">ps ax | grep node</span><br><span class="line">查看带 node 字符串的进程</span><br><span class="line"></span><br><span class="line">kill 和 killall 杀进程</span><br><span class="line">用 ps ax 找到进程id (pid)</span><br><span class="line">kill [pid]</span><br><span class="line">kill -9 [pid]</span><br><span class="line">kill -15 [pid]</span><br><span class="line">killall 是用进程名字来杀进程</span><br><span class="line"></span><br><span class="line">后台前台</span><br><span class="line">fg</span><br><span class="line">jobs</span><br><span class="line"></span><br><span class="line">快捷键</span><br><span class="line">C-z     把正在运行的程序挂起并放在后台</span><br><span class="line">C-c     中断程序的执行</span><br><span class="line">C-d     输入文件终止符(end of file, EOF)</span><br><span class="line"></span><br><span class="line">比如输入 cat(不带参数), 会等待着从键盘输入内容</span><br><span class="line">hello</span><br><span class="line">输入 Ctrl-d 后会结束输入</span><br><span class="line"></span><br><span class="line">输入快捷键</span><br><span class="line">C-t     交换光标前面的两个字符(只在终端有效)</span><br><span class="line">C-w     一次删除一个单词</span><br><span class="line">C-u     一次删除一行（从光标删除到行首）</span><br><span class="line">C-k     从光标删除到行尾</span><br><span class="line">C-d     删除后一个字符</span><br><span class="line">C-h     删除前一个字符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C-f     forward 往前 就是右</span><br><span class="line">C-b     backward 往后 就是左箭头</span><br><span class="line">C-p     pres    往上 就是上箭头</span><br><span class="line">C-n     next    往下 就是下箭头</span><br><span class="line">C-a     光标回到行首</span><br><span class="line">C-e     光标跳到行尾</span><br><span class="line"></span><br><span class="line">快捷键</span><br><span class="line">C-z 挂起到后台</span><br><span class="line">C-c 中断程序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reboot</span><br><span class="line">重启</span><br><span class="line">shutdown</span><br><span class="line">关机</span><br><span class="line">可以用参数指定时间</span><br><span class="line">halt</span><br><span class="line">关机</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">配置服务器免登陆设置</span><br><span class="line">ssh-key</span><br><span class="line">===</span><br><span class="line">生成 ssh-key</span><br><span class="line">===</span><br><span class="line"></span><br><span class="line">*** 注意, 不懂就在群里问</span><br><span class="line">Mac 用户直接打开终端输入命令</span><br><span class="line">Win 打开 cmder 程序, 在里面输入下面的命令</span><br><span class="line"></span><br><span class="line">1. 在本机生成 ssh key 公钥私钥</span><br><span class="line">注意 下面的 mykey 随便换一个你喜欢的名字, 这是一个标注, 方便你看的</span><br><span class="line">ssh-keygen -C &lt;mykey&gt;</span><br><span class="line">会提示你生成的文件的地址, 并且让你输入密码, 你不要输入密码, 直接回车</span><br><span class="line"></span><br><span class="line">这样你就得到了一对 ssh-key, 这是用于登录服务器用的</span><br><span class="line">默认你会得到两个文件</span><br><span class="line">id_rsa 是私钥 自己保存 不要给别人看</span><br><span class="line">id_rsa.pub 是公钥, 是要到处使用的</span><br><span class="line">这个是我们之前提到的非对称加密</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">===</span><br><span class="line">重建服务器并且配置 ssh-key</span><br><span class="line">===</span><br><span class="line"></span><br><span class="line">去 vultr 的管理界面</span><br><span class="line">先删除(Destory)现有的服务器</span><br><span class="line">新建服务器的时候, 把刚才生成的 id_rsa.pub 文件(用 atom/webstorm 可以打开)里面的内容加入到 ssh-key 步骤中</span><br><span class="line">这样你就可以不用密码, 自动登录服务器了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 如果你不想重建服务器, 配置 ssh-key 的方法如下</span><br><span class="line">// 在服务器把本机生成的 public key 添加到 /root/.ssh/authorized_keys 文件中</span><br><span class="line">// 1 用 root 用户登录到服务器, 创建 .ssh 目录</span><br><span class="line">cd /root</span><br><span class="line">mkdir .ssh</span><br><span class="line">// 2 编辑 authorized_keys 文件, 把刚才生成的 id_rsa.pub 文件里面的内容粘贴进去并保存退出</span><br><span class="line">// 注意, 这里可以粘贴多个 key, 一行一个</span><br><span class="line">nano .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 安装必备软件</span><br><span class="line">// 安装 oh-my-zsh 配置(方便你使用命令行的配置)</span><br><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class="line"></span><br><span class="line">// 安装防火墙 和 防火墙的基本套路配置</span><br><span class="line">// 防火墙的作用(redis安全漏洞)</span><br><span class="line">apt-get install ufw</span><br><span class="line">ufw allow 22</span><br><span class="line">ufw allow 80</span><br><span class="line">ufw allow 443</span><br><span class="line">ufw allow 3000</span><br><span class="line">ufw allow 8090/8388(这个是留给飞机用的端口)</span><br><span class="line">ufw default deny incoming</span><br><span class="line">ufw default allow outgoing</span><br><span class="line">ufw status verbose</span><br><span class="line">ufw enable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">部署项目</span><br><span class="line">软件安装</span><br><span class="line">====</span><br><span class="line">安装 git nginx</span><br><span class="line">apt-get install git nginx</span><br><span class="line"></span><br><span class="line">ubuntu 的软件仓库中的 nodejs 更新很慢, 几乎可以认为不可用,</span><br><span class="line">所以我们从 nodeSource 仓库中安装新款 nodejs</span><br><span class="line"></span><br><span class="line">配置 nodeSource 仓库</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -</span><br><span class="line"></span><br><span class="line">配置之后就可以安装最新的 nodejs</span><br><span class="line">apt-get install nodejs</span><br><span class="line"></span><br><span class="line">安装 yarn</span><br><span class="line">npm install yarn -g(这个官网不推荐)</span><br><span class="line"> curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class="line"> echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list</span><br><span class="line"> sudo apt-get update &amp;&amp; sudo apt-get install yarn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用 git pull 项目</span><br><span class="line">用 sourcetree</span><br><span class="line"></span><br><span class="line">安装依赖</span><br><span class="line">yarn install</span><br><span class="line"></span><br><span class="line">配置 nginx</span><br><span class="line">ln -s /var/www/weibo/weibo.nginx /etc/nginx/sites-enabled/weibo</span><br><span class="line"></span><br><span class="line">` 这部分和部署无关</span><br><span class="line">列出 nginx/sites-enabled 下面的文件</span><br><span class="line">root@linlab:~# ls -l /etc/nginx/sites-enabled/</span><br><span class="line"></span><br><span class="line">第一个字母是 l, 这个表示 weibo 是一个软链接, 当访问 weibo 时,</span><br><span class="line">实际上访问的是 /var/www/weibo/weibo.nginx</span><br><span class="line">这样做的好处是我们只需要更新 weibo.nginx 就可以</span><br><span class="line">软链接类似 windows 下的快捷方式</span><br><span class="line"></span><br><span class="line">lrwxrwxrwx 1 root root 26 May 23 14:09 weibo -&gt; /var/www/weibo/weibo.nginx</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line">移除默认的配置文件</span><br><span class="line">mv /etc/nginx/sites-enabled/default /tmp</span><br><span class="line"></span><br><span class="line">重启 nginx</span><br><span class="line">service nginx restart</span><br><span class="line"></span><br><span class="line">运行程序</span><br><span class="line">yarn run start</span><br><span class="line"></span><br><span class="line">安装 pm2</span><br><span class="line">yarn global add pm2</span><br><span class="line"></span><br><span class="line">pm2 日志</span><br><span class="line">/root/.pm2/logs 文件夹会包含所有应用的日志</span><br><span class="line"></span><br><span class="line">实时日志命令</span><br><span class="line">pm2 logs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们已经有 node 的情况下, 为什么要用 nginx</span><br><span class="line">1. node 性能是不如 nginx 的, nginx 处理静态文件的性能非常高</span><br><span class="line">2. nginx 接收 80 端口的请求(来自用户的请求), 然后转发给各个 app.js(app.js</span><br><span class="line">实际上是应用服务器, 也就是我们常说的框架)</span><br><span class="line">3. nginx 是使用非常广泛的静态服务器, 安全性方面是非常好的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 给静态资源增加一个路由，如果发现请求是静态资源，</span><br><span class="line"> nginx直接处理, 不用让node来处理，可以这么理解吗</span><br><span class="line"> 当然可以, 这个是完全正确的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 高性能的静态服务器 nginx  nginx   nginx       nginx       nginx</span><br><span class="line">2. 高性能的网络(?)服务器     node    gunicorn    unicorn     tomcat/jetty</span><br><span class="line">3. 一般性能的开发服务器      node    app          app         app</span><br><span class="line"></span><br><span class="line">// ===</span><br><span class="line">// 服务器中文编码问题</span><br><span class="line">// ===</span><br><span class="line">//</span><br><span class="line">// 编辑下面的文件, 不要拼错</span><br><span class="line">nano /etc/environment</span><br><span class="line">// 加入下面的内容, 保存退出</span><br><span class="line">LC_CTYPE=&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_ALL=&quot;en_US.UTF-8&quot;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2016/11/07/2016fe/20161107/"/>
      <url>/2016/11/07/2016fe/20161107/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据结构与算法分析</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据结构就是存储数据的方式</span></span><br><span class="line"><span class="comment">算法分析是对一个算法的时间的大略估计</span></span><br><span class="line"><span class="comment">算法是有特定的套路的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">了解 5 种时间复杂度即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间、空间复杂度(空间复杂度一般不考虑)</span></span><br><span class="line"><span class="comment">// 复杂度是对一个操作的大致估计</span></span><br><span class="line"><span class="comment">// 复杂度从小到大依次如下</span></span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">五种常见时间复杂度</span></span><br><span class="line"><span class="comment">复杂度用 大 O 记法 来描述(大 O 记法是描述算法复杂度的符号)</span></span><br><span class="line"><span class="comment">O(1)</span></span><br><span class="line"><span class="comment">    常数复杂度，最快速的算法。</span></span><br><span class="line"><span class="comment">    求数组前 10000 个元素的和</span></span><br><span class="line"><span class="comment">    字典和集合的存取都是 O(1)</span></span><br><span class="line"><span class="comment">    数组的存取是 O(1)</span></span><br><span class="line"><span class="comment">O(lgN)</span></span><br><span class="line"><span class="comment">    对数复杂度</span></span><br><span class="line"><span class="comment">    假设有一个有序数组，以二分法查找</span></span><br><span class="line"><span class="comment">O(n)</span></span><br><span class="line"><span class="comment">    线性复杂度</span></span><br><span class="line"><span class="comment">    假设有一个数组，以遍历的方式在其中查找元素</span></span><br><span class="line"><span class="comment">O(NlogN)</span></span><br><span class="line"><span class="comment">    求两个数组交集，其中一个是有序数组</span></span><br><span class="line"><span class="comment">    假设 A 数组的长度是 M, 无序</span></span><br><span class="line"><span class="comment">    假设 B 数组的长度是 N, 有序</span></span><br><span class="line"><span class="comment">    A 数组每一个元素都要在 B 数组中进行查找操作</span></span><br><span class="line"><span class="comment">    每次查找如果使用二分法则复杂度是 lgN</span></span><br><span class="line"><span class="comment">    加起来就是 M * lgN</span></span><br><span class="line"><span class="comment">    所以时间复杂度是 NlogN</span></span><br><span class="line"><span class="comment">O(N²)</span></span><br><span class="line"><span class="comment">    平方复杂度</span></span><br><span class="line"><span class="comment">    求两个无序数组的交集</span></span><br><span class="line"><span class="comment">    假设 A 数组的长度是 M, 无序</span></span><br><span class="line"><span class="comment">    假设 B 数组的长度是 N, 无序</span></span><br><span class="line"><span class="comment">    A 数组每一个元素都要在 B 数组中进行查找操作</span></span><br><span class="line"><span class="comment">    每次查找只能使用遍历操作, 所以每次查找都是 N</span></span><br><span class="line"><span class="comment">    加起来就是 M * N</span></span><br><span class="line"><span class="comment">    所以时间复杂度是 N²</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据结构</span></span><br><span class="line"><span class="comment">===</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">针对常用的操作，我们发明了一套常用的数据结构</span></span><br><span class="line"><span class="comment">四大数据结构</span></span><br><span class="line"><span class="comment">1，数组</span></span><br><span class="line"><span class="comment">    连续的一块内存</span></span><br><span class="line"><span class="comment">    读取元素时间是 O(1)</span></span><br><span class="line"><span class="comment">    插入、删除是 O(n)</span></span><br><span class="line"><span class="comment">2，链表</span></span><br><span class="line"><span class="comment">    手拉手的盒子，一个盒子只能访问左右手的盒子</span></span><br><span class="line"><span class="comment">    以下标方式读取元素的时间是 O(n)</span></span><br><span class="line"><span class="comment">    插入、删除是 O(1)</span></span><br><span class="line"><span class="comment">    栈和队列是链表的特定场景应用(当然, 不用链表也能实现栈和队列)</span></span><br><span class="line"><span class="comment">3，字典(Hash Table 哈希表)</span></span><br><span class="line"><span class="comment">    把字符串转为数字作为下标存储到数组中</span></span><br><span class="line"><span class="comment">    字符串转化为数字的算法是 O(1)</span></span><br><span class="line"><span class="comment">    所以字典的存取操作都是 O(1)</span></span><br><span class="line"><span class="comment">    除非对数据有顺序要求，否则字典永远是最佳选择</span></span><br><span class="line"><span class="comment">    字符串转化为数字的算法</span></span><br><span class="line"><span class="comment">        1，确定数据规模，这样可以确定容器数组的大小 Size</span></span><br><span class="line"><span class="comment">        2，把字符当作 N 进制数字得到结果</span></span><br><span class="line"><span class="comment">            &#x27;gua&#x27; 被视为 g * 1 + u * 10 + a * 100 得到结果 n</span></span><br><span class="line"><span class="comment">            n % Size 作为字符串在数组中的下标</span></span><br><span class="line"><span class="comment">            通常 Size 会选一个 素数</span></span><br><span class="line"><span class="comment">4，搜索树(平衡二叉搜索树)（我们只用，不写，甚至只是隐含在用，你并不知道你用的是树）</span></span><br><span class="line"><span class="comment">    AVL 树</span></span><br><span class="line"><span class="comment">    红黑树</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">额外的，图是一种有时候有用但你一辈子都可能写不到的数据结构</span></span><br><span class="line"><span class="comment">只了解，不用学习如何实现</span></span><br><span class="line"><span class="comment">图的应用举例</span></span><br><span class="line"><span class="comment">    地图导航</span></span><br><span class="line"><span class="comment">    全国几个大城市之间的出行方案(有价格/时间/路途等权重)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> log = <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列结构(先进先出)</span></span><br><span class="line"><span class="comment">// 主要有 2 个操作</span></span><br><span class="line"><span class="comment">// enqueue dequeue</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Queue</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// data 是存储元素的数组</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="title class_">Queue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">enqueue</span> = <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">push</span>(element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="title class_">Queue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">dequeue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列长度</span></span><br><span class="line"><span class="title class_">Queue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">length</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空队列</span></span><br><span class="line"><span class="title class_">Queue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">empty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var q = new Queue()</span></span><br><span class="line"><span class="comment">// q.enqueue(1)</span></span><br><span class="line"><span class="comment">// q.enqueue(2)</span></span><br><span class="line"><span class="comment">// q.enqueue(3)</span></span><br><span class="line"><span class="comment">// log(&#x27;length&#x27;, q.length())</span></span><br><span class="line"><span class="comment">// log(q.dequeue())</span></span><br><span class="line"><span class="comment">// q.enqueue(4)</span></span><br><span class="line"><span class="comment">// log(q.dequeue())</span></span><br><span class="line"><span class="comment">// log(q.dequeue())</span></span><br><span class="line"><span class="comment">// log(q.dequeue())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stack 栈(先进后出)</span></span><br><span class="line"><span class="comment">// 常见的 3 个操作</span></span><br><span class="line"><span class="comment">// push pop top</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Stack</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// push 添加一个元素</span></span><br><span class="line"><span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">push</span>(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop 删除并返回最新添加的元素</span></span><br><span class="line"><span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// top 仅返回最新添加的元素</span></span><br><span class="line"><span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">top</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>[index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line">s.<span class="title function_">push</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">s.<span class="title function_">push</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"><span class="title function_">log</span>(s.<span class="title function_">pop</span>())</span><br><span class="line"><span class="title function_">log</span>(s.<span class="title function_">pop</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    s.<span class="title function_">push</span>(str[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    str1 += s.<span class="title function_">pop</span>(str[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">log</span>(str1)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">((1 + 2) * 3)</span></span><br><span class="line"><span class="comment">作业 验证括号匹配</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表</span></span><br><span class="line"><span class="comment">// LinkedList</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 15, 16, 27]</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 0, 4, 5, 6, 7]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表实现</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Node</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">element</span> = e</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var n1 = new Node(1)</span></span><br><span class="line"><span class="comment">// var n2 = new Node(2)</span></span><br><span class="line"><span class="comment">// var n3 = new Node(3)</span></span><br><span class="line"><span class="comment">// n1.next = n2</span></span><br><span class="line"><span class="comment">// n2.next = n3</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// var n = n1</span></span><br><span class="line"><span class="comment">// while(n != null) &#123;</span></span><br><span class="line"><span class="comment">//     log(&#x27;遍历链表&#x27;, n.element)</span></span><br><span class="line"><span class="comment">//     n = n.next</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">LinkedList</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="keyword">new</span> <span class="title class_">Node</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_length</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表末尾增加一个元素</span></span><br><span class="line"><span class="title class_">LinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">append</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(e)</span><br><span class="line">    <span class="keyword">var</span> n = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">while</span>(n.<span class="property">next</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        n = n.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    n.<span class="property">next</span> = node</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_length</span>++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个元素的 index</span></span><br><span class="line"><span class="title class_">LinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">indexOf</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> index = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> n = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(n.<span class="property">next</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e === n.<span class="property">element</span>) &#123;</span><br><span class="line">            index = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        n = n.<span class="property">next</span></span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回链表的长度</span></span><br><span class="line"><span class="title class_">LinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">length</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">LinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">log</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span></span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;遍历链表&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span>(n != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title function_">log</span>(<span class="string">&#x27; &gt; &#x27;</span>, n.<span class="property">element</span>)</span><br><span class="line">        n = n.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>()</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;gua&#x27;</span>)</span><br><span class="line">list.<span class="title function_">append</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">list.<span class="title function_">log</span>()</span><br><span class="line"><span class="title function_">log</span>(list.<span class="title function_">length</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">面向对象 多态 继承 大致讲一下</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">多态</span></span><br><span class="line"><span class="comment">在某些语言里面 比如 java</span></span><br><span class="line"><span class="comment">你函数定义的参数必须有类型 类型不匹配就是错误的</span></span><br><span class="line"><span class="comment">var add = function(a, b) &#123;</span></span><br><span class="line"><span class="comment">    return a + b</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 在其他语言里面可能是这样的 比如 java c</span></span><br><span class="line"><span class="comment">var add = function(int:a, int:b) &#123;</span></span><br><span class="line"><span class="comment">    return a + b</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">add(1.1, 2.2)</span></span><br><span class="line"><span class="comment">// 报错， 类型不匹配</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var add = function(float:a, float:b) &#123;</span></span><br><span class="line"><span class="comment">    return a + b</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">add(1.1, 1)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var add = function(int:a, float:b) &#123;</span></span><br><span class="line"><span class="comment">    return a + b</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var add = function(float:a, int:b) &#123;</span></span><br><span class="line"><span class="comment">    return a + b</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 现在就不会报错了。。。</span></span><br><span class="line"><span class="comment">add(1.1, 1)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 在 js 中没这个问题</span></span><br><span class="line"><span class="comment">// 我们称之为 duck type</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">继承</span></span><br><span class="line"><span class="comment">继承是说 子类拥有父类的某些东西</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义一个类 人</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">再定义 男人 女人</span></span><br><span class="line"><span class="comment">然后设置 男人 女人的 prototype = 人</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">其他数据结构</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">hash table  哈希表（散列表）</span></span><br><span class="line"><span class="comment">tree        树</span></span><br><span class="line"><span class="comment">set         集合</span></span><br><span class="line"><span class="comment">graph       图</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">哈希表就是用 字符串 当下标，也就是 js 中的对象的实现方式</span></span><br><span class="line"><span class="comment">也就是其他语言中的 字典</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">原理是用字符串 算出一个数字 然后用这个数字当下标存东西</span></span><br><span class="line"><span class="comment">比如 gua 这个字符串 我们用每个字符乘以一个数字最后求余得到下标</span></span><br><span class="line"><span class="comment">从字符串到数字的操作叫做 hash</span></span><br><span class="line"><span class="comment">// hash(&#x27;gua&#x27;) = 1</span></span><br><span class="line"><span class="comment">// hash(&#x27;hs&#x27;) = 3</span></span><br><span class="line"><span class="comment">【坑1， 坑2， 坑3， 坑4， 坑5， 坑6】</span></span><br><span class="line"><span class="comment">  gua        hs               wh</span></span><br><span class="line"><span class="comment">  xiao       lj</span></span><br><span class="line"><span class="comment">             bl</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">树一般是用来实现二叉搜索树的，应用范围不多</span></span><br><span class="line"><span class="comment">     6</span></span><br><span class="line"><span class="comment">    / \</span></span><br><span class="line"><span class="comment">   4   8</span></span><br><span class="line"><span class="comment">    \ / \</span></span><br><span class="line"><span class="comment">    57  9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css动画</title>
      <link href="/2016/11/06/2016fe/20161106/"/>
      <url>/2016/11/06/2016fe/20161106/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h1><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>fe 21<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.b</span> + <span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*background: red;*/</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-top</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.c</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">20px</span>, <span class="number">40px</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            wujcxy<span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">content</span>: <span class="string">&#x27;★&#x27;</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> black;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.orange</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: # FF9800;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.gray</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: lightgray;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* transition 动画 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.gua-cube</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.gua-cube</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.gua-cube</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transition</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* animation 动画 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.gua-animation</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            定义一个动画</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            改变背景色</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            */</span></span></span><br><span class="line"><span class="language-css">            <span class="keyword">@keyframes</span> changecolor &#123;</span></span><br><span class="line"><span class="language-css">                <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="language-css">                    <span class="comment">/*height: 30px;*/</span></span></span><br><span class="line"><span class="language-css">                &#125;</span></span><br><span class="line"><span class="language-css">                <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">background</span>: black;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                &#125;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="keyword">@keyframes</span> vr &#123;</span></span><br><span class="line"><span class="language-css">                <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">                &#125;</span></span><br><span class="line"><span class="language-css">                <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">280deg</span>);</span></span><br><span class="line"><span class="language-css">                &#125;</span></span><br><span class="line"><span class="language-css">                <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">                &#125;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 播放动画 1s 完成， 动画名是 changecolor */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.gua1</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">animation</span>: <span class="number">1s</span> changecolor;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 利用 play-state 属性实现动画暂停 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.gua2</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">animation</span>: <span class="number">1s</span> vr infinite;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">animation-timing-function</span>: linear;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">animation-play-state</span>: paused;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.gua2</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">animation-play-state</span>: running;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">            a</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span>&gt;</span></span><br><span class="line">            c</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wujcxy</span> <span class="attr">class</span>=<span class="string">&quot;orange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">wujcxy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wujcxy</span> <span class="attr">class</span>=<span class="string">&quot;orange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">wujcxy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wujcxy</span> <span class="attr">class</span>=<span class="string">&quot;orange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">wujcxy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wujcxy</span> <span class="attr">class</span>=<span class="string">&quot;gray&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">wujcxy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wujcxy</span> <span class="attr">class</span>=<span class="string">&quot;gray&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">wujcxy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- transition 动画 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gua-transition&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gua-cube&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gua-animation&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gua1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gua2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gua3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">// ============</span><br><span class="line">// 内容如下</span><br><span class="line">// 1, css3 的新特性</span><br><span class="line">// 2, css3 动画和动态效果</span><br><span class="line">// ============</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">// CSS选择器介绍</span><br><span class="line">// 阮一峰 http://www.ruanyifeng.com/blog/2009/03/css_selectors.html</span><br><span class="line"></span><br><span class="line">// 1.  4种基本选择器</span><br><span class="line"></span><br><span class="line">CSS 2.1</span><br><span class="line"></span><br><span class="line">// 2.  4种多元素的 组合选择器</span><br><span class="line">div, p     同时匹配</span><br><span class="line">div h1     匹配后代</span><br><span class="line">div &gt; p    匹配子元素</span><br><span class="line">div + div  匹配同级的下一个元素(仅匹配一个)</span><br><span class="line"></span><br><span class="line">其中 div p 与 div &gt; p 的区别</span><br><span class="line">前者匹配全部的后代元素，而后者仅匹配向下一层（子元素）</span><br><span class="line"></span><br><span class="line">// 3.  4种属性选择器   根据某类的属性来查找选择器</span><br><span class="line">E[att]</span><br><span class="line">E[att=val]</span><br><span class="line"></span><br><span class="line">// 4. 伪类选择器  实际不存在的类</span><br><span class="line">E:first-child</span><br><span class="line">E:link</span><br><span class="line">E:lang(c)</span><br><span class="line"></span><br><span class="line">// 5. 伪元素</span><br><span class="line">E::first-line</span><br><span class="line">E::first-letter</span><br><span class="line">E::before</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># CSS 3</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CSS 3 中的新特性</span><br><span class="line">// 应该利用 CSS 3 generator生成CSS3代码(上课会讲)</span><br><span class="line">border-radius 边框圆角</span><br><span class="line">box text shadow 盒子阴影</span><br><span class="line">transform   2D 变形</span><br><span class="line">columns 属性 将文本分隔成多列</span><br><span class="line">transition 动画</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keyframes 动画和生成软件</span><br><span class="line">https://daneden.github.io/animate.css/</span><br><span class="line">http://cssanimate.com/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其他 css3 生成软件</span><br><span class="line">http://css3generator.com/</span><br><span class="line">http://www.css3generator.in/</span><br><span class="line">http://css3.me/</span><br><span class="line">https://www.tutorialspoint.com/css/css3_boarder_image.htm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CSS3 动画</span><br><span class="line">主要用到了 3 个属性</span><br><span class="line">transform 的全部函数</span><br><span class="line">https://developer.mozilla.org/en-US/docs/Web/CSS/transform</span><br><span class="line">transition 可动画列表</span><br><span class="line">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties</span><br><span class="line"></span><br><span class="line">animation</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;fe 21 css3 animation&lt;/title&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">        .gua-block &#123;</span><br><span class="line">            background: lightblue;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">        .gua-spin &#123;</span><br><span class="line">            animation: spin linear 2s;</span><br><span class="line">            animation-iteration-count: 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @keyframes spin &#123;</span><br><span class="line">            0% &#123;</span><br><span class="line">                transform: rotate(0deg);</span><br><span class="line">            &#125;</span><br><span class="line">            100% &#123;</span><br><span class="line">                transform: rotate(360deg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .shake &#123;</span><br><span class="line">            animation: shake linear 0.6s;</span><br><span class="line">            animation-iteration-count: 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @keyframes shake &#123;</span><br><span class="line">            0% &#123;</span><br><span class="line">                transform: translateX(0px);</span><br><span class="line">            &#125;</span><br><span class="line">            10% &#123;</span><br><span class="line">                transform: translateX(-10px);</span><br><span class="line">            &#125;</span><br><span class="line">            30% &#123;</span><br><span class="line">                transform: translateX(10px);</span><br><span class="line">            &#125;</span><br><span class="line">            50% &#123;</span><br><span class="line">                transform: translateX(-10px);</span><br><span class="line">            &#125;</span><br><span class="line">            70% &#123;</span><br><span class="line">                transform: translateX(10px);</span><br><span class="line">            &#125;</span><br><span class="line">            90% &#123;</span><br><span class="line">                transform: translateX(-10px);</span><br><span class="line">            &#125;</span><br><span class="line">            100% &#123;</span><br><span class="line">                transform: translateX(0px);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .gua-shake &#123;</span><br><span class="line">            transform: translateX(100px);</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div class=&quot;gua-block&quot;&gt;</span><br><span class="line">            方块</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;button class=&quot;play&quot;&gt;播放动画&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;gua-shake&quot;&gt;</span><br><span class="line">            &lt;input class=&#x27;input&#x27; value=&quot;&quot;&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;button class=&quot;login&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var e = function(sel) &#123;</span><br><span class="line">                return document.querySelector(sel)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var playAnimation = function() &#123;</span><br><span class="line">                var block = e(&#x27;.gua-block&#x27;)</span><br><span class="line">                // 让它开始播放动画</span><br><span class="line">                block.classList.add(&#x27;gua-spin&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var shake = function(element) &#123;</span><br><span class="line">                element.classList.add(&#x27;shake&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var __main = function() &#123;</span><br><span class="line">                e(&#x27;.login&#x27;).addEventListener(&#x27;click&#x27;, function(event) &#123;</span><br><span class="line">                    // if 登录不成功</span><br><span class="line">                    var input = e(&#x27;.input&#x27;)</span><br><span class="line">                    shake(input)</span><br><span class="line">                &#125;)</span><br><span class="line">                // 绑定一个 animationend 事件, 在动画结束后删除动画 class</span><br><span class="line">                e(&#x27;.input&#x27;).addEventListener(&#x27;animationend&#x27;, function()&#123;</span><br><span class="line">                    e(&#x27;.input&#x27;).classList.remove(&#x27;shake&#x27;)</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                e(&#x27;.play&#x27;).addEventListener(&#x27;click&#x27;, function(e) &#123;</span><br><span class="line">                    playAnimation()</span><br><span class="line">                &#125;)</span><br><span class="line">                // 绑定一个 animationend 事件, 在动画结束后删除动画 class</span><br><span class="line">                var block = e(&#x27;.gua-block&#x27;)</span><br><span class="line">                block.addEventListener(&#x27;animationend&#x27;, function()&#123;</span><br><span class="line">                    block.classList.remove(&#x27;gua-spin&#x27;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            __main()</span><br><span class="line">            /*</span><br><span class="line">                animationend 事件</span><br><span class="line">                    在动画播完后触发</span><br><span class="line">                    动画播放被暂停不会触发</span><br><span class="line">                animationiteration 事件</span><br><span class="line">                    在动画播放一轮后触发</span><br><span class="line">                    如果动画只播放一轮, 那么不会触发此事件</span><br><span class="line">                利用事件测试动画</span><br><span class="line">            */</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6中的promise对象</title>
      <link href="/2016/11/05/2016fe/20161105/"/>
      <url>/2016/11/05/2016fe/20161105/</url>
      
        <content type="html"><![CDATA[<p>ES6中的promise对象</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Promise 是抽象异步处理对象以及对其进行各种操作的组件</span></span><br><span class="line"><span class="comment">简而言之, 就是让异步操作变得好看一些</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Promise 的用法如下</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 fs.readFile 的操作封装成 promise</span></span><br><span class="line"><span class="comment">// 这样就可以使用 promise 的 api 了</span></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="keyword">function</span>(<span class="params">filename</span>) &#123;</span><br><span class="line">    <span class="comment">// 一般前端的写法</span></span><br><span class="line">    <span class="comment">// return new Promise(function(resolve, reject) &#123;&#125;)</span></span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> options = &#123;</span><br><span class="line">            <span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(filename, options, <span class="keyword">function</span>(<span class="params">error, content</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error !== <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(error)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(content)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 promise 读取文件就不用写成回调的形式了</span></span><br><span class="line"><span class="comment">// 直接按照同步的写法就好了</span></span><br><span class="line"><span class="comment">// 可以无限 then, 只要你保证上一个 then 返回了东西即可</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="title function_">readFile</span>(<span class="string">&#x27;foo.txt&#x27;</span>)</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">content</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;debug file content&#x27;</span>, content)</span><br><span class="line">    <span class="keyword">const</span> c = content + <span class="string">&#x27; suffix1&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;debug error message&#x27;</span>, error)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">c1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;second then&#x27;</span>, c1)</span><br><span class="line">    <span class="keyword">const</span> c = c1 + <span class="string">&#x27; suffix2&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;third then&#x27;</span>, c)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的写法也可以写成下面这样</span></span><br><span class="line"><span class="comment">// 把 reject 的操作放在 catch 里面</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">content</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;debug file content&#x27;</span>, content)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;debug error message&#x27;</span>, error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有时候会碰到批量执行异步操作，如果直接用循环 + 调用函数的形式会比较麻烦</span></span><br><span class="line"><span class="comment">// 使用 Promise.all 就很方便了</span></span><br><span class="line"><span class="comment">// all 方法是直接挂在 Promise 类上的</span></span><br><span class="line"><span class="comment">// 而 then catch 这些方法是挂在原型上</span></span><br><span class="line"><span class="keyword">const</span> fileList = [</span><br><span class="line">    <span class="string">&#x27;t1.txt&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;t2.txt&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;t3.txt&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> list = fileList.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> r = <span class="title function_">readFile</span>(item)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(list).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">content</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;content&#x27;</span>, content)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是一个完整的参考, 如果有兴趣以后可以翻翻看, 但是现在没必要看了</span></span><br><span class="line"><span class="comment">http://liubin.org/promises-book/</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lodash</title>
      <link href="/2016/11/04/2016fe/20161104/"/>
      <url>/2016/11/04/2016fe/20161104/</url>
      
        <content type="html"><![CDATA[<p>lodash的demo</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lodash demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/lodash/4.17.4/lodash.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    lodash 是一个非常实用的 js 工具库</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    在 node 中可以安装</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    也可以自己下载来导入</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    在 浏览器 中, 可以通过 CDN 的方式使用</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// _ 是 lodash 的套路用法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// const _ = require(&#x27;./lodash.js&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// each 用法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> list = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;a&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;b&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;c&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> dict = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">k1</span>: <span class="string">&#x27;a&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">k2</span>: <span class="string">&#x27;b&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">k3</span>: <span class="string">&#x27;c&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    _.<span class="title function_">each</span>(list, <span class="function">(<span class="params">v, k</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// each 方法的两个参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 如果 list 是 列表，那么 v 和 k 分别是指 list 的 element/index</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 如果 list 是 对象（字典），那么 v 和 k 分别是指 object 的 value/key</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;element and index&#x27;</span>, v, k)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    _.<span class="title function_">each</span>(dict, <span class="function">(<span class="params">v, k</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value and key&#x27;</span>, v, k)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// map 用法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 用 map 可以用一个旧数组生成一个新数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 比如旧数组为</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> list1 = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="number">10</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="number">20</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="number">30</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> list2 = _.<span class="title function_">map</span>(list1, <span class="function">(<span class="params">v, k</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> r = v * v</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> r</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;list2&#x27;</span>, list2)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// filter</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 遍历数组/对象，返回符合判断函数中的元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> us = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;score&#x27;</span>: <span class="number">70</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;score&#x27;</span>: <span class="number">90</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;score&#x27;</span>: <span class="number">80</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;d&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;score&#x27;</span>: <span class="number">70</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> u = _.<span class="title function_">filter</span>(us, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> b = e.<span class="property">score</span> &gt; <span class="number">70</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> b</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;filter u&#x27;</span>, u)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// orderBy</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 根据条件排序</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 先按照 score 升序，如果有 score 一样的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 再按照 name 降序</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> users = _.<span class="title function_">orderBy</span>(us, [<span class="string">&#x27;score&#x27;</span>, <span class="string">&#x27;name&#x27;</span>], [<span class="string">&#x27;asc&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;order by users&#x27;</span>, users)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// flatten</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 减少一层嵌套数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 也就是可以直接将二维数组拍成一维数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> l = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        [<span class="number">2</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        [<span class="number">3</span>, [<span class="number">4</span>]],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        [<span class="number">5</span>, [<span class="number">6</span>], [<span class="number">7</span>]],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> f = _.<span class="title function_">flatten</span>(l)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;flatten result&#x27;</span>, f)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// compact</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 剔除数组中的假值元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// js 中假值元素分别为</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// false null 0 NaN &#x27;&#x27; undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 这个方法可以和 map 配合使用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 剔除返回数组的数组中的假值元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> l = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">NaN</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;hello&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> result = _.<span class="title function_">compact</span>(l)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;compact result&#x27;</span>, result)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// isEqual</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 比较两个对象是否相等</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 数组也可以用这个方法比较</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> o1 = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;key&#x27;</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> o2 = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;key&#x27;</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> result = _.<span class="title function_">isEqual</span>(o1, o2)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isEqual result&#x27;</span>, result)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 获取嵌套对象的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;k1&#x27;</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;k2&#x27;</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;k3&#x27;</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="string">&#x27;k4&#x27;</span>: <span class="string">&#x27;value in nested dict&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> path = <span class="string">&#x27;k1.k2.k3.k4&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> result = _.<span class="title function_">result</span>(o, path)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result nested result&#x27;</span>, result)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 生成数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 使用 range 生成数组后，就可以使用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// each map filter 这些方法操作数组了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> l = _.<span class="title function_">range</span>(<span class="number">10</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;range l&#x27;</span>, l)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// cloneDeep</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 深拷贝</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;a&#x27;</span>: [<span class="number">1</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;b&#x27;</span>: [<span class="number">2</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> deep = _.<span class="title function_">cloneDeep</span>(o)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;deep&#x27;</span>, deep)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// random</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 返回给定范围的随机值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> a = <span class="number">10</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> b = <span class="number">20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 返回 a 和 b 之间的一个整数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> r1 = _.<span class="title function_">random</span>(a, b)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;random r1&#x27;</span>, r1)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 如果指定第三个参数为 true，这个参数的意思是指 floating</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 那么返回的就是一个浮点数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> r2 = _.<span class="title function_">random</span>(a, b, <span class="literal">true</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;random r2&#x27;</span>, r2)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// shuffle</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 返回打乱顺序后的数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> s = _.<span class="title function_">shuffle</span>(l)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;shuffle l&#x27;</span>, s)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax,Bom</title>
      <link href="/2016/11/03/2016fe/20161103/"/>
      <url>/2016/11/03/2016fe/20161103/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;&#x2F; 1, HTTP 协议(Hyper-Text Transportation Protocol)<br>&#x2F;&#x2F; 2, AJAX<br>&#x2F;&#x2F; 3, BOM (Browser Object Model 浏览器对象模型)<br>&#x2F;&#x2F;</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line">网址组成（四部分）</span><br><span class="line">    协议      http, https（https 是加密的 http）</span><br><span class="line">    主机      g.<span class="property">cn</span>  zhihu.<span class="property">com</span>之类的网址</span><br><span class="line">    端口      <span class="variable constant_">HTTP</span> 协议默认是 <span class="number">80</span>，因此一般不用填写</span><br><span class="line">    路径      下面的「/」和「/question/<span class="number">31838184</span>」都是路径</span><br><span class="line"></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.zhihu.com:80/</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.zhihu.com/question/31838184</span></span><br><span class="line"><span class="number">10101000</span></span><br><span class="line"><span class="number">168</span></span><br><span class="line"><span class="variable constant_">ASCII</span></span><br><span class="line">a <span class="number">97</span> <span class="number">01100001</span></span><br><span class="line">A <span class="number">65</span> <span class="number">01000001</span></span><br><span class="line"></span><br><span class="line">电脑通信靠<span class="variable constant_">IP</span>地址，<span class="variable constant_">IP</span>地址记不住就发明了域名（domain name），然后电脑</span><br><span class="line">自动向<span class="variable constant_">DNS</span>服务器（domain name server）查询域名对应的<span class="variable constant_">IP</span>地址</span><br><span class="line">比如g.<span class="property">cn</span>这样的网址，可以通过电脑的ping程序查出对应 <span class="variable constant_">IP</span> 地址</span><br><span class="line"></span><br><span class="line">➜    ping g.<span class="property">cn</span></span><br><span class="line"><span class="variable constant_">PING</span> g.<span class="property">cn</span> (<span class="number">74.125</span><span class="number">.69</span><span class="number">.160</span>): <span class="number">56</span> data bytes</span><br><span class="line"></span><br><span class="line">端口是什么？</span><br><span class="line">一个比喻：</span><br><span class="line">用邮局互相写信的时候，ip相当于地址（也可以看做邮编，地址是域名）</span><br><span class="line">端口是收信人姓名（因为一个地址比如公司、家只有一个地址，但是却可能有很多收信人）</span><br><span class="line">端口就是一个标记收信人的数字。</span><br><span class="line">端口是一个 <span class="number">16</span> 位(二进制的 位)的数字，所以范围是 <span class="number">0</span>-<span class="number">65535</span>（<span class="number">2</span>**<span class="number">16</span>）</span><br><span class="line">——<span class="variable constant_">HTTP</span>协议——</span><br><span class="line">一个传输协议，协议就是双方都遵守的规范。</span><br><span class="line">为什么叫超文本传输协议呢，因为收发的是文本信息。</span><br><span class="line"><span class="number">1</span>，浏览器（客户端）按照规定的格式发送文本数据（请求）到服务器</span><br><span class="line"><span class="number">2</span>，服务器解析请求，按照规定的格式返回文本数据到浏览器</span><br><span class="line"><span class="number">3</span>，浏览器解析得到的数据，并做相应处理</span><br><span class="line">请求和返回是一样的数据格式，分为<span class="number">4</span>部分：</span><br><span class="line"><span class="number">1</span>，请求行或者响应行</span><br><span class="line"><span class="number">2</span>，<span class="title class_">Header</span>（请求的 <span class="title class_">Header</span> 中 <span class="title class_">Host</span> 字段是必须的，其他都是可选）</span><br><span class="line"><span class="number">3</span>，\r\n\r\n（连续两个换行回车符，用来分隔<span class="title class_">Header</span>和<span class="title class_">Body</span>）</span><br><span class="line"><span class="number">4</span>，<span class="title class_">Body</span>（可选）</span><br><span class="line">请求的格式，注意大小写（这是一个不包含<span class="title class_">Body</span>的请求）：</span><br><span class="line">原始数据如下</span><br><span class="line"><span class="string">&#x27;GET / HTTP/1.1\r\nhost:g.cn\r\n\r\n&#x27;</span></span><br><span class="line">打印出来如下</span><br><span class="line"><span class="variable constant_">GET</span> / <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: g.<span class="property">cn</span></span><br><span class="line"><span class="string">&#x27;GET / HTTP/1.1\r\nhost:www.qq.com\r\n\r\n&#x27;</span></span><br><span class="line">其中</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>， <span class="variable constant_">GET</span> 是请求方法（还有<span class="variable constant_">POST</span>等，这就是个标志字符串而已）</span><br><span class="line"><span class="number">2</span>，/ 是请求的路径（这代表根路径）</span><br><span class="line"><span class="number">3</span>，<span class="variable constant_">HTTP</span>/<span class="number">1.1</span>  中，<span class="number">1.1</span>是版本号，通用了<span class="number">20</span>年</span><br><span class="line">具体字符串是 <span class="string">&#x27;GET / HTTP/1.1\r\nhost:g.cn\r\n\r\n&#x27;</span></span><br><span class="line">返回的数据如下</span><br><span class="line"><span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="number">301</span> <span class="title class_">Moved</span> <span class="title class_">Permanently</span></span><br><span class="line"><span class="title class_">Alternate</span>-<span class="title class_">Protocol</span>: <span class="number">80</span>:quic,p=<span class="number">0</span>,<span class="number">80</span>:quic,p=<span class="number">0</span></span><br><span class="line"><span class="title class_">Cache</span>-<span class="title class_">Control</span>: private, max-age=<span class="number">2592000</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">218</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: text/html; charset=<span class="variable constant_">UTF</span>-<span class="number">8</span></span><br><span class="line"><span class="title class_">Date</span>: <span class="title class_">Tue</span>, <span class="number">07</span> <span class="title class_">Jul</span> <span class="number">2015</span> <span class="number">02</span>:<span class="number">57</span>:<span class="number">59</span> <span class="variable constant_">GMT</span></span><br><span class="line"><span class="title class_">Expires</span>: <span class="title class_">Tue</span>, <span class="number">07</span> <span class="title class_">Jul</span> <span class="number">2015</span> <span class="number">02</span>:<span class="number">57</span>:<span class="number">59</span> <span class="variable constant_">GMT</span></span><br><span class="line"><span class="title class_">Location</span>: <span class="attr">http</span>:<span class="comment">//www.google.cn/</span></span><br><span class="line"><span class="title class_">Server</span>: gws</span><br><span class="line">X-<span class="title class_">Frame</span>-<span class="title class_">Options</span>: <span class="variable constant_">SAMEORIGIN</span></span><br><span class="line">X-<span class="variable constant_">XSS</span>-<span class="title class_">Protection</span>: <span class="number">1</span>; mode=block</span><br><span class="line"></span><br><span class="line"><span class="title class_">Body</span>部分太长，先不贴了</span><br><span class="line">其中响应行（第一行）：</span><br><span class="line"><span class="number">1</span>，<span class="variable constant_">HTTP</span>/<span class="number">1.1</span> 是版本</span><br><span class="line"><span class="number">2</span>，<span class="number">301</span> 是「状态码」，参见文末链接</span><br><span class="line"><span class="number">3</span>，<span class="title class_">Moved</span> <span class="title class_">Permanently</span> 是状态码的描述</span><br><span class="line">浏览器会自己解析<span class="title class_">Header</span>部分，然后将<span class="title class_">Body</span>显示成网页</span><br><span class="line">2xx 表示成功</span><br><span class="line">3xx 表示移动走了或者别的什么情况</span><br><span class="line">4xx 表示你发错了请求(比如你发的路径根本不存在 或者你发的请求是错的)</span><br><span class="line">5xx 表示服务器挂了, 各种原因挂了</span><br><span class="line">——前端掌握 <span class="variable constant_">HTTP</span> 协议有什么用——</span><br><span class="line">可以用 <span class="variable constant_">JS</span> 动态抓取内容构建页面</span><br><span class="line">比如动态评论、加载数据</span><br><span class="line">比如天气预报程序</span><br><span class="line">比如壁纸图片库</span><br><span class="line">浏览器提供了使用 <span class="variable constant_">HTTP</span> 协议收发数据的接口，名为 <span class="variable constant_">AJAX</span></span><br><span class="line">这是一个重要的技术</span><br><span class="line">——浏览器安全问题——</span><br><span class="line">跨域请求问题和解决方案</span><br><span class="line">    <span class="number">1</span>, 服务器设置 <span class="variable constant_">HTTP</span> 协议头</span><br><span class="line">*/</span><br><span class="line"><span class="comment">// ——AJAX 和使用方法——</span></span><br><span class="line"><span class="comment">// ajax 就是浏览器提给的用 js 获取链接内容的 API</span></span><br><span class="line"><span class="comment">// 你可以理解为发送网络请求的标准库</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取登录页面</span></span><br><span class="line"><span class="comment">// 创建 AJAX 对象</span></span><br><span class="line"><span class="keyword">var</span> r = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 设置请求方法和请求地址, 第三个别管, 就写 true</span></span><br><span class="line">r.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/login&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 注册响应函数</span></span><br><span class="line">r.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onreadystatechange&#x27;</span>, r.<span class="property">readyState</span>, r.<span class="property">readyState</span> == <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">if</span>(r.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state change&#x27;</span>, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">r.<span class="title function_">send</span>()</span><br><span class="line"><span class="comment">// 发送登录数据</span></span><br><span class="line"><span class="comment">// 创建 AJAX 对象</span></span><br><span class="line"><span class="keyword">var</span> r = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 设置请求方法和请求地址</span></span><br><span class="line">r.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/login&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 设置发送的数据的格式</span></span><br><span class="line">r.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line"><span class="comment">// 注册响应函数</span></span><br><span class="line">r.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state change&#x27;</span>, r, r.<span class="property">status</span>, r.<span class="property">response</span>)</span><br><span class="line">        <span class="keyword">var</span> response = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(r.<span class="property">response</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;response&#x27;</span>, response)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;change&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line"><span class="keyword">var</span> account = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;gua&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(account)</span><br><span class="line">r.<span class="title function_">send</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 可以封装成这样的一个函数, 避免总监吃瘪</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ajax = <span class="keyword">function</span>(<span class="params">method, path, data, reseponseCallback</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    <span class="comment">// 设置请求方法和请求地址</span></span><br><span class="line">    r.<span class="title function_">open</span>(method, path, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 设置发送的数据的格式</span></span><br><span class="line">    r.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">    <span class="comment">// 注册响应函数</span></span><br><span class="line">    r.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">// console.log(&#x27;state change&#x27;, r, r.status, r.response)</span></span><br><span class="line">            <span class="title function_">reseponseCallback</span>(r.<span class="property">response</span>)</span><br><span class="line">            <span class="comment">// var response = JSON.parse(r.response)</span></span><br><span class="line">            <span class="comment">// console.log(&#x27;response&#x27;, response)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// console.log(&#x27;change&#x27;)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    r.<span class="title function_">send</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// BOM</span></span><br><span class="line"><span class="comment">BOM(browser object model) 包含5个东西</span></span><br><span class="line"><span class="comment">&gt;location        管理 URL</span></span><br><span class="line"><span class="comment">&gt;navigator       管理浏览器</span></span><br><span class="line"><span class="comment">&gt;history         管理历史记录</span></span><br><span class="line"><span class="comment">&gt;screen          管理屏幕</span></span><br><span class="line"><span class="comment">&gt;window          管理浏览器所有的东西</span></span><br><span class="line"><span class="comment">location 对象是用来管理 URL 的, 下面是例子</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">改变 href 属性就可以跳转页面</span></span><br><span class="line"><span class="comment">hash: &quot;&quot;</span></span><br><span class="line"><span class="comment">host: &quot;s.taobao.com&quot;</span></span><br><span class="line"><span class="comment">hostname: &quot;s.taobao.com&quot;</span></span><br><span class="line"><span class="comment">href: &quot;https://s.taobao.com/search?q=3ds&amp;imgfile=&amp;js=1&amp;stats_click=search_radio_all&amp;ie=utf8&quot;</span></span><br><span class="line"><span class="comment">search: &quot;?q=3ds&amp;imgfile=&amp;js=1&amp;stats_click=search_radio_all&amp;ie=utf8&quot;</span></span><br><span class="line"><span class="comment">origin: &quot;https://s.taobao.com&quot;</span></span><br><span class="line"><span class="comment">pathname: &quot;/search&quot;</span></span><br><span class="line"><span class="comment">port: &quot;&quot;</span></span><br><span class="line"><span class="comment">protocol: &quot;https:&quot;</span></span><br><span class="line"><span class="comment">reload: 函数, 刷新当前页面</span></span><br><span class="line"><span class="comment">replace: 函数, 替换当前页面, 有参数</span></span><br><span class="line"><span class="comment">navigator 对象是用来查询浏览器的信息的</span></span><br><span class="line"><span class="comment">比如当前的操作系统平台, 浏览器型号厂商等等</span></span><br><span class="line"><span class="comment">例如</span></span><br><span class="line"><span class="comment">navigator.userAgent</span></span><br><span class="line"><span class="comment">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36&quot;</span></span><br><span class="line"><span class="comment">navigator.platform</span></span><br><span class="line"><span class="comment">&quot;MacIntel&quot;</span></span><br><span class="line"><span class="comment">history 对象是用来处理历史纪录的</span></span><br><span class="line"><span class="comment">在 HTML5 它增加了一些 API 使得它也可以做单页应用(SPA, single page app)</span></span><br><span class="line"><span class="comment">history.length      // 历史列表中的 url 数量</span></span><br><span class="line"><span class="comment">history.back()      // 相当于点击后退按钮</span></span><br><span class="line"><span class="comment">history.forward()   // 相当于点前进</span></span><br><span class="line"><span class="comment">history.go(-2)      // 相当于点击两次后退按钮</span></span><br><span class="line"><span class="comment">// 下面是 HTML5 新函数</span></span><br><span class="line"><span class="comment">history.pushState(null, &#x27;title&#x27;, &quot;/profile&quot;)</span></span><br><span class="line"><span class="comment">三个参数分别是</span></span><br><span class="line"><span class="comment">    自定义对象</span></span><br><span class="line"><span class="comment">    新页面的标题, 但是现在还没有浏览器实现这个功能</span></span><br><span class="line"><span class="comment">    新页面的地址</span></span><br><span class="line"><span class="comment">var state = &#123;</span></span><br><span class="line"><span class="comment">    page: &quot;settings&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">history.pushState(state, &quot;settings&quot;, &quot;/settings&quot;)</span></span><br><span class="line"><span class="comment">用户点击 前进 后退 按钮的时候, 会触发 window 的 popstate 事件</span></span><br><span class="line"><span class="comment">于是可以在这里操作</span></span><br><span class="line"><span class="comment">window.addEventListener(&quot;popstate&quot;, function(e) &#123;</span></span><br><span class="line"><span class="comment">    var state = e.state;</span></span><br><span class="line"><span class="comment">    // state 就是 pushState 的第一个参数</span></span><br><span class="line"><span class="comment">    console.log(&#x27;pop state&#x27;, state)</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">还有一个 replaceState 函数, 它的作用和 pushState 一样, 只是不生成一条历史纪录</span></span><br><span class="line"><span class="comment">其他</span></span><br><span class="line"><span class="comment">只能在相同域名下</span></span><br><span class="line"><span class="comment">可以使用 queryString</span></span><br><span class="line"><span class="comment">主要作用是来做 SPA(single page application 单页应用)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>console的apply,call,bind</title>
      <link href="/2016/11/02/2016fe/20161102/"/>
      <url>/2016/11/02/2016fe/20161102/</url>
      
        <content type="html"><![CDATA[<p>console的apply,call,bind</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply call bind 是用来给函数指定 this 用的</span></span><br><span class="line"><span class="comment">// 但是用法稍有区别, 以我们长久以来使用的 log 为例</span></span><br><span class="line"><span class="keyword">var</span> log = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// log 是一个函数</span></span><br><span class="line">    <span class="comment">// js 中的函数是一个对象</span></span><br><span class="line">    <span class="comment">// 所以函数可以有方法</span></span><br><span class="line">    <span class="comment">// apply, call, bind 都是函数的方法, 用来指定 this</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// apply 接受两个参数</span></span><br><span class="line">    <span class="comment">// 第一个参数是函数里面的 this, 这里指定了是 console, 这样就相当于 console.log</span></span><br><span class="line">    <span class="comment">// 第二个参数是要传给函数的参数列表, 类型是 数组</span></span><br><span class="line">    <span class="comment">// apply 会把数组拆成一个个的参数传给函数</span></span><br><span class="line">    <span class="comment">// 假设你调用 log(1, 2, 3, 4)</span></span><br><span class="line">    <span class="comment">// 那么 arguments 是 [1, 2, 3, 4] 这样的一个数组</span></span><br><span class="line">    <span class="comment">// (实际上 arguments 不是数组, 但是表现和数组一模一样, 你就暂时当它是一个数组)</span></span><br><span class="line">    <span class="comment">// 下面这句就相当于调用 console.log(1, 2, 3, 4)</span></span><br><span class="line">    <span class="comment">// console.log.apply(console, [1, 2, 3, 4])</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="variable language_">arguments</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call 和 apply 类似, 但是小有区别, 如下</span></span><br><span class="line">    <span class="comment">// 第一个参数和 apply 一样</span></span><br><span class="line">    <span class="comment">// 第 2, 3, 4, 5, ... 个参数会依次作为参数传给函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">call</span>(<span class="variable language_">console</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="comment">// 相当于调用下面的函数, 区别在于参数的类型</span></span><br><span class="line">    <span class="comment">// console.log.apply(console, [1, 2, 3, 4])</span></span><br><span class="line">    <span class="comment">// 相当于调用 console.log(1, 2, 3, 4)</span></span><br><span class="line">    <span class="comment">// var print = console.log</span></span><br><span class="line">    <span class="comment">// print.call(console, 1, 2, 3)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind 函数不直接调用, 而是返回一个函数让你来调用</span></span><br><span class="line"><span class="comment">// 第一个参数是用来指定函数里面的 this, 和 apply call 一样</span></span><br><span class="line"><span class="comment">// 用法就是这样, 返回一个指定了 this 的函数</span></span><br><span class="line"><span class="comment">// 下面的例子中, bind 函数把 console 参数指定为 log 函数的 this</span></span><br><span class="line"><span class="keyword">var</span> log = <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>)</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// hello 1 2 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bind 还可以有额外的参数, 效果如下</span></span><br><span class="line"><span class="comment">// 给返回的函数加上部分参数</span></span><br><span class="line"><span class="keyword">var</span> error = <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>, <span class="string">&#x27;*** ERROR&#x27;</span>)</span><br><span class="line"><span class="comment">// 下面的调用相当于 console.log(&#x27;*** ERROR&#x27;, &#x27;错误&#x27;)</span></span><br><span class="line"><span class="title function_">error</span>(<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line"><span class="comment">// *** ERROR 错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex布局</title>
      <link href="/2016/10/12/2016fe/20161012/"/>
      <url>/2016/10/12/2016fe/20161012/</url>
      
        <content type="html"><![CDATA[<p>flex布局，做了3个demo</p><span id="more"></span><p>#垂直水平居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#00a2d4</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.child</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#博客布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.blog</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.navbar</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: lightgoldenrodyellow;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 水平垂直居中 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">90%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#00a2d4</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.article</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: chocolate;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">75%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.aside</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: rebeccapurple;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25%</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#2D82FF</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span> :<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>111111111111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>222222222222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>33333333333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>4444444444444<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>55555555555555<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>#Gird布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flex布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.Grid</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.Grid-cell</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.Grid-cell</span><span class="selector-class">.u-full</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.Grid-cell</span><span class="selector-class">.u-1of2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.Grid-cell</span><span class="selector-class">.u-1of3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">33.3333%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.Grid-cell</span><span class="selector-class">.u-1of4</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Grid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Grid-cell u-1of4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #2D82FF&quot;</span>&gt;</span>1/4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Grid-cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #6DDA79&quot;</span>&gt;</span>auto<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Grid-cell u-1of3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #46A0CE&quot;</span>&gt;</span>1/3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Grid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Grid-cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #2D82FF&quot;</span>&gt;</span>auto<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Grid-cell u-1of3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #6DDA79&quot;</span>&gt;</span>1/3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Grid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Grid-cell u-1of2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #2D82FF&quot;</span>&gt;</span>1/2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Grid-cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #6DDA79&quot;</span>&gt;</span>auto<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Grid-cell&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #46A0CE&quot;</span>&gt;</span>auto<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>#圣杯布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.HolyGrail</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">header</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">footer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.HolyGrail-body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.HolyGrail-content</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.HolyGrail-nav</span>, <span class="selector-class">.HolyGrail-ads</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 两个边栏的宽度设为5em */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5em</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.HolyGrail-nav</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 导航放到最左边 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">order</span>: -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;HolyGrail&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #2D82FF&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;HolyGrail-body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">&quot;HolyGrail-content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #6DDA79&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;HolyGrail-nav&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: yellow&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;HolyGrail-ads&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: rebeccapurple&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #2D82FF&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>差距</title>
      <link href="/2016/10/05/2015others/20161005/"/>
      <url>/2016/10/05/2015others/20161005/</url>
      
        <content type="html"><![CDATA[<p>其实差别在上高中的时候就产生了。</p><p>到了高二文理分科的时候，其实就是一个人生的选择转折点。</p><p>因为从那个时候，摆在你面前的是一条又一条的十字路口。</p><p>前十几年不可改变的生活背景，教育方式和水平，以及生活重心慢慢发生改变。</p><p>人生的方向盘慢慢转交到了自己的手上。</p><p>那个时候还是一脸天真，未谙世事的学生。哪里知道以后生活的路呢？</p><p>但是作为一个典型的危机主义者，对未来充满曙光的同时也就会有巨大的压力。</p><p>排解压力的方式也就是跟身边的好朋友谈想法谈未来。</p><span id="more"></span><p>慢慢发现人与人之间真的是有差别的。不同家庭条件的人之间是有差别的，相同家庭条件的人之间也是有差别的。</p><p>有的人读书是知道知识改变命运，有的人知道读书是为了让自己接触更高层次的人，有的人读书是为了在家庭聚会上作为长辈表扬自己的资本。</p><p>有的人以批判应试教育为理由作为自己不学习的借口，有的人明明很反对800字的八股文却还是研究如何写好。</p><p>有的人过一天算一天，有的人连大学生活都规划好了。</p><p>有的人开始学会自己搜集资料填报学校和专业，有的人高考结束将填报志愿的事情推给父母。</p><p>如果说高中是方向盘慢慢的交到自己手上，上了大学那就是方向盘完全交到了自己手上。</p><p>自由的时间多了，喝酒的机会也就多了，喝多了之后也会谈谈自己的想法和打算。</p><p>好朋友A一直强调他没有远大的志向，只想找个工作娶个媳妇不愁吃喝也就够了，想在所学的行当干干在做打算。每天干的就是打撸，所以人称外号小撸子。<br>好朋友B是家里当地官二代，生性不羁，情商过人，却思维懒惰。大学后期家父心脏除了问题，做了搭桥手术，听了家里意见考了公务员。<br>好朋友C 家里倾尽财力想让他去澳大利亚留学定居，为了省下学费，每天自学雅思。希望以后能在国外留学定居<br>好朋友D 独来独往，每天准时早上六点左右起来独自一人去图书馆看书或者出去玩或者逛。很有自己的思想和见解。大学后期不喜欢土木，自己在网上投简历去上海实习转行it。</p><p>到了工作领域，接触的人也就慢慢不太一样，联系也就越来越少。但是情况却大致了解，未来的发展也大致能够估算的出来，人的感觉嘛都大致一样。</p><p>一个人的人生路程别人大致能看在眼里。</p><p>后来A还是在这个行业坚持干了下去，虽然委屈和难处很多，没有好的出路，迫于生活压力选择留守。也算努力工作。收入不高也没有用钱的地方，勉强维持生活。</p><p>B回家考了公务员，头两年生活还算潇洒，家里有房有车，经常换女朋友待在一起。后来发现自己工资还是一点点工资，而以前的同学都月薪上万了。心里开始不平衡了，也没有了出去的勇气。</p><p>C后来雅思考了七点几分，收到了澳大利亚第二好的学校的offer。努力也得到了回报，称为世界水平的高校研究生，并有定居的打算。</p><p>D转行之后，在上海也是慢慢顺手了，工作虽然辛苦却小有成就，成长的也很快。目前的月薪也是接近三万。</p><p>其实说了这么多，还就是想说明一点。</p><p>其实差别从高中的时候就开始了，从读大学的时候就开始了，从参加工作就开始了。你和任何人的差别，从你认识他的时候就开始了。只不过随着时间推移，形成了差距你才看到。</p><p>而这些差距就是你之前对于生活的的规划，和人生的摸索定位。</p><p>如今社会的发展速度只会越来越快，大城市和小城市的眼界差距也会越来越大。</p><p>千万不要在年轻的时候选择安逸的不奋斗，等哪一天发现跟身边人的差距时后悔也就来不及了。<br>创建于 2017-02-02<br>作者保留权利</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>能得到锻炼能力的机会</title>
      <link href="/2016/10/01/2015others/20161001/"/>
      <url>/2016/10/01/2015others/20161001/</url>
      
        <content type="html"><![CDATA[<p>“能得到锻炼能力的机会”本身就是一项极其稀缺的资源。没有锻炼的机会，你就算本身有天分也够努力，但没用，你得不到外界的营养，就会长得慢。</p><p>为什么有的宝宝长得强壮，有的宝宝长得孱弱？妈妈们会告诉你“营养摄入”的区别。<br>为什么森林里有的树木长得高大，有的树木萎靡？因为有的树木得到了阳光，肥沃的土壤，有的树木得不到阳光，阳光被其他树木抢去了。</p><span id="more"></span><p>人的职业成长也一样。在中等以上资质的基础上，把你放到有阳光、有营养的岗位上，每天大量机会给你练手，你很快就能成长起来。<br>但可惜，大部分人之所以能得到一份工作，因为那些占据着阳光营养的人，需要“打下手”、“做杂事”的人，而已。<br>从一开始，就根本没打算让你成长。那些占据上位的人们，自己还要成长呢。<br>当然，场面上的漂亮话还是要说的，什么帮助你成长之类，你听听就算了。</p><p>不过，就算环境这么恶劣，依然有大量年轻人能出头，他们怎么做到的？<br>除了一部分家里人一开始就安排好阳光营养的岗位的，主要两个途径。<br>一个是走运登上一条高速前进的大船，进去的时候还是小舢板，高速发展过程中涌进大量练手机会，巨鳄还没注意到以前，自己捞到了锻炼机会。<br>第二条是自己摸索，不管是自己画画、做装置、写作、做生意，自己独自做事得到的锻炼机会是给人打工不能比的，但这条路比较苦痛，不建议承受能力差的人尝试。</p><p>工作这么多年，各种例子也见得很多，不过我有大量前领导同事也上知乎，具体例子就不说了。有些话，点到为止就好。成人世界之所以困难，是因为大量谎言包裹其中，“帮助你成长”即是其中之一。<br>创建于 2016-12-29<br>作者保留权利</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业一年</title>
      <link href="/2016/09/21/2015others/20160921/"/>
      <url>/2016/09/21/2015others/20160921/</url>
      
        <content type="html"><![CDATA[<p>毕业接触社会是人生的又一次挑战。不论你的大学是如何度过的，成绩好坏，有无社会经验，是否准备充分以及是否愿意，在毕业的那一刻，你都将进入一个陌生的领域开始一段全新的人生旅程，并且你很可能再也回不到身后的象牙塔里去了。从此，无论前方是风霜雨雪，还是晴空暖阳，是陷阱沟壑，还是坦途平原，你都得坚持走下去。</p><p>希望你能有这样的心理准备：接下来要走的路，要打交道的人和组织、要经历的事以及评判你的标准，都将和你人生前20多年的经历完全不同，你将会亲眼目睹亲身体验这世界的现实和残酷，承担责任，接受挑战。</p><p>除非你有特殊的人生选择，否则进入社会将与未来要经历的择偶、结婚、生育等一样都是这辈子的大事。你得认真面对问题和处理事情，不能再稀里糊涂的混日子。如果你不是富二代或官二代，那以后的日子基本得靠你自己了。</p><p>这样挺好，你的人生终于开始动真格的了。</p><span id="more"></span><p>首先，从毕业开始，你的身份就不再是学生了，从今以后不论成绩荣誉还是挫折委屈，都需要你以成年人的身份去承受。</p><p>这对所有大学生都是第一道关。过这一关没那么容易，很多人在工作了多年之后，依然没顺利通过，言谈举止思维方式为人处世依然像个学生。</p><p>这些人的问题通常在于没分清这些：过去在学校里取得的分数和学历，只是教育体制对你的考核、评判以及要求，你付了学费，所以学校要为你提供服务。而在进入社会之后，对你的评判标准是你为社会或所在的组织创造的价值，你得为别人创造价值才能实现自己的价值，而且无论自己创业还是进入组织，都是如此，你都得对自己的言行和造成的后果负责，</p><p>如果你希望自己能快速成长，希望早日通过这道关，就要学会承担责任，这是你的第一步。</p><p>还有，你也许很快就会发现，外界的人和事似乎都是不以你个人意志和喜好为转移的。不管你的主观意愿如何，事情都照常发生，很少有人在乎你的感受，就好比你用手指着太阳和月亮痛骂100年，也不会让它们的光辉减弱一丝一毫。甚至你会觉得自己很渺小，无依无靠。而这才是真实的世界。</p><p>你将逐渐体会到人在社会中生存的艰辛和不易，你会逐渐明白眼下所经历的这些也是很多人都经历过的，你得开始培养自己的韧劲和坚强，它们是你在社会上打拼所必备的意志品质。</p><p>其次，做事要认真，并且得有点激情，得有个年轻人的样子。</p><p>认真与韧劲和坚强一样，都是你最应该坚持的品质，从长远来看它能带给你最大的收益。认真的人往往会得到更多的信任和更大的机会，因为没有谁愿意把重要的任务和责任托付给不认真的人，尤其是不认真的年轻人。</p><p>这里说的激情，指的是做事情要抱有积极进取的态度。</p><p>初入社会，人的内心都会有些忐忑，对于未知的世界，都心里没底。但不管怎样，你已经“下水”了，除了尽快学会游泳，获得在社会中生存的能力，你别无选择。你慢慢发现，除了爹妈，没几个人会真正担心你会不会淹死、关心你将游向哪里、能游多远。你不扑腾，没人能替你扑腾。</p><p>年轻的优势在于能承受失败，敢于试错，敢于担当。认真和积极的态度会让你得到更多的机会，在初入社会时，别犯懒也别患得患失，看准了机会就出手。</p><p>或许你以前在性格上比较蔫，做事主动性也不强，但在进入社会之后得赶紧调整自己。这个时代的发展速度和竞争激烈程度很惊人，对人能力的要求远超过去，如果你的态度和行为不积极，很难在社会中快速找到自己的位置。</p><p>再次，在灰暗和处于低谷的日子里，你得坚定信心，培养自励的习惯。</p><p>我打赌，你们当中很快就会有人得知自己的薪资水平之后产生受挫感，会瞬间觉得理想，房子，车子和美好生活都离自己很远，每天早出晚归挤地铁坐公交的日子也会让自己觉得很渺小，甚至每个月的薪水在帝都魔都等大城市租个离公司近一点的房子都很吃力，毫无归属感。</p><p>这时候你只能坚定信心咬紧牙关继续向前，你要明白对于家境普通的孩子，眼下经历的这个阶段几乎是必须经历的。</p><p>这不是煲鸡汤，你得把这个阶段有意识地当成对你的磨砺。每个人都会遇到机会，难点在于在磨砺阶段你得在咬紧牙努力谋生的同时努力做好准备，努力去学习和积累抓住机会所要具备的知识和资源。在这个阶段，你更多的得靠自己给自己打气，自己鼓励自己。实话实说，这一关很考验人。</p><p>有很多人都说过很感谢当年处于低谷时的那个一直没放弃努力的自己，他们说的都是实话。</p><p>初入社会遇到挫折打击出现停滞或反复时，你要保持耐心。</p><p>人与人之间在认知水平、个人能力、反应速度和方法手段上都存在着差异，适应社会的速度也有快有慢。</p><p>年轻人常想迅速打开局面站稳脚跟实现价值成就理想，但这个过程的速度快慢，是要具备一定的条件，而且存在偶然性。这世界上很少有一帆风顺的事，万事开头难，能在最初阶段就做出成绩的年轻人不多，因为年轻人通常都欠缺做成事情的能力和资源。</p><p>可能没多久，你还会发现有些在学校里没怎么努力但家庭有背景关系硬的同学的起点会比你高很多，比你混得好。这时，你得摆正自己的心态，别轻易地做自我否定，或认同那些会导致你平庸的观点。</p><p>很多人会把进入社会看成一次全新的超越别人的机会，但别简单地把它当作一次比赛。你和其他人往往从事的不是同一个领域，而你自己在成长的过程中的不同阶段的目标也是不一样的，你只需做好你自己想做和该做的事，不要把眼光窄化到总盯着同学和同事的薪水和职位，踏踏实实地尽快提高你自己的能力和价值才是最应该做的事。</p><p>如果你出身于普通家庭，没背景没人脉没资金，那你除了个人努力，基本上别无选择。而且你还得记住这句话：雄心的一半是耐心。从一开始就要踏踏实实把基础打牢。就如同盖个大楼要先打地基，该挖多深，该用多少号的水泥，该采用什么材质的砖，该采用什么建筑标准，都不能含糊，不能自己糊弄自己。</p><p>学习和积累是你一进入社会就必须养成的习惯，而且应该变成长期的习惯，。</p><p>这两点的重要性无需多言，不管你在校园里是不是混日子过来的，也不管你在学校里正没正经学习，一旦进入社会参加工作，你都得快点长本事。能否在没有老师，没有考试的状态下养成学习和积累的习惯，而且是长期的习惯，对于需要快速学习大量学习各种知识，迅速成长的你来说非常重要。</p><p>如果有条件，可以买个电子阅读器，多看书，别把上下班路上的时间都花在手机上，如果每周能读一本书，每年就是50本，在注意记录和整理笔记，三五年下来，知识储备的底子就打下了，那时候你思考问题的方式和看待事物和社会的角度将有很大的提升。</p><p>PS：初入社会，在认真工作之余，超越别人的奥秘都在工作八小时之外，关键看你怎么利用时间。</p><p>进入社会和职场后的首要目标是早日令自己拥有不可替代性。</p><p>所谓不可替代性，通俗点讲就是什么事是只有你能做到而别人做不到的，什么工作是缺了你就玩不转的，什么技能是只有你会而别人不会的，什么资源是只有你有而别人没有的，什么角色是只有你能担当的而换别人就不行的。</p><p>即使在短期内你不能在行业范围内拥有不可替代性，也要努力在组织和公司内部拥有。越早具备不可替代性，你的价值就会实现得越早，薪资待遇就会与你的价值更匹配，在职场的竞争力就越强。</p><p>PS:一个判断自己价值的方法：工作几年后，是否会有猎头给你打电话给你推荐职位，这是个小信号。在此之前，基本上你的价值都很有限。</p><p>尽早做决定：自己究竟适不适合在大城市发展，究竟适不适合离开爹妈在北上广深等大城市做个单枪匹马的“兰博”。</p><p>这条算个小提醒吧，你要想清楚自己内心更看重的是什么，追求的是什么，并估算出你要付出的成本和代价。</p><p>如果你现在还不清楚的话，可以在大城市先折腾几年再做决定。人有梦想是好事，但不是每个人都适合做北上广深做“兰博”，幸福未必只有在大城市才能得到。</p><p>还有个提醒：有很多人在大城市努力了很久，却一直没有突破，这时要多反观自身的能力。有些人能做到的事，换个人未必也能做到。这世界并不是努力就有回报，而是能力、资源和运气都具备了，机会才有可能被你抓住。</p><p>千万别忽略自身具备的能力和资源，只怀着一颗热情执着的心与不切合实际的目标死磕。人的奋斗过程有些类似于上台阶，如果你经过长期努力但连最基础的台阶都上不去，那你就应该慎重考虑了。</p><p>再送剂预防针：</p><p>理想和现实是有差距的，刚毕业的大学生初步体验了社会之后，可能会多少有些失望，甚至更加迷茫，为自己的前途和处境上火、闹心、焦虑。这都是正常状态，说明你有进取心。其实，每个年轻人要面对的事和要学习的东西都很多，除非你是富二代，有爹妈帮着铺好了路，搞定了一切，否则作为普通家庭出身的你，如果天天都睡得着睡的香，什么也不合计，什么也不琢磨，未必是好事。</p><p>最后送一段话，特别送给那些在大学期间没认真学习，迷迷糊糊就毕业走进社会的年轻人：</p><p>“我们常常有勇气改变，因为这只需要一个晚上的鸡汤。我们往往没能力改变，因为这真需要经年累月的苦干”</p><p>加油。<br>创建于 2016-11-24<br>作者保留权利</p><p>发自我的华为手机</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25岁前你必须要做完的7件事</title>
      <link href="/2016/07/25/2015others/20160822/"/>
      <url>/2016/07/25/2015others/20160822/</url>
      
        <content type="html"><![CDATA[<p>人生中有很多要做的事情，也一定会有更多的缺憾，无论你怎么拼了命去做，都会留下遗憾。</p><p>我知道你我都会活得没那么容易，我愿你是活得潇洒精彩的人，别沦落到中年时热血已凉，回忆年少轻狂的梦，没一件做成，心酸又心凉。</p><p>趁你在还可以犯错的年纪，趁你在犯错还可以挽回的岁月，趁你还没有太多牵挂时，做完这7件事。</p><span id="more"></span><p>25岁前你必须要做完的7件事</p><p>我不愿你有一场不管个人安危说走就走的旅行，也不要你接受什么大学没挂过科没谈过恋爱就不完整这种烂鸡汤，更不希望你还没拥有过人的实力前就学名人们退学。</p><p>人生中有很多要做的事情，也一定会有更多的缺憾，无论你怎么拼了命去做，都会留下遗憾。</p><p>我知道你我都会活得没那么容易，我愿你是活得潇洒精彩的人，别沦落到中年时热血已凉，回忆年少轻狂的梦，没一件做成，心酸又心凉。</p><p>趁你在还可以犯错的年纪，趁你在犯错还可以挽回的岁月，趁你还没有太多牵挂时，做完这7件事。</p><p>过了25岁，你的人生不会再是你一个人的了。</p><p>好自为之。</p><p>第一件事：要有个一辈子都喜欢的爱好<br>人可以为很多东西活，为名利活，为自由活，为自己活，为别人活。</p><p>在我大学快毕业时，我终于醒悟：无论哪一种活法，都不可能真正自由。</p><p>每一种活法，都有它迷人的地方，更有它无奈的地方。无论你选择了哪一种活法，你都有一个一辈子都喜欢的爱好，它不一定给你带来名，带来利，它只会在你疲惫不堪时，做起它时，你会笑，你也会哭。</p><p>笑得开心，哭得解忧。</p><p>你要有这样的爱好。</p><p>第二件事：有一份足够养活你的工作<br>过了25岁，你不可以再跑到父母怀里又哭又闹了，你更应该去照顾他们。</p><p>你的人生中当然会遇到很多很多愿意照顾你的人，可是啊，你也要学会照顾别人，照顾自己。</p><p>我知道你想任性，任性之前先让自己有任性的资本与能力吧。有一份足够养活你的工作，并且是你喜欢的事情。</p><p>不要和我说没办法做自己喜欢的事情，要知道，只有做自己喜欢的事情才更有可能获得更大收益。</p><p>这一份让你能够想吃什么就吃什么想去哪里就去哪里的工作，是你任性的底气，最最基础最最普通的底气。</p><p>第三件事：有一个可能要花几十年才能完成的目标<br>当你有了可以爱一辈子的爱好，和一份让你足够养活自己的工作后，你不可以就此满足了。</p><p>要知道，人总是在满足中变得平庸的，你不可以只待在舒适区。</p><p>你要明白，呼唤你每早起床的最大动力是什么，不要告诉我是为了赚吃饭租房的钱，那不该是你人生的最后归宿。</p><p>你要有一个可能要花几十年才能完成的目标，哪怕它看起来有多疯狂，你也要不断朝着它迈进，不管你最后有没有成功，这个目标都是你在25岁前要找到的。</p><p>就像你的梦想是触及星辰，我们都明白，穷极一生你也摸不到它，可你为了摸到它，站在了少人可及的最高峰。</p><p>第四件事 完成一件你中学时期的梦想<br>很多人说：莫欺少年穷。</p><p>你有多少少年时的梦，都随着年纪增长搁置到一旁了？你是不是偶尔想起时，还会自嘲，摇摇头不再去想。</p><p>你对得起年少的你吗？那时候的梦，真的有那么难实现吗？</p><p>去做吧，中学时期的你或许有100个梦，碎了99个梦又如何，在你还没有真正老去的年纪，就不要学着真正老去的人倚老卖老，去做，去做，去做啊。</p><p>当你完成了一件少年时的梦后，你永远也不会老去。</p><p>第五件事：看完100本好书<br>在日渐浮躁的如今，我仍想将生活过成诗。</p><p>无视那群鼓吹“读书无用论”的愤青吧，没用的人做什么都无用，强悍的人喝鸡汤都能成就一番事业，读书从来不是让你功成名就，读书是教会你如何更轻松更有趣地活。</p><p>绝大多数人的人生，活得都过于疲惫，过于无趣了。</p><p>不要带有功利性去读书，更不要读那些毫无意义的书，在25岁前，慢慢读，认真读，读100本真正经典的书。</p><p>那时候的你，会更知道你为什么活。</p><p>第六件事：独自走过10座城市<br>你之所以活得狭隘无知，是因为你不知道世界是什么样子的。</p><p>哪怕你活在信息爆炸的互联网时代，你在书上了解的，你在视频里看见的，你听阅历丰富人说的，都不代表你真的明白世界上其他地方的人的生活。</p><p>你不会知道千里之外的城市街头会有怎样的风景，更不会知道某个咖啡屋里正认真画图的女孩也许和你志同道合，你永远都不可能知道，你为何和他们不同，你为何和他们相同，除非，你走出去。</p><p>不要穷游，我从来不赞成所谓的穷游。</p><p>第七件事：不要因为寂寞恋爱，遇上正确的人就立刻爱<br>爱情与婚姻或许是生命中的必需品，但不是作业题，更不可以着急。</p><p>在25岁前，不要因为寂寞谈恋爱，你会浪费了自己的感情，糟蹋了别人的时间，最好的感情本应该留给最好的人。</p><p>如果没有遇见合适的人，不要因为身边的人怂恿，去谈一场无疾而终甚至因不爱也生恨的恋情，太不值得。</p><p>如果遇见正确的人，不要想以后，不要考虑现实，人生中已有无数错过，你真甘心难得心动的人在你面前远去？</p><p>哪怕最后的结果不尽人意，你也要奋不顾身去爱这个来之不易的人。</p><p>说不定，到最后，她会是陪你走过一生的人。</p><p>25岁前，你要做完这7件事。</p><p>有些事，你不做，真的来不及了，你的青春，比昙花都还要短暂。</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行力</title>
      <link href="/2016/03/04/2015others/20160304/"/>
      <url>/2016/03/04/2015others/20160304/</url>
      
        <content type="html"><![CDATA[<p>前几天和一位初中好友一起吃饭，我和他的友谊，从那个时候开始，至今都没有中断过，经常出来喝喝酒，拉拉家常，谈谈人生理想。</p><p>吃饭的期间，他跟我说，再过一个月，自己就要辞职出来创业了。</p><p>我第一次听到这个消息时，说实话，还是挺惊讶的，毕竟他才刚刚毕业两年多，按照常理来说，现在工作应该才步入正轨，怎么就要出来创业了呢？</p><p>那天和他聊完，再到后来和一些跑得比较快的同龄人聊过之后，我才发现，毕业三年，混得好的同学，其实已经和其他的人，拉开了越来越大的差距。</p><p>有的月薪过两万，有的出来创业，有的组建了自己的小团队，各有各的精彩。</p><p>其实我关心的不是差距的大小，而是那些跑得快的人，他们究竟是怎么做到的？</p><span id="more"></span><p>1， 行业和平台很重要。</p><p>不知道是谁曾经说过：站在风口上，猪都能飞起来，这里的风口，你可以理解为平台的意思。</p><p>前不久咪蒙助理月薪过五万的消息，刷爆了朋友圈，我一位做传统行业的朋友，看得十分眼红，直呼凭什么。</p><p>同样都是在打工，同样都是在付出劳动，同样都是刚出社会不久，为什么有人就可以做到日入2千，有些人拼死拼活，每个月都还要掐着手指来过日子？</p><p>说到底，都是行业和平台的不同，造就了这样的一种局面。</p><p>试想一下，同样都是一个专业出来的大学生，一个毕业之后去了传统的商业地产行业，一个毕业之后去了腾讯或者华为，两三年后，哪个同学的发展会更好一点？</p><p>我想，你应该能猜出来是哪个。</p><p>因为资本，人才，信息不断地往新兴的行业靠拢，导致这些行业的发展极为快速，而传统行业，不仅有时候千年不变，上升通道极为狭窄，而且所属的行业，还不断下滑萎缩。</p><p>那些毕业两三年，就实现自己巨大跨越的同学，无不是依托于高速发展的行业和平台：电商，移动互联网，游戏，金融，等等。</p><p>在这些行业里，只要你足够努力，就能获得超额的回报，而在传统的行业里，无论你怎么努力，怎么奋斗，都不可能与整体衰败的外部环境相抗衡。</p><p>和我经常来往的初中同学，大学学的是食品检测，毕业之后，经过仔细地分析，认为电商会持续不断地发展，于是全身心投入到电商公司里面去，几乎可以说是All—In的状态，经过这两三年的努力和积累，不仅实现了月入过5万，还有底气出来创业单干。</p><p>这是很多人在传统行业里，想都不敢去想的事情。</p><p>2， 努力，努力，再努力。</p><p>其实我和他在初中认识的时候，他的身上，就有一种韧劲。</p><p>每次考试，都会拼尽全力，就为了多拿多几分；每次背单词，都会比设定的目标，多背几个；每次做数学习题，不单单只要求自己掌握一种解题方法，而且还不断地向别人，老师请教其他的解题思路。</p><p>这样的一种努力和勤奋，一直延续到了大学，紧接着跟随他步入了职场。</p><p>有人常会说：努力会成为一种习惯。</p><p>这种从小养成的努力状态，可以让你节省很多的意志力资源。</p><p>因为每次当你需要更加努力地投入到工作当中去的时候，你会自然而然地去用力，去沉浸其中，而不是次次都还没有开始做的时候，就表示自己做不到，不想做，或者干脆逃避。</p><p>像我的初中同学，从一开始，就保持着努力的习惯，所以，对他来说，多干一点活，多做一点事情，多学一点知识，这些所谓的“超额”，都是理所当然的，都是名正言顺的，都是可以理解和接受的。</p><p>反观有些人，在还没有努力的时候，就觉得自己已经用尽全力的样子，为公司，为部门多做一点事情，就觉得整个人被欺负了一样，业余的时候，根本就不想怎么去提高自己的技能，也不琢磨如何才能变得更好，更加优秀。</p><p>想要得到什么，你就得拿东西出来置换，这个道理，是亘古不变的。</p><p>如果你甘于平庸，那就不要做什么英雄梦，如果你总觉得自己的理想还有抱负没有实现，那就打起精神来，穿上铠甲，去战斗，去屠龙。</p><p>不要每次都说自己这样不行，那样不想要，试试转变下自己的思维方式，面对美好的事物时，多问问自己：</p><p>我怎么样才能得到它？</p><p>每一次的内心消极对话，无疑都是在慢性自杀，而只有正视自己内心的声音和力量，才能激励你不断地往前走。</p><p>一个是让你后退不止，一个是让你不断前行，你应该知道怎么做选择。</p><p>3， 不是光想不做，而是有强大的执行力。</p><p>如果我现在跟你讲一个非常好的idea，大概有50%的人听进去了，在这50%的人里面，有40%的人有去做思考，在这40%的人里面，只有不到10%的人会去执行。</p><p>实际上，这个世界从来不缺乏好的想法，只是大道理谁都懂，但却没有人真的想要去执行。</p><p>谁都知道早起早睡身体好，谁都知道坚持健身，可以让你保持身体匀称协调，谁都知道无论多忙，都要挤出时间来进行自我增值和提升。</p><p>但有谁真正去做了？又有谁真正做了，还不间断地坚持了下去？</p><p>每个人都想按照自己最为舒服的状态来过日子，谁都不想逼着自己去走出自己的舒适圈，所以，在面对外部环境带来的巨大不安全感时，很多人宁愿选择口头上的宣誓，也不愿意动起身体，去立刻执行。</p><p>口头上的宣誓，可以让自己的内心，得到抚慰，可以自己给自己营造一种假象：“我做到了”，而行动呢，却带有更大的不确定性，因为你不知道现在行动了，究竟能不能给你带来收益，于是看似理想的选择，其实让你次次成为思想上的巨人，行动上的侏儒。</p><p>我的初中同学，有一次在和部门经理开会的时候，因为有一份紧急的文件需要去处理，但部门经理又分身乏术，忙不过来，这时候，我同学主动请缨，接下了这个任务，连夜加班将这份文件给出色地完成好。</p><p>大部分人，都是在晚上睡觉前，信誓旦旦地对自己说：</p><p>我要这个，我要那个。</p><p>明天早上起来，依旧是按照自己的老路走到底，你叫他去做，去改变，去追求梦想，比登天还难。</p><p>想了不做，等于白想。</p><p>希望对你们有所启发。</p><p>感谢阅读。</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标-三十而立</title>
      <link href="/2016/03/01/2015others/20160301/"/>
      <url>/2016/03/01/2015others/20160301/</url>
      
        <content type="html"><![CDATA[<p>我今年41岁了，古人说三十而立，四十不惑。不敢妄称“不惑”。职业生涯几经起落，最终走上了创业的道理。家有两个调皮的女儿。成家立业的立算是做到了。</p><p>这里的“立”，我的理解，并不是指事业或者家庭，而是一种承担责任的能力。</p><p>这种能力，并不是随着年龄的增长就能获得，它需要你转变自己的思维模式，去不断挑战自己，训练自己，最终才能得到真正的成长。</p><span id="more"></span><p>你问我：你经历过哪些思维上的转变？</p><p>一个让我获益良多的改变是：</p><p>我意识到，很多时候我们停止成长，是因为一时的成绩让我们骄傲和固执，使得我们不再去探索更多可能性。只有怀着空杯心态，我们才能获得更多的成长。</p><p>这里，我想讲讲自己的故事。</p><p>刚毕业那会儿，由于很想做市场营销，所以辞去了收入更高的记者的工作，去做了最底层的销售代表。</p><p>由于什么都不懂，所以一切对我来说都是困难的。但同时，一切对我来说，又是新鲜的。</p><p>譬如，有一次批发客户“发难”，说半年前进的一批卫生巾的背胶粘不牢，要退货。按照规定，半年前的产品是不能做退货处理的。好说歹说，客户就是坚持要退。</p><p>那时候我不知道该怎么办，就去请教了一些经验更丰富的“老”销售，但他们也说这事也没有太多很好的办法，说要不就退了呗。</p><p>但作为初生牛犊的我，并不觉得有什么事是不可能的，一定有解决的办法。</p><p>可能是比较楞的缘故，最后我决定亲自试验这批卫生巾，身为大老爷们的我把一片卫生巾贴在自己的内裤上，之后一天走街串巷，下班后还打了一场篮球，并没有出现脱胶现象。第二天和颜悦色地跟批发商说，大姐这批卫生巾我亲测过，粘得很牢。批发商又好笑又好气，也就不再提退货的事了。</p><p>功不唐捐，半年后，我成了正式员工，之后，更是成功转岗，到了品牌部门。</p><p>但是，当我在公司呆了几年之后，在不知不觉中，变成了当初请教的那些“老员工”那样。</p><p>虽然业务能力得到了很大提升，但思维模式得到了固化，做事更多的开始依赖过往的“经验”，而不去思考它的其他可能性。</p><p>我再也没有像当初那样，把卫生巾贴自己内裤上，跑一天试验它到底粘不粘的牢。</p><p>换言之，我封闭了自己成长的边界，停止了进一步的成长。</p><p>有一次，我接到了一个非常棘手的项目，出于经验，我判断很多地方是不可能做到的，所以当时就在反驳，一条条说明，哪些地方是不可能的，因为什么什么。</p><p>的确，在业务水平方面，我是当时全组最强的，所以当我听到一些不太合理的要求，我都是嗤之以鼻的，觉得领导很外行，很傻比，一定要反驳。</p><p>但那时候新进来的几个新人，却一直在努力思考，尝试着各种可能性。</p><p>后来，我就没管了，跟进了其他的项目，并觉得那几个新人都是在做无用功。几天之后，我惊讶的发现，那几个实习生做出了我以前从没想过的方案，而且所有问题都得到了巧妙的解决。</p><p>我十分震惊，并且羞愧。</p><p>我震惊于他们的成功，我羞愧于我的轻慢。看到他们，我仿佛看到了当年的自己。</p><p>“我以前不也是那样的吗？怎么现在变成了这副模样。”</p><p>痛定思痛，我开始有意识的让自己不再去轻易说“不可能”，我收掉了自己的傲慢，而是积极探索一切可能性。</p><p>之后的几年，我的成长速度非常快，而且开始领悟到工作的真谛——</p><p>工作并不是生活的对立面，它是生活的一部分，不能享受工作的人，也无法真正享受生活。</p><p>没有思想上的转变，我之后也不会几次离开较高的职位、选择在新的岗位、公司从零做起（这些经历可以写一篇新的回答了，敬请期待）。</p><p>在2015年离开宝洁前，我曾任年薪百万的市场总监职务，负责过几十亿年销售额的国民洗发水品牌的营销工作。之后我还是走上了创立自己的氨基酸洗发水品牌的道路。我们这个月刚完成了数千万的A轮融资，天猫双十一也做到了美发护发类目的第11名。妄论成功现在还太早，这在资本寒冬的当下也算是不容易了。</p><p>现在，我有了自己的公司和一起奋斗的小伙伴们。我能看到像当初刚工作时的我那么拼的，但也能看到像工作了几年以后的我的那种年轻人，我能看到他眼神里对工作的痛苦和煎熬。</p><p>每当这个时候，我就会跟他讲我的故事，告诉他，我也是这么过来的。做为公司的创始人，我最希望看到小伙伴眼里闪着的光芒。41岁的我还充满着激情和梦想呢。20多岁的人不要跟我说你已经没有激情和学习的动力了。</p><p>Stay hungry and stay foolish！</p><p>最后，我想啰嗦几句提一些具体的建议：</p><p>1，不要轻易说不：工作、生活中遇到问题，不要轻易放弃，不要轻易说“不可能”，而是积极去思考它的可能性。这里面，蕴含着宝贵的成长机会。</p><p>2，不要轻易跳槽：工作里遇到问题，往往可能是你自己的问题，虽然跳槽之后，你因为新的环境，一开始会打开自己的边界，积极学习，但一旦熟悉了业务模式后，你又会变成那个故步自封的人，新的问题又会接踵而来。所以不要轻易跳槽，而是去想自己的问题在哪里。</p><p>3，不要天天熬夜：熬夜并不意味着工作时间的增多，它只能让你的工作效率下降。而且年轻的时候觉得熬夜没什么，但要知道，你25岁要是继续熬夜，熬到30岁，很大可能你会变秃。</p><p>4，不要忽略家人：家人比任何事情都重要，25岁以后往往会因为工作繁忙，很少有时间能与自己的家人在一起。但你至少需要多去和他们沟通，聊聊自己的生活，不要多年以后去悲叹“子欲养而亲不待”，后悔自己年轻的时候什么都没做。</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>颈椎病</title>
      <link href="/2016/02/03/2015others/20160203/"/>
      <url>/2016/02/03/2015others/20160203/</url>
      
        <content type="html"><![CDATA[<p>本文内容包括：症状，诊断方式，治疗方式，三部分。</p><p>01</p><p>我是在2015年5月，才知道自己得了颈椎病。</p><p>可笑的是，在这之前的N年里，虽然有一堆症状，我却对颈椎病一无所知。能够确诊，也是因为偶然。</p><p>当知道了颈椎病后，才发现，原来身边的人，只要常办公室，或是常对着电脑手机的人，竟然都有颈椎病症状……何其可怕……</p><p>医生说， 曾经在他的课本中，老年后才会高发的病症，却因为手机IPAD电脑的普及，开始有越来越多二十一二岁的病人。</p><span id="more"></span><p>02</p><p>颈椎病会有很多看似不关联的症状，然而细究其原因，还是能得出一些端倪的。</p><p>因为连接大脑，而大脑又掌管全身，当颈椎出问题时，最大的影响是——大脑。</p><p>想象一下，颈椎动脉是一根粗水管。水管在弯折扭曲的时候，会受到挤压——我们小时候应该都玩过呲水的游戏，当挤压水管时，水管变细，能通过的水流量变小了，但水管内的压力更大，水花呲得更远了。</p><p>对颈椎动脉来说，也是如此。</p><p>颈椎变型，动脉受到挤压。结果是，一方面，流向大脑的血液变少了，另一方面，血流的速度也更快了。</p><p>这两个状态，导致了很多问题的出现。</p><p>大脑供血减少时，最先出现的症状是——记忆力减退、易困嗜睡。长期脑供血不足，会引起大脑的损伤。大脑为了避免这种结果，会命令心脏更加积极地供血，于是又出现了心跳过快的症状。</p><p>血流的速度更快时，对血管的冲击力也变大了。血管不断承受着高频次的冲击，于是产生了头痛问题。</p><p>在年轻时，血管弹性较好，不会出现较大的危险。然而，随着年龄增长，血管弹性降低，面对冲击时，最可怕的后果，是脑部血管爆裂，颅内出血……（当时医生为了让我重视问题，把后果说得很严重）。</p><p>头供血不足，脸上皮肤差，脸色不好，这都算小事。更难受的是干眼症。</p><p>可能因为眼部都是毛细血管，毕竟血液都优先供脑了，眼睛顾不上吧，于是眼疲劳来得很快，渐渐的泪液也分泌得越来越少。眼皮内侧，其实是一堆鸡皮疙瘩似的不光滑的平面，平时全靠泪液润滑。当没有泪液时，每眨眼一次，眼皮内侧都像刀片一样刮眼，疼痛难忍……</p><p>心脏长期快速跳动的时候，人也很容易疲惫，经常觉得累，做什么都需要一会一歇息。</p><p>当心脏加速供血，还脑部缺血时，人体会有应激反应——呕吐、眩晕，无法直立，必须躺倒休息。到这一步时，其实颈椎病已经进入的非常严重的地步了。</p><p>还有的症状，还包括手脚麻等症状（然而原理未知，我忘问医生了）</p><p>我的症状出现的很早，持续了不少年。</p><p>进入2015年时，已经非常严重了 。当时每天都在头疼，脑门随手一捏，就出来一道道紫色印子。平时静止状态的心跳一直在110以上，下班回家15分钟的步行路程，也需要中途休息个两三次。</p><p>再后来，频繁地头痛呕吐，开始影响到工作了。那段时间，又遇到个同行加班后突然猝死的新闻，导致我心理压力也很大，于是终于不敢再拖延，开始了治病岁月。</p><p>03</p><p>上面说的，都是自己很容易观察到的表面症状。</p><p>确诊的话，确切地说，需要到骨科做两项检查：颈椎X光片，和TCD脑血流检测。同时也建议挂一下心内科，检查一下心脏。</p><p>骨科的检测，类似下图这种。（我在2014年底就拍了X光片显示颈椎变直，然而当时的医生却没重视，后来重复走了很多冤枉路，所以碰上一个好医生也是不容易……）</p><p>TCD检查，学名叫经颅多普勒检查，原理就是检查脑部血液流速。流速过快的话，结果会显示“动脉痉挛”，最多的结果，好像就是3个部位痉挛吧。</p><p>（我拿着3个部位痉挛的结果时，医生很震惊，说这是他当时见过的最严重的病人……）</p><p>然而我却从14年12月一直到15年的5月间，无数次的波折。跑过N家医院，内科，外科，脑病科，骨科，肺病科（当时肺也不好，不戴口罩就咳），眼科（因为干眼症），针灸科，挨个科室，轮流挂号。就是这么两个检查，就能确诊的结果。</p><p>脑部拍过核磁共振，吃过癌症止痛的药，做了很多检查，却听了太多的医生说“无法解释头疼的原因”。</p><p>后来一个信任的内科医生随口说，颈椎也会引起头疼，建议去骨科做个检查。然后我才决定，再去一次骨科。</p><p>先挂了一个号，随机碰了个医生。我说头疼，不知是不是颈椎的问题，医生看了我一眼，什么话也没说，直接开了两盒膏药，就让我去付费。</p><p>我顿时觉得被唬弄了。于是又去重新挂了个号，换了个医生，这次的医生叫汤俊，终于被重视了。</p><p>做完TCD检查，他又解释一遍原理，症状和原因一对照，我顿时拔开迷雾，豁然开朗了。</p><p>后来我的颈椎病能治好，也是亏了这个医生。</p><p>（一直想给他送个锦旗，然而因为人懒……如果汤医生能看到这篇文章，很想说，汤俊，谢谢你治好我！）</p><p>04</p><p>前面说了外部症状、确诊的检查方式。</p><p>然而谈到治疗，就不得不先说，为什么会得。</p><p>医生解释说，无论是颈椎病还是腰椎病，本质上都是肌肉无力，肌肉不能分担受力，就会造成骨头受力太大，从而在弯曲后，无法再恢复到初始状态。</p><p>治疗方式上，推拿、牵引、包括后面我要说到的颈椎枕，都是属于用外力，强行将骨头复位。然而这种方式，治标不治本，还会复发。</p><p>最根本的方式，其实是加强自身的肌肉力量，强有力的肌肉，会自己将骨头推回原位，并在后续的时间里，帮骨骼分担压力，从而防止复发。</p><p>上海中医医院（汤医生在的医院）的治疗方法，其实就是刺激肌肉生长。</p><p>针灸颈部的四个穴位，针上连着电线（电池供电），然后用微弱的电流，刺激穴位周围肌肉纤维的生长。</p><p>治疗的过程中，确实能感受到变化。最初针灸时，针扎入皮肤，没几分钟就掉出来了，然后就得召唤医生来补针。一个小时的治疗，需要叫四五次医生。</p><p>医生也很无奈，解释说，针扎到皮下，肌肉纤维会包裹住针。所以，如果肌肉萎缩，纤维无力，裹不住针的，就会掉出来。</p><p>治疗一段时间后，最明显的变化是，针终于不掉了。医生看了也很高兴，说你肌肉纤维终于有点力量了，扎针时也终于能感觉到有弹性了，不像刚来时，扎进肉里感觉像扎到纸里似的。</p><p>我还是每一个多月去做一次TCD检测。到了11月时，X光片也显示正常了。</p><p>从确诊颈椎病，直到治疗结束，历时5个多月，这期间每周两次去医院治疗。05</p><p>然而我知道，这种治疗方式，不是所有人都能够接受。一方面，不是每家医院都能治，另一方面，长时间的请假也不是所有人都能接受的（比如我那年的升职加薪年终奖，就统统消失了……）。</p><p>所以如果无法医院治疗的话，就只能自己锻炼肌肉了。</p><p>再补充几个我自己的经验：</p><p>1、当剧烈头痛爆发时（甚至开始呕吐时）：这是大脑的应激状态开始了，只能立即平躺休息了，再强忍着做各种事，很可能会造成脑损伤。不过我在亲身检测中，发现《藿香正气口服液》能很快缓解症状。（原因未知。我一度怀疑，是不是因为其中含有酒精，从而使血液循化加快，进而缓解了脑供血不足）</p><p>2、当长期头痛，身体虚弱时，可以考虑颈椎枕（外力方式）。颈椎枕就是一个圆柱型的枕头，睡觉时垫在颈部。可以淘宝买，也可以自己用杂志卷一个筒，外面包上毛巾。但需要注意的是，这种外力改变颈椎弧度的方式，是短期治标不治本的方法，该锻炼仍要锻炼。</p><p>3、长远来看，最终的方式仍是肌肉的恢复。比如，打羽毛球，放风筝，游泳</p><p>有一个从老中医处讨来的颈椎运动偏方，也满有效。</p><p>这个方法，用一句话描述就是：用下巴画最大的圆弧。下巴前伸，然后向下，再向后尽力缩，再向上尽力仰。（做的时候要小心，正常人做是没问题的，然而肌肉无力的颈椎病人做，会听见骨头咔咔作响的声音……）</p><p>写在最后，帮毛毛同学做个推荐。</p><p>她是关注我很久的粉丝了。</p><p>6月5日，</p><p>她将开一个免费直播，</p><p>会有专业的健身教练来分享</p><p>如何改善肩颈问题。</p><p><a href="http://weixin.qq.com/r/dirL0zTE5WmarXCw939k">http://weixin.qq.com/r/dirL0zTE5WmarXCw939k</a> (二维码自动识别)</p><p>蜜圈小课堂第1期｜不良坐姿会导致圆肩驼背？教你如何缓解肩颈不适，远离不良体态。<br>欢迎点击链接，报名参加。</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>别给自己找借口</title>
      <link href="/2016/01/23/2015others/20160123/"/>
      <url>/2016/01/23/2015others/20160123/</url>
      
        <content type="html"><![CDATA[<p>我经常能收到各种回复、提问、私信，有五种我不会回答，有这五种思维的人在现实生活中，我也会尽量远离，这是我爸活着的时候教我的。后来我一位广东朋友跟我说，这不是我爸一个人悟出来的，这是一种在他们那边流传很久的智慧，用广东话讲“费神教会你”。</p><span id="more"></span><p>给自己找借口</p><p>我收到很多人抱怨自己特别有天赋，被家庭环境所耽误，有些人的确是，这我不否认。但是如果你继续在抱怨的泥潭里，谁也帮不了你。你必须行动起来，改变这一切，大多数时候，尤其是你成年以后，很少有人能干涉你的生活，除了你自己，只有你自己同意。</p><p>有位姑娘抱怨“我视野不够是被家庭条件所限，父母没有钱让我环游世界，开拓眼界，所以我发展一直不好。我该怎么办？”</p><p>我爸妈也没给我钱让我环游世界去，不光如此我和妹妹还都是大学家里就不再给钱了，我和妹妹的大学假期都是在打工中度过的。可我妹妹在大学就帮助瑞士老师做过设计展。</p><p>开拓视野，真的只有环游世界这一个办法吗？你不思考总结，你环游了世界又怎么样。人生开拓视野读书、见人、行路、历事都可以，没钱环游世界，读书不就行了？没钱买书，大学图书馆又不收费，多读点书不就行了。为什么《认识商业》《沟通的艺术：看入人里，看出人外》《成功心理学：发现工作与生活的意义》在开头章节都通过总结、评测进行自我认知。我们必须了解自己，正视自己，学会承担责任，为自己的决定负责。你自己被家庭条件阻碍，视野不够，又有几个人的父母资助他们的孩子环游世界去了？你如果不正视自己之前的错误决策，继续为自己找借口，那就只能被困在原地。</p><p>大学没有利用好，那毕业后就好好努力呗！为自己找了借口，是舒服了，心理安慰了。潜意识，也会觉得反正不是我的错，那我就继续这样呗。这种思维方式何谈改变呀？！</p><p>偷换概念</p><p>这种人更可怕，我们北京俗语说“干什么不吆喝什么”，“你说前门楼子，他说胯骨肘子”。</p><p>比如我们如果想吸粉成为大号，那就充分搜集信息，找到渠道、学习写作技巧。大家聊天也是围绕这个，可是善于偷换概念的人，他思维是跳跃的，他不围绕这个。</p><p>有个人问抱怨他文章浏览量低，我说你提高文章质量看的人就多了。他说你是红人，所以浏览量高。</p><p>他问你怎么能在短时间内让微信公众号粉丝多起来。我给了他几个平台，建议他写完文章都发发。他说“你怎么这么浮躁。”</p><p>有个姑娘单身，问我怎么能够建立亲密关系，我给她推荐《沟通的艺术：看入人里，看出人外》里关于亲密关系的章节。她说“跟男朋友耍心机，感情得不到好结果。”你跟你妈不讲沟通技巧，你妈都讨厌你，别说跟男朋友了。讲沟通技巧怎么就变成耍心机了？你跟他保持亲密关系，进行语言和非语言沟通就变成耍心机了？</p><p>不要觉得这是个例，大家可以看看我浏览量几十万的《如何通过爱好赚钱》那篇文章，有几十个回复都是“做自己喜欢的事赚不到钱”，你赚不到钱是能力不行，跟做自己喜欢的事有什么关系？我一直做自己喜欢的事、特立独行的猫一直做自己喜欢的事，我们没有比别人赚钱少呀？赚钱这个事，跟你的能力、思维逻辑有直接关系，跟你喜欢不喜欢你的工作，没什么关系。三百六十行，行行出状元。《理解未来的7个原则：如何看到不可见，做到不可能》用整本书讲如何赚钱，明确提出周期性和线性的决定性作用：周期性变化告诉我们许多种不同的确定性。人类已经找出300个显著的周期，可以在某种程度上精确的预测未来。莎士比亚说：世间事，也有涨潮时节，及时把握，终可功成名就。</p><p>这种偷换概念的思维方式、沟通方式，是最好的拒绝别人分享的方式。因为沟通太累，大多数人都会闭嘴，有这种思维的人因为沟通效率差、做事效率低、抓不住重点会被处处受限。</p><p>看什么都是“鸡汤”</p><p>直接上个截图当例子，大家就明白了。</p><p>正常我们的逻辑，我会问怎么当上旅行体验师？这个工作前景如何？薪水如何？需要什么技能？工作内容是什么？</p><p>逻辑思维的关键是“学会提问”，以开放式的心态，学会提问，你学习知识的途径就是一个立体的 ，随时随地都在接受信息，都在吸收知识，这也被称为“淘金式”思维。</p><p>相反，截图里的这个例子，是封闭式思维的学习方式。想有孩子，以后会做家长的人千万要注意，教育孩子一定要确认孩子的思维方式，在上学前，教会孩子开放式的思维方式，让孩子学会主动摄取知识，这样孩子学习轻松成绩好。封闭式学习思维的孩子尽管很用功，很努力成绩也总是不尽如人意，尤其是在中学以后，他们在学习上会更痛苦。</p><p>行动前，先给自己设置障碍，然后放弃</p><p>我经常会收到，问我如何写作的，我写过很多关于基础写作的文章，帮助他们。可是他们总会说“这太难了。”</p><p>还有人问我什么样的读书类文章会受欢迎，我说横向或者纵向阅读的主题书单，然后他说正常人根本就没有这种阅读量。然后我给他推荐《沟通圣经：听说读写全方位沟通技巧》第12章增进阅读速度，第13章提高阅读效率，然后他说“还得先学阅读，这工程太浩大了。”</p><p>有人说我不喜欢现在工作，怎么能找到喜欢的工作并且赚到钱。我的建议只需要评估自己、树立自己想要的目标、了解实现目标需要的技能、学习和提高自身能力、努力实现目标。他们通常会说“可是怎么开始呢？”</p><p>他们在行动前，就被自己抛出的问题吓到了，然后就没有然后了。他们会说自己拖延症、选择恐惧症。</p><p>通过片面信息、以点概面的否定</p><p>逻辑分析的首要条件是什么？“充分占有信息”。盲目的通过片面信息否定，有时候很可笑。</p><p>比如有人看了我的便签说“字如其人，看这字就是个生活混乱的男人。”难道我两个孩子都是你生的？你给喂的奶？</p><p>我还收到过“第三行打了两个句号，作者是个浮躁的人。”</p><p>我鼓励大家无论男女都要经济独立，马上有人说“满身铜臭，就知道钱。”</p><p>我总是做工具书总结，有人说“你应该多读名著陶冶情操，就不会这么世俗了。”我上学的时候，一直担任班里的图书管理员，在初中、高中的假期协助图书馆老师完成了两个学校的图书馆电子化录入，就是把书读完，把主要内容录入到电脑里，方便检索。学校给学生选的书，大家可以想想算不算名著。我个人分析我世俗应该跟读不读名著没什么关系。</p><p>我分享理财攻略，马上有人说“这个人充满物欲。”你父母生病，住院办给你打电话跟你说“单间自费，1000元每天，您预定吗？”的时候，咱们可以再来聊这个话题。</p><p>写了这么多，希望能帮到大家。改变对话的方式，传递真正想说的信息，而不是表达攻击。</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>别给自己设定界限</title>
      <link href="/2016/01/01/2015others/20160101/"/>
      <url>/2016/01/01/2015others/20160101/</url>
      
        <content type="html"><![CDATA[<p>你会发现，<br>大部分人对事物的理解多为道听途说，<br>他们会告诉你“你做不到”，<br>不是因为“他们知道你做不到”<br>也不是因为“他们自己做不到”<br>而是因为:<br>“他们听别人说做不到”。</p><span id="more"></span><p>就这个问题，答主在MIT的时候，问过自己的一位老师，诺贝尔物理学奖得主，夸克的发现人，弗里德曼。</p><p>在这里，答主要揭示一个关键的逻辑，这个关键的逻辑，诅咒着99%的人。</p><p>这个逻辑是什么呢？</p><p>请紧跟下面对话，不要快速阅读，要慢慢看，一句一句地看：</p><p>弗里德曼：地球是圆的吗？</p><p>答主：是的。</p><p>弗里德曼：你知道地球是圆的吗？</p><p>答主：知道。</p><p>弗里德曼：但是，你知道地球是圆的，说明你很厉害吗？</p><p>答主：不。</p><p>弗里德曼：你知道一个很重要的实事，而且你是对的，为什么不能证明你很厉害？</p><p>答主：因为：这个事情已经得到大家的认同了！</p><p>弗里德曼：是啊。只要是大家都已经认同的东西，你再对，也没有意义了。</p><p>其实，任何个人的成就，特别是在学科领域，都是在大家不知道、不同意，甚至强烈反对的时候，你坚持，并且发现你是对的之后，才产生的。也就是说，想要做出成就，最主要的就是：不能做大家都已经认同的事情。也就是，要出众，则不能从众。在这方面，中国的学生是最差的。</p><p>答主认为，这才是“钱学森之问”真正的答案。</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过去</title>
      <link href="/2015/07/01/2015others/20150701/"/>
      <url>/2015/07/01/2015others/20150701/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="http://music.163.com/outchain/player?type=2&id=694286&auto=0&height=66"></iframe><p><img src="/assets/headimg/lwq.jpg"></p><p>不要害怕，很多你怕的事情并不会发生。<br>不要想太多，很多事情你永远想不到。<br>没事别给自己找事，有事不要怕事。<br>直接行动会带来比设想万全计划带来更直接的改变。因为行动会构成既定现实的一部分，而想一堆不会。</p><span id="more"></span><p>能处理事情，需要复杂。能过得开心，需要简单。如果处理不了事情，那就复杂一些。如果过得不快乐，那就丢掉一些。</p><p>如果焦虑或者烦躁，就减少日程。计划排的太满超出自我能力后，会进入拖延什么也做不了。</p><p>如果你觉得社交很累很有负担很麻烦，一群很low的人说着很low的话。那你可以尝试着把社交变为一种放松的方式。别把社交当舞台当工作，拼命想要表现好，你就当你是去玩的就好了。把平常很多想说的废话说了，大家一起low一会儿，开心完了放松了就可以开始死正经的工作啦。</p><p>想当社交核心，你不用表现出社交达人的样子，你只需要一个一个拿下。跟一个一个人慢慢处理好关系，当你和人群中大多数的人一步一步建立起关系的时候，你就是核心。</p><p>一定要给自己放松和休息留出时间。人是需要一些时间用来发呆，睡觉，说废话，拖延的。如果你连这些时间都想要压榨用来努力，你的心理生理平衡会被打破。不按时定期娱乐和放松，时间久了，你会付出一直高速运转带来的代价。那就是整个人状态的下滑和效率降低。</p><p>哪怕对自己的能力很自信，也不要一开始就上最大强度最高难度。循序渐进会让你走的更稳。想一步登天会直接挫伤你的自信。</p><p>一鼓作气，再而衰，三而竭。做到一半了，千万别放弃太久。不断重启很耗电的～</p><p>通过情绪进行自我检查。一般能特别触动你负面情绪的事情，指向些你内心的伤口或者不合理的观点。比如有人攻击了你，你非常愤怒。很可能意味着，你的想法在一定程度上被他说中了。</p><p>如果你遇到了挫折，不用全部否定自己的努力和成果。也不用改掉自己所有的缺点，更不用颠覆自己本有的个性。你只需要做出一丁点的调整，你的缺点就能变成你独有的优势。</p><p>不要自责。很多事情的发生并不是你的错。只有保护好自己的自信，不陷入自我怀疑，你才有力量重新站起来。对自己好一点，你自己是一切的开始。</p><p>不要拉低自己的底线。不要在灰色地带游走。出卖掉的东西，想要再买回来就很难了。有的时候你会遇到一些拉低自己底线而获得一些利益的人。他们看似没有付出什么代价就得到了一些本不该得到的东西。好像坏人也并没有收到惩罚。但坏的行事手段，会加大坏的结果出现的概率。一次两次三次，也许谁都没发现。十次八次九次，次次幸免于难怎么可能？同样，做好事也是一样的道理，也许一次两次三次你并没有获得什么好处。十次八次九次，做的越多，概率越大。你会更容易遇到幸福。</p><p>目标是类似于月亮的东西。在你累的时候，抬头看看月亮，可以重新鼓起勇气。月亮的光芒会一直照着你前进的路。不要一直仰望着它，脖子会酸，会停住脚步，会掉进坑里。更不要把月亮背在身上，你会被压垮。</p><p>对一个人好的最佳方式，就是努力。你成功了，有能力了，你收益，所有的人也跟着你收益。而停下自己的脚步用已有的东西低效的付出，不仅你会累垮，周围的人对同样的东西的一再刺激也会麻木不知感恩。</p><p>挫折无法避免。挫折是常态。适当的挫折和压力会让你整个人趋于平稳。放心吧，不会只有你一个人那么惨的，大家都是这样。很多人看似一帆风顺，只不过是因为他们没有把那些事说出来罢了。挫折只是个小路障，不要一直对这个障碍物发火，或者怀疑自己怎么会遇到这种事。你要做的就是绕开它，处理它，处理掉你就又可以一帆风顺。</p><p>不要太计较。不要觉得别人心机重心思多，能活到现在这个岁数的人，多多少少都会有些自己的算盘和想法。这是正常的。你也有。太单纯的人，是活不下去的。</p><p>无论是多么开心的事情，最多过两个月，你就没那么开心了。无论是多么难过的事情，最多过两月，你也会好很多。所以，开心的时候就尽情的开心吧，因为它很快就会过去，所以才值得珍惜。悲伤的时候也不要害怕，因为它也会很快的过去。</p><p>我有一个独家小秘方，能让你更快乐。那就是写日记。写你最悲伤的，最痛苦的，最羞于启齿的，最无法接受的痛苦的事。重复写一件事也可以，换着事儿写也可以。以前发生的也行，最近发生的也行。每天写一会儿，到第四天左右，你可能觉得更糟糕了。因为你在重新面对这些事情。<br>到一周以后，通过这样的过程，你的负面能量得到了一个出口，当他们被疏导，发泄后，就不会再影响你了。你的经验也会被提纯，整理，你会有更多的掌控力。在那些痛苦的事情面前，你不再无助和失意，你不仅放下了，走出来了，你还获得了你应该得到的报酬。</p><p>负面情绪和正面情绪是同一种机制在运作的。你压抑了自己痛苦的同时，你快乐的情绪也会被压制。所以，允许自己成为一个人吧。</p><p>编辑于 2015-06-23</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
